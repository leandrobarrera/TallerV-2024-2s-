
SolucionTarea3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009b30  08009b30  0000ab30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb0  08009fb0  0000b1c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009fb0  08009fb0  0000afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb8  08009fb8  0000b1c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb8  08009fb8  0000afb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fbc  08009fbc  0000afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08009fc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001c8  0800a188  0000b1c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800a188  0000b5c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000b1c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c26  00000000  00000000  0000b1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001082  00000000  00000000  0000fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  00010ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003b3  00000000  00000000  000113b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010033  00000000  00000000  00011763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005da4  00000000  00000000  00021796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057392  00000000  00000000  0002753a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007e8cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  0007e910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000810e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b14 	.word	0x08009b14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	08009b14 	.word	0x08009b14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
void display_numbers(uint8_t valor);	//funcion para que se pinten los numeros, se enciendan los displays, se apaguen, etc.
void switcheo_transistor (uint8_t choose);		//funcion para encender los transistores y hacer el switcheo respectivo
void separador_numero (uint16_t valor);			//funcion para la creacion del numero como tal, ya que no usamos el mismo esquema de la tarea pasada, ahora usamos una funcion que genera los numeros que vamos a pintar en el display.

int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	init_system();
 8000d08:	f000 fbc4 	bl	8001494 <init_system>


	while(1){


		pinClockc = gpio_ReadPin(&pinClock);
 8000d0c:	4899      	ldr	r0, [pc, #612]	@ (8000f74 <main+0x270>)
 8000d0e:	f003 fe39 	bl	8004984 <gpio_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b98      	ldr	r3, [pc, #608]	@ (8000f78 <main+0x274>)
 8000d18:	701a      	strb	r2, [r3, #0]

		//se usa la bandera para que cuando presionemos m se muestre el mensaje escrito.

		if(flag_usart){
 8000d1a:	4b98      	ldr	r3, [pc, #608]	@ (8000f7c <main+0x278>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00a      	beq.n	8000d38 <main+0x34>
			if (usart_data == 'm'){
 8000d22:	4b97      	ldr	r3, [pc, #604]	@ (8000f80 <main+0x27c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b6d      	cmp	r3, #109	@ 0x6d
 8000d28:	d103      	bne.n	8000d32 <main+0x2e>
				usart_writeMsg(&usart2, "Taller V + Bancolombia rocks!\n");
 8000d2a:	4996      	ldr	r1, [pc, #600]	@ (8000f84 <main+0x280>)
 8000d2c:	4896      	ldr	r0, [pc, #600]	@ (8000f88 <main+0x284>)
 8000d2e:	f004 fb32 	bl	8005396 <usart_writeMsg>
			}

			flag_usart = 0;
 8000d32:	4b92      	ldr	r3, [pc, #584]	@ (8000f7c <main+0x278>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
		}

		//changeModo es la variable que usamos para navegar a traves de los modos, y modos es el contador dentro de la misma. Establecemos un maximo de 6 modos para que el contador no siga sumando hasta modo infinito.
		if(changeModo){
 8000d38:	4b94      	ldr	r3, [pc, #592]	@ (8000f8c <main+0x288>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00f      	beq.n	8000d60 <main+0x5c>
			modo++;
 8000d40:	4b93      	ldr	r3, [pc, #588]	@ (8000f90 <main+0x28c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b91      	ldr	r3, [pc, #580]	@ (8000f90 <main+0x28c>)
 8000d4a:	701a      	strb	r2, [r3, #0]
			if(modo==6){
 8000d4c:	4b90      	ldr	r3, [pc, #576]	@ (8000f90 <main+0x28c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b06      	cmp	r3, #6
 8000d52:	d102      	bne.n	8000d5a <main+0x56>
				modo = 0;
 8000d54:	4b8e      	ldr	r3, [pc, #568]	@ (8000f90 <main+0x28c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
			}
			changeModo = 0;
 8000d5a:	4b8c      	ldr	r3, [pc, #560]	@ (8000f8c <main+0x288>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		}
		// switch case para navegar entre modoos
		switch(modo){
 8000d60:	4b8b      	ldr	r3, [pc, #556]	@ (8000f90 <main+0x28c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d8d1      	bhi.n	8000d0c <main+0x8>
 8000d68:	a201      	add	r2, pc, #4	@ (adr r2, 8000d70 <main+0x6c>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000e37 	.word	0x08000e37
 8000d78:	08000fd9 	.word	0x08000fd9
 8000d7c:	08001087 	.word	0x08001087
 8000d80:	080011c5 	.word	0x080011c5
 8000d84:	08001319 	.word	0x08001319
			//en el modo 0, ejecutamos las indicaciones escritas en la tarea, todas comparten la config. del led RGB, otros comparten configs. de USART, y ADC.
			case modo_0:{
				gpio_WritePin(&LedRed, 0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4882      	ldr	r0, [pc, #520]	@ (8000f94 <main+0x290>)
 8000d8c:	f003 fdd0 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedGreen, 0);
 8000d90:	2100      	movs	r1, #0
 8000d92:	4881      	ldr	r0, [pc, #516]	@ (8000f98 <main+0x294>)
 8000d94:	f003 fdcc 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedBlue, 0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4880      	ldr	r0, [pc, #512]	@ (8000f9c <main+0x298>)
 8000d9c:	f003 fdc8 	bl	8004930 <gpio_WritePin>

				// la variable siete_segmentos es lo que al final se almacena y muestra en el display.
				separador_numero(siete_segmentos);
 8000da0:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa0 <main+0x29c>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 ffc1 	bl	8001d2c <separador_numero>
				// usamos la bandera del display para switchear correctamente los transistores. caso_transistor es una variable que nos permite avanzar al siguiente switcheo del siguiente transistor.
				if (display_flag){
 8000daa:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa4 <main+0x2a0>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8345 	beq.w	800143e <main+0x73a>
					switch(caso_transistor){
 8000db4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fa8 <main+0x2a4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d838      	bhi.n	8000e2e <main+0x12a>
 8000dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <main+0xc0>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000ded 	.word	0x08000ded
 8000dcc:	08000e05 	.word	0x08000e05
 8000dd0:	08000e1d 	.word	0x08000e1d
						case 0:{
							switcheo_transistor(caso_transistor);
 8000dd4:	4b74      	ldr	r3, [pc, #464]	@ (8000fa8 <main+0x2a4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 ff27 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8000dde:	4b72      	ldr	r3, [pc, #456]	@ (8000fa8 <main+0x2a4>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b70      	ldr	r3, [pc, #448]	@ (8000fa8 <main+0x2a4>)
 8000de8:	701a      	strb	r2, [r3, #0]
							break;
 8000dea:	e020      	b.n	8000e2e <main+0x12a>
						}
						case 1:{
							switcheo_transistor(caso_transistor);
 8000dec:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa8 <main+0x2a4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 ff1b 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8000df6:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa8 <main+0x2a4>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8000fa8 <main+0x2a4>)
 8000e00:	701a      	strb	r2, [r3, #0]
							break;
 8000e02:	e014      	b.n	8000e2e <main+0x12a>
						}
						case 2:{
							switcheo_transistor(caso_transistor);
 8000e04:	4b68      	ldr	r3, [pc, #416]	@ (8000fa8 <main+0x2a4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 ff0f 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8000e0e:	4b66      	ldr	r3, [pc, #408]	@ (8000fa8 <main+0x2a4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b64      	ldr	r3, [pc, #400]	@ (8000fa8 <main+0x2a4>)
 8000e18:	701a      	strb	r2, [r3, #0]
							break;
 8000e1a:	e008      	b.n	8000e2e <main+0x12a>
						}
						case 3:{
							switcheo_transistor(caso_transistor);
 8000e1c:	4b62      	ldr	r3, [pc, #392]	@ (8000fa8 <main+0x2a4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 ff03 	bl	8001c2c <switcheo_transistor>
							caso_transistor = 0;
 8000e26:	4b60      	ldr	r3, [pc, #384]	@ (8000fa8 <main+0x2a4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
							break;
 8000e2c:	bf00      	nop
						}

					}

					display_flag = 0;
 8000e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa4 <main+0x2a0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000e34:	e303      	b.n	800143e <main+0x73a>
			}
			case modo_1:{
					gpio_WritePin(&LedRed, 0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	4856      	ldr	r0, [pc, #344]	@ (8000f94 <main+0x290>)
 8000e3a:	f003 fd79 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedGreen, 1);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4855      	ldr	r0, [pc, #340]	@ (8000f98 <main+0x294>)
 8000e42:	f003 fd75 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedBlue, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	4854      	ldr	r0, [pc, #336]	@ (8000f9c <main+0x298>)
 8000e4a:	f003 fd71 	bl	8004930 <gpio_WritePin>
					// mandamos la funcion configsingchannel a ejecutarse, recordemos que es la que inicializa el proceso del adc, y se llama asi porque solo podemos tener un canal ADC al tiempo funcionando.
					adc_ConfigSingleChannel(&trimmer);
 8000e4e:	4857      	ldr	r0, [pc, #348]	@ (8000fac <main+0x2a8>)
 8000e50:	f001 f994 	bl	800217c <adc_ConfigSingleChannel>
					// buen uso del & como operacion, y no siempre como operacion bitwise. Usamos las banderas de la conversion y del propio adc.
					if(flag_adc & flag_adc_conversion){
 8000e54:	4b56      	ldr	r3, [pc, #344]	@ (8000fb0 <main+0x2ac>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b56      	ldr	r3, [pc, #344]	@ (8000fb4 <main+0x2b0>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d008      	beq.n	8000e76 <main+0x172>
					//para este modo usamos el trimmer, y el dato de adc se guarda en datoTrimmer
						datoTrimmer = adcData;
 8000e64:	4b54      	ldr	r3, [pc, #336]	@ (8000fb8 <main+0x2b4>)
 8000e66:	881a      	ldrh	r2, [r3, #0]
 8000e68:	4b54      	ldr	r3, [pc, #336]	@ (8000fbc <main+0x2b8>)
 8000e6a:	801a      	strh	r2, [r3, #0]
						adc_StartSingleConv();
 8000e6c:	f002 f8b2 	bl	8002fd4 <adc_StartSingleConv>
						//bajamos la bandera
						flag_adc = 0;
 8000e70:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <main+0x2ac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
					}
					//arreglo para mejor visualizacion de los datos mostrados en el micro.
					if(subdivisiones < 6){
 8000e76:	4b52      	ldr	r3, [pc, #328]	@ (8000fc0 <main+0x2bc>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d80e      	bhi.n	8000e9c <main+0x198>
						promedio += datoTrimmer;
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <main+0x2c0>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	4b4e      	ldr	r3, [pc, #312]	@ (8000fbc <main+0x2b8>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc4 <main+0x2c0>)
 8000e8c:	801a      	strh	r2, [r3, #0]
						subdivisiones ++;
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc0 <main+0x2bc>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <main+0x2bc>)
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e00e      	b.n	8000eba <main+0x1b6>
					}else{
						siete_segmentos = promedio / 5;
 8000e9c:	4b49      	ldr	r3, [pc, #292]	@ (8000fc4 <main+0x2c0>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <main+0x2c4>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa0 <main+0x29c>)
 8000eac:	801a      	strh	r2, [r3, #0]
						subdivisiones = 0;
 8000eae:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <main+0x2bc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
						promedio = 0;
 8000eb4:	4b43      	ldr	r3, [pc, #268]	@ (8000fc4 <main+0x2c0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	801a      	strh	r2, [r3, #0]
					}
					separador_numero(siete_segmentos);
 8000eba:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <main+0x29c>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 ff34 	bl	8001d2c <separador_numero>
					//switcheo de los transistores. Este proceso es generico de todos los casos, es para encender el display y mostrar lo que necesitemos.
					if (display_flag){
 8000ec4:	4b37      	ldr	r3, [pc, #220]	@ (8000fa4 <main+0x2a0>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d03f      	beq.n	8000f4c <main+0x248>
						switch(caso_transistor){
 8000ecc:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <main+0x2a4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d838      	bhi.n	8000f46 <main+0x242>
 8000ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8000edc <main+0x1d8>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000f05 	.word	0x08000f05
 8000ee4:	08000f1d 	.word	0x08000f1d
 8000ee8:	08000f35 	.word	0x08000f35
							case 0:{
								switcheo_transistor(caso_transistor);
 8000eec:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <main+0x2a4>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fe9b 	bl	8001c2c <switcheo_transistor>
								caso_transistor ++;
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <main+0x2a4>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <main+0x2a4>)
 8000f00:	701a      	strb	r2, [r3, #0]
								break;
 8000f02:	e020      	b.n	8000f46 <main+0x242>
							}
							case 1:{
								switcheo_transistor(caso_transistor);
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <main+0x2a4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fe8f 	bl	8001c2c <switcheo_transistor>
								caso_transistor ++;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <main+0x2a4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <main+0x2a4>)
 8000f18:	701a      	strb	r2, [r3, #0]
								break;
 8000f1a:	e014      	b.n	8000f46 <main+0x242>
							}
							case 2:{
								switcheo_transistor(caso_transistor);
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <main+0x2a4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fe83 	bl	8001c2c <switcheo_transistor>
								caso_transistor ++;
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <main+0x2a4>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <main+0x2a4>)
 8000f30:	701a      	strb	r2, [r3, #0]
								break;
 8000f32:	e008      	b.n	8000f46 <main+0x242>
							}
							case 3:{
								switcheo_transistor(caso_transistor);
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <main+0x2a4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fe77 	bl	8001c2c <switcheo_transistor>
								caso_transistor = 0;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <main+0x2a4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
								break;
 8000f44:	bf00      	nop
							}

						}


						display_flag = 0;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <main+0x2a0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
					}

					// sendMsg es la variable del usart.
				if (sendMsg){
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <main+0x2c8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8276 	beq.w	8001442 <main+0x73e>
					//esta es la forma de escribir para que mediante el canal de usart podamos obtener el mensae "modo 1" se tome el espacio y diga el valor que entrega adc (a traves del trimmer).
					sprintf (bufferMsg, "modo 1 \n%d\n",datoTrimmer);
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <main+0x2b8>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	491c      	ldr	r1, [pc, #112]	@ (8000fd0 <main+0x2cc>)
 8000f5e:	481d      	ldr	r0, [pc, #116]	@ (8000fd4 <main+0x2d0>)
 8000f60:	f005 f9ba 	bl	80062d8 <siprintf>
					usart_writeMsg (&usart2, bufferMsg);
 8000f64:	491b      	ldr	r1, [pc, #108]	@ (8000fd4 <main+0x2d0>)
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <main+0x284>)
 8000f68:	f004 fa15 	bl	8005396 <usart_writeMsg>
					sendMsg = 0;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <main+0x2c8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f72:	e266      	b.n	8001442 <main+0x73e>
 8000f74:	200002d4 	.word	0x200002d4
 8000f78:	20000264 	.word	0x20000264
 8000f7c:	20000246 	.word	0x20000246
 8000f80:	20000258 	.word	0x20000258
 8000f84:	08009b30 	.word	0x08009b30
 8000f88:	200003c8 	.word	0x200003c8
 8000f8c:	20000252 	.word	0x20000252
 8000f90:	20000245 	.word	0x20000245
 8000f94:	20000298 	.word	0x20000298
 8000f98:	200002a4 	.word	0x200002a4
 8000f9c:	200002b0 	.word	0x200002b0
 8000fa0:	2000025e 	.word	0x2000025e
 8000fa4:	20000458 	.word	0x20000458
 8000fa8:	20000244 	.word	0x20000244
 8000fac:	200002f8 	.word	0x200002f8
 8000fb0:	20000247 	.word	0x20000247
 8000fb4:	2000024e 	.word	0x2000024e
 8000fb8:	20000248 	.word	0x20000248
 8000fbc:	2000024a 	.word	0x2000024a
 8000fc0:	2000025c 	.word	0x2000025c
 8000fc4:	2000025a 	.word	0x2000025a
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	2000024f 	.word	0x2000024f
 8000fd0:	08009b50 	.word	0x08009b50
 8000fd4:	20000318 	.word	0x20000318
			}

			//configs iniciales de siempre para encender el 7segmentos y LED RGB.
			case modo_2:{
				gpio_WritePin(&LedRed, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	48a5      	ldr	r0, [pc, #660]	@ (8001270 <main+0x56c>)
 8000fdc:	f003 fca8 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedGreen, 0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	48a4      	ldr	r0, [pc, #656]	@ (8001274 <main+0x570>)
 8000fe4:	f003 fca4 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedBlue, 1);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	48a3      	ldr	r0, [pc, #652]	@ (8001278 <main+0x574>)
 8000fec:	f003 fca0 	bl	8004930 <gpio_WritePin>

				separador_numero(siete_segmentos);
 8000ff0:	4ba2      	ldr	r3, [pc, #648]	@ (800127c <main+0x578>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fe99 	bl	8001d2c <separador_numero>

				if (display_flag){
 8000ffa:	4ba1      	ldr	r3, [pc, #644]	@ (8001280 <main+0x57c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8221 	beq.w	8001446 <main+0x742>
					switch(caso_transistor){
 8001004:	4b9f      	ldr	r3, [pc, #636]	@ (8001284 <main+0x580>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d838      	bhi.n	800107e <main+0x37a>
 800100c:	a201      	add	r2, pc, #4	@ (adr r2, 8001014 <main+0x310>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001025 	.word	0x08001025
 8001018:	0800103d 	.word	0x0800103d
 800101c:	08001055 	.word	0x08001055
 8001020:	0800106d 	.word	0x0800106d
						case 0:{
							switcheo_transistor(caso_transistor);
 8001024:	4b97      	ldr	r3, [pc, #604]	@ (8001284 <main+0x580>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fdff 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 800102e:	4b95      	ldr	r3, [pc, #596]	@ (8001284 <main+0x580>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b93      	ldr	r3, [pc, #588]	@ (8001284 <main+0x580>)
 8001038:	701a      	strb	r2, [r3, #0]
							break;
 800103a:	e020      	b.n	800107e <main+0x37a>
						}
						case 1:{
							switcheo_transistor(caso_transistor);
 800103c:	4b91      	ldr	r3, [pc, #580]	@ (8001284 <main+0x580>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fdf3 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8001046:	4b8f      	ldr	r3, [pc, #572]	@ (8001284 <main+0x580>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b8d      	ldr	r3, [pc, #564]	@ (8001284 <main+0x580>)
 8001050:	701a      	strb	r2, [r3, #0]
							break;
 8001052:	e014      	b.n	800107e <main+0x37a>
						}
						case 2:{
							switcheo_transistor(caso_transistor);
 8001054:	4b8b      	ldr	r3, [pc, #556]	@ (8001284 <main+0x580>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fde7 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 800105e:	4b89      	ldr	r3, [pc, #548]	@ (8001284 <main+0x580>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b87      	ldr	r3, [pc, #540]	@ (8001284 <main+0x580>)
 8001068:	701a      	strb	r2, [r3, #0]
							break;
 800106a:	e008      	b.n	800107e <main+0x37a>
						}
						case 3:{
							switcheo_transistor(caso_transistor);
 800106c:	4b85      	ldr	r3, [pc, #532]	@ (8001284 <main+0x580>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fddb 	bl	8001c2c <switcheo_transistor>
							caso_transistor = 0;
 8001076:	4b83      	ldr	r3, [pc, #524]	@ (8001284 <main+0x580>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
							break;
 800107c:	bf00      	nop
						}

					}

					display_flag = 0;
 800107e:	4b80      	ldr	r3, [pc, #512]	@ (8001280 <main+0x57c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001084:	e1df      	b.n	8001446 <main+0x742>
			}
			//para el caso 3 es muy similar al del trimmer solo que usamos los datos que corresponde a fotoresistencia.
			case modo_3:{
				gpio_WritePin(&LedRed, 1);
 8001086:	2101      	movs	r1, #1
 8001088:	4879      	ldr	r0, [pc, #484]	@ (8001270 <main+0x56c>)
 800108a:	f003 fc51 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedGreen, 0);
 800108e:	2100      	movs	r1, #0
 8001090:	4878      	ldr	r0, [pc, #480]	@ (8001274 <main+0x570>)
 8001092:	f003 fc4d 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedBlue, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	4877      	ldr	r0, [pc, #476]	@ (8001278 <main+0x574>)
 800109a:	f003 fc49 	bl	8004930 <gpio_WritePin>
				adc_ConfigSingleChannel(&fotoresistencia);
 800109e:	487a      	ldr	r0, [pc, #488]	@ (8001288 <main+0x584>)
 80010a0:	f001 f86c 	bl	800217c <adc_ConfigSingleChannel>

				if(flag_adc & flag_adc_conversion){
 80010a4:	4b79      	ldr	r3, [pc, #484]	@ (800128c <main+0x588>)
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	4b79      	ldr	r3, [pc, #484]	@ (8001290 <main+0x58c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4013      	ands	r3, r2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <main+0x3c2>
					datoFotoresistencia = adcData;
 80010b4:	4b77      	ldr	r3, [pc, #476]	@ (8001294 <main+0x590>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	4b77      	ldr	r3, [pc, #476]	@ (8001298 <main+0x594>)
 80010ba:	801a      	strh	r2, [r3, #0]
					adc_StartSingleConv();
 80010bc:	f001 ff8a 	bl	8002fd4 <adc_StartSingleConv>
					flag_adc = 0;
 80010c0:	4b72      	ldr	r3, [pc, #456]	@ (800128c <main+0x588>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
				}

				if(subdivisiones < 6){
 80010c6:	4b75      	ldr	r3, [pc, #468]	@ (800129c <main+0x598>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d80e      	bhi.n	80010ec <main+0x3e8>
					promedio += datoFotoresistencia;
 80010ce:	4b74      	ldr	r3, [pc, #464]	@ (80012a0 <main+0x59c>)
 80010d0:	881a      	ldrh	r2, [r3, #0]
 80010d2:	4b71      	ldr	r3, [pc, #452]	@ (8001298 <main+0x594>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b71      	ldr	r3, [pc, #452]	@ (80012a0 <main+0x59c>)
 80010dc:	801a      	strh	r2, [r3, #0]
					subdivisiones ++;
 80010de:	4b6f      	ldr	r3, [pc, #444]	@ (800129c <main+0x598>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <main+0x598>)
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e00e      	b.n	800110a <main+0x406>
				}else{
					siete_segmentos = promedio / 5;
 80010ec:	4b6c      	ldr	r3, [pc, #432]	@ (80012a0 <main+0x59c>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4a6c      	ldr	r2, [pc, #432]	@ (80012a4 <main+0x5a0>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <main+0x578>)
 80010fc:	801a      	strh	r2, [r3, #0]
					subdivisiones = 0;
 80010fe:	4b67      	ldr	r3, [pc, #412]	@ (800129c <main+0x598>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
					promedio = 0;
 8001104:	4b66      	ldr	r3, [pc, #408]	@ (80012a0 <main+0x59c>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
				}

				separador_numero(siete_segmentos);
 800110a:	4b5c      	ldr	r3, [pc, #368]	@ (800127c <main+0x578>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fe0c 	bl	8001d2c <separador_numero>

				if (display_flag){
 8001114:	4b5a      	ldr	r3, [pc, #360]	@ (8001280 <main+0x57c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d03f      	beq.n	800119c <main+0x498>
					switch(caso_transistor){
 800111c:	4b59      	ldr	r3, [pc, #356]	@ (8001284 <main+0x580>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d838      	bhi.n	8001196 <main+0x492>
 8001124:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <main+0x428>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	0800113d 	.word	0x0800113d
 8001130:	08001155 	.word	0x08001155
 8001134:	0800116d 	.word	0x0800116d
 8001138:	08001185 	.word	0x08001185
						case 0:{
							switcheo_transistor(caso_transistor);
 800113c:	4b51      	ldr	r3, [pc, #324]	@ (8001284 <main+0x580>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fd73 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8001146:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <main+0x580>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <main+0x580>)
 8001150:	701a      	strb	r2, [r3, #0]
							break;
 8001152:	e020      	b.n	8001196 <main+0x492>
						}
						case 1:{
							switcheo_transistor(caso_transistor);
 8001154:	4b4b      	ldr	r3, [pc, #300]	@ (8001284 <main+0x580>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd67 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 800115e:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <main+0x580>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b47      	ldr	r3, [pc, #284]	@ (8001284 <main+0x580>)
 8001168:	701a      	strb	r2, [r3, #0]
							break;
 800116a:	e014      	b.n	8001196 <main+0x492>
						}
						case 2:{
							switcheo_transistor(caso_transistor);
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <main+0x580>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd5b 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8001176:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <main+0x580>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <main+0x580>)
 8001180:	701a      	strb	r2, [r3, #0]
							break;
 8001182:	e008      	b.n	8001196 <main+0x492>
						}
						case 3:{
							switcheo_transistor(caso_transistor);
 8001184:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <main+0x580>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fd4f 	bl	8001c2c <switcheo_transistor>
							caso_transistor = 0;
 800118e:	4b3d      	ldr	r3, [pc, #244]	@ (8001284 <main+0x580>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
							break;
 8001194:	bf00      	nop
						}

					}


					display_flag = 0;
 8001196:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <main+0x57c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
				}

			if (sendMsg){
 800119c:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <main+0x5a4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8152 	beq.w	800144a <main+0x746>
				sprintf (bufferMsg, "modo 3 \n%d\n",datoFotoresistencia);
 80011a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001298 <main+0x594>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	493f      	ldr	r1, [pc, #252]	@ (80012ac <main+0x5a8>)
 80011ae:	4840      	ldr	r0, [pc, #256]	@ (80012b0 <main+0x5ac>)
 80011b0:	f005 f892 	bl	80062d8 <siprintf>
				usart_writeMsg (&usart2, bufferMsg);
 80011b4:	493e      	ldr	r1, [pc, #248]	@ (80012b0 <main+0x5ac>)
 80011b6:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <main+0x5b0>)
 80011b8:	f004 f8ed 	bl	8005396 <usart_writeMsg>
				sendMsg = 0;
 80011bc:	4b3a      	ldr	r3, [pc, #232]	@ (80012a8 <main+0x5a4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80011c2:	e142      	b.n	800144a <main+0x746>

			}
			//al principio creamos la funcion de contador para que cuando llegue a 4096 se reinicie.
			case modo_4:{
				if(flag_conteo){
 80011c4:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <main+0x5b4>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d010      	beq.n	80011ee <main+0x4ea>
					contador ++;
 80011cc:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <main+0x5b8>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b39      	ldr	r3, [pc, #228]	@ (80012bc <main+0x5b8>)
 80011d6:	801a      	strh	r2, [r3, #0]
					if(contador == 4096){
 80011d8:	4b38      	ldr	r3, [pc, #224]	@ (80012bc <main+0x5b8>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011e0:	d102      	bne.n	80011e8 <main+0x4e4>
						contador = 0;
 80011e2:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <main+0x5b8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	801a      	strh	r2, [r3, #0]
					}
					//bajamos la bandera para que no siga contando mientras no estamos en este modo.
					flag_conteo = 0;
 80011e8:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <main+0x5b4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
				}
				gpio_WritePin(&LedRed, 1);
 80011ee:	2101      	movs	r1, #1
 80011f0:	481f      	ldr	r0, [pc, #124]	@ (8001270 <main+0x56c>)
 80011f2:	f003 fb9d 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedGreen, 1);
 80011f6:	2101      	movs	r1, #1
 80011f8:	481e      	ldr	r0, [pc, #120]	@ (8001274 <main+0x570>)
 80011fa:	f003 fb99 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedBlue, 0);
 80011fe:	2100      	movs	r1, #0
 8001200:	481d      	ldr	r0, [pc, #116]	@ (8001278 <main+0x574>)
 8001202:	f003 fb95 	bl	8004930 <gpio_WritePin>
				//recordar, siete segmentos muestra la variable contador.
				siete_segmentos = contador;
 8001206:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <main+0x5b8>)
 8001208:	881a      	ldrh	r2, [r3, #0]
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <main+0x578>)
 800120c:	801a      	strh	r2, [r3, #0]
				separador_numero(siete_segmentos);
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <main+0x578>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fd8a 	bl	8001d2c <separador_numero>

				if (display_flag){
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <main+0x57c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d067      	beq.n	80012f0 <main+0x5ec>
					switch(caso_transistor){
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <main+0x580>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d860      	bhi.n	80012ea <main+0x5e6>
 8001228:	a201      	add	r2, pc, #4	@ (adr r2, 8001230 <main+0x52c>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	08001241 	.word	0x08001241
 8001234:	08001259 	.word	0x08001259
 8001238:	080012c1 	.word	0x080012c1
 800123c:	080012d9 	.word	0x080012d9
						case 0:{
							switcheo_transistor(caso_transistor);
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <main+0x580>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fcf1 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <main+0x580>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <main+0x580>)
 8001254:	701a      	strb	r2, [r3, #0]
							break;
 8001256:	e048      	b.n	80012ea <main+0x5e6>
						}
						case 1:{
							switcheo_transistor(caso_transistor);
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <main+0x580>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fce5 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <main+0x580>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <main+0x580>)
 800126c:	701a      	strb	r2, [r3, #0]
							break;
 800126e:	e03c      	b.n	80012ea <main+0x5e6>
 8001270:	20000298 	.word	0x20000298
 8001274:	200002a4 	.word	0x200002a4
 8001278:	200002b0 	.word	0x200002b0
 800127c:	2000025e 	.word	0x2000025e
 8001280:	20000458 	.word	0x20000458
 8001284:	20000244 	.word	0x20000244
 8001288:	20000300 	.word	0x20000300
 800128c:	20000247 	.word	0x20000247
 8001290:	2000024e 	.word	0x2000024e
 8001294:	20000248 	.word	0x20000248
 8001298:	2000024c 	.word	0x2000024c
 800129c:	2000025c 	.word	0x2000025c
 80012a0:	2000025a 	.word	0x2000025a
 80012a4:	cccccccd 	.word	0xcccccccd
 80012a8:	2000024f 	.word	0x2000024f
 80012ac:	08009b5c 	.word	0x08009b5c
 80012b0:	20000318 	.word	0x20000318
 80012b4:	200003c8 	.word	0x200003c8
 80012b8:	20000253 	.word	0x20000253
 80012bc:	20000250 	.word	0x20000250
						}
						case 2:{
							switcheo_transistor(caso_transistor);
 80012c0:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <main+0x754>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fcb1 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 80012ca:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <main+0x754>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b61      	ldr	r3, [pc, #388]	@ (8001458 <main+0x754>)
 80012d4:	701a      	strb	r2, [r3, #0]
							break;
 80012d6:	e008      	b.n	80012ea <main+0x5e6>
						}
						case 3:{
							switcheo_transistor(caso_transistor);
 80012d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <main+0x754>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fca5 	bl	8001c2c <switcheo_transistor>
							caso_transistor = 0;
 80012e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001458 <main+0x754>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
							break;
 80012e8:	bf00      	nop
						}

					}


					display_flag = 0;
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <main+0x758>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
				}
				//mensaje a traves del canal de USART, nada nuevo que no se haya hecho en los modos anteriores.
			if (sendMsg){
 80012f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001460 <main+0x75c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80aa 	beq.w	800144e <main+0x74a>
				sprintf (bufferMsg, "modo 4\n%d\n",contador);
 80012fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001464 <main+0x760>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4959      	ldr	r1, [pc, #356]	@ (8001468 <main+0x764>)
 8001302:	485a      	ldr	r0, [pc, #360]	@ (800146c <main+0x768>)
 8001304:	f004 ffe8 	bl	80062d8 <siprintf>
				usart_writeMsg (&usart2, bufferMsg);
 8001308:	4958      	ldr	r1, [pc, #352]	@ (800146c <main+0x768>)
 800130a:	4859      	ldr	r0, [pc, #356]	@ (8001470 <main+0x76c>)
 800130c:	f004 f843 	bl	8005396 <usart_writeMsg>
				sendMsg = 0;
 8001310:	4b53      	ldr	r3, [pc, #332]	@ (8001460 <main+0x75c>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
			}

				break;
 8001316:	e09a      	b.n	800144e <main+0x74a>
			}
			case modo_5:{



				gpio_WritePin(&LedRed, 1);
 8001318:	2101      	movs	r1, #1
 800131a:	4856      	ldr	r0, [pc, #344]	@ (8001474 <main+0x770>)
 800131c:	f003 fb08 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedGreen, 1);
 8001320:	2101      	movs	r1, #1
 8001322:	4855      	ldr	r0, [pc, #340]	@ (8001478 <main+0x774>)
 8001324:	f003 fb04 	bl	8004930 <gpio_WritePin>
				gpio_WritePin(&LedBlue, 1);
 8001328:	2101      	movs	r1, #1
 800132a:	4854      	ldr	r0, [pc, #336]	@ (800147c <main+0x778>)
 800132c:	f003 fb00 	bl	8004930 <gpio_WritePin>
				//usamos la bandera para el exti-Encoder. Usamos if para que en el sentido de las manecillas del reloj sume y viceversa en el contador exti.
				if(flag_clock){
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <main+0x77c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <main+0x67c>
					if(exti_Data){
 8001338:	4b52      	ldr	r3, [pc, #328]	@ (8001484 <main+0x780>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00e      	beq.n	800135e <main+0x65a>
						if(exti_conteo == 0){
 8001340:	4b51      	ldr	r3, [pc, #324]	@ (8001488 <main+0x784>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <main+0x64c>
							exti_conteo = 4096;
 8001348:	4b4f      	ldr	r3, [pc, #316]	@ (8001488 <main+0x784>)
 800134a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800134e:	801a      	strh	r2, [r3, #0]
						}
						exti_conteo--;
 8001350:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <main+0x784>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b4b      	ldr	r3, [pc, #300]	@ (8001488 <main+0x784>)
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	e00d      	b.n	800137a <main+0x676>
					}
					//se hicieorn correctamente los reinicios tanto si pasamos de 4095 a como si nos devolvemos desde 0.
					else{
						exti_conteo ++;
 800135e:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <main+0x784>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b48      	ldr	r3, [pc, #288]	@ (8001488 <main+0x784>)
 8001368:	801a      	strh	r2, [r3, #0]
						if(exti_conteo == 4096){
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <main+0x784>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001372:	d102      	bne.n	800137a <main+0x676>
							exti_conteo = 0;
 8001374:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <main+0x784>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
							}
					}
					//bajamos bandera para que deje de contar.
					flag_clock = 0;
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <main+0x77c>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
				}



				siete_segmentos = exti_conteo;
 8001380:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <main+0x784>)
 8001382:	881a      	ldrh	r2, [r3, #0]
 8001384:	4b41      	ldr	r3, [pc, #260]	@ (800148c <main+0x788>)
 8001386:	801a      	strh	r2, [r3, #0]
				separador_numero(siete_segmentos);
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <main+0x788>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fccd 	bl	8001d2c <separador_numero>

				if (display_flag){
 8001392:	4b32      	ldr	r3, [pc, #200]	@ (800145c <main+0x758>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03e      	beq.n	8001418 <main+0x714>
					switch(caso_transistor){
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <main+0x754>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d837      	bhi.n	8001412 <main+0x70e>
 80013a2:	a201      	add	r2, pc, #4	@ (adr r2, 80013a8 <main+0x6a4>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013b9 	.word	0x080013b9
 80013ac:	080013d1 	.word	0x080013d1
 80013b0:	080013e9 	.word	0x080013e9
 80013b4:	08001401 	.word	0x08001401
						case 0:{
							switcheo_transistor(caso_transistor);
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <main+0x754>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fc35 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 80013c2:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <main+0x754>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <main+0x754>)
 80013cc:	701a      	strb	r2, [r3, #0]
							break;
 80013ce:	e020      	b.n	8001412 <main+0x70e>
						}
						case 1:{
							switcheo_transistor(caso_transistor);
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <main+0x754>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fc29 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <main+0x754>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <main+0x754>)
 80013e4:	701a      	strb	r2, [r3, #0]
							break;
 80013e6:	e014      	b.n	8001412 <main+0x70e>
						}
						case 2:{
							switcheo_transistor(caso_transistor);
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <main+0x754>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fc1d 	bl	8001c2c <switcheo_transistor>
							caso_transistor ++;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <main+0x754>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <main+0x754>)
 80013fc:	701a      	strb	r2, [r3, #0]
							break;
 80013fe:	e008      	b.n	8001412 <main+0x70e>
						}
						case 3:{
							switcheo_transistor(caso_transistor);
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <main+0x754>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fc11 	bl	8001c2c <switcheo_transistor>
							caso_transistor = 0;
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <main+0x754>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
							break;
 8001410:	bf00      	nop
						}

					}


					display_flag = 0;
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <main+0x758>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
				}

				if (sendMsg){
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <main+0x75c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d018      	beq.n	8001452 <main+0x74e>
					sprintf (bufferMsg, "modo 5\n%d\n",exti_conteo);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <main+0x784>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	491a      	ldr	r1, [pc, #104]	@ (8001490 <main+0x78c>)
 8001428:	4810      	ldr	r0, [pc, #64]	@ (800146c <main+0x768>)
 800142a:	f004 ff55 	bl	80062d8 <siprintf>
					usart_writeMsg (&usart2, bufferMsg);
 800142e:	490f      	ldr	r1, [pc, #60]	@ (800146c <main+0x768>)
 8001430:	480f      	ldr	r0, [pc, #60]	@ (8001470 <main+0x76c>)
 8001432:	f003 ffb0 	bl	8005396 <usart_writeMsg>
					sendMsg = 0;
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <main+0x75c>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800143c:	e009      	b.n	8001452 <main+0x74e>
				break;
 800143e:	bf00      	nop
 8001440:	e464      	b.n	8000d0c <main+0x8>
				break;
 8001442:	bf00      	nop
 8001444:	e462      	b.n	8000d0c <main+0x8>
				break;
 8001446:	bf00      	nop
 8001448:	e460      	b.n	8000d0c <main+0x8>
			break;
 800144a:	bf00      	nop
 800144c:	e45e      	b.n	8000d0c <main+0x8>
				break;
 800144e:	bf00      	nop
 8001450:	e45c      	b.n	8000d0c <main+0x8>
				break;
 8001452:	bf00      	nop
 8001454:	e45a      	b.n	8000d0c <main+0x8>
 8001456:	bf00      	nop
 8001458:	20000244 	.word	0x20000244
 800145c:	20000458 	.word	0x20000458
 8001460:	2000024f 	.word	0x2000024f
 8001464:	20000250 	.word	0x20000250
 8001468:	08009b68 	.word	0x08009b68
 800146c:	20000318 	.word	0x20000318
 8001470:	200003c8 	.word	0x200003c8
 8001474:	20000298 	.word	0x20000298
 8001478:	200002a4 	.word	0x200002a4
 800147c:	200002b0 	.word	0x200002b0
 8001480:	20000255 	.word	0x20000255
 8001484:	20000254 	.word	0x20000254
 8001488:	20000256 	.word	0x20000256
 800148c:	2000025e 	.word	0x2000025e
 8001490:	08009b74 	.word	0x08009b74

08001494 <init_system>:
		}

	}
}

void init_system(void){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	/*	Configuramos el pin*/
	userLed.pGPIOx 							= 	GPIOA;
 8001498:	4bb0      	ldr	r3, [pc, #704]	@ (800175c <init_system+0x2c8>)
 800149a:	4ab1      	ldr	r2, [pc, #708]	@ (8001760 <init_system+0x2cc>)
 800149c:	601a      	str	r2, [r3, #0]
	userLed.pinConfig.GPIO_PinNumber		=	PIN_5;
 800149e:	4baf      	ldr	r3, [pc, #700]	@ (800175c <init_system+0x2c8>)
 80014a0:	2205      	movs	r2, #5
 80014a2:	711a      	strb	r2, [r3, #4]
	userLed.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80014a4:	4bad      	ldr	r3, [pc, #692]	@ (800175c <init_system+0x2c8>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	715a      	strb	r2, [r3, #5]
	userLed.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80014aa:	4bac      	ldr	r3, [pc, #688]	@ (800175c <init_system+0x2c8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	721a      	strb	r2, [r3, #8]
	userLed.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 80014b0:	4baa      	ldr	r3, [pc, #680]	@ (800175c <init_system+0x2c8>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	719a      	strb	r2, [r3, #6]
	userLed.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80014b6:	4ba9      	ldr	r3, [pc, #676]	@ (800175c <init_system+0x2c8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	71da      	strb	r2, [r3, #7]

	/* Cargamos la configuracion de los registros que gobiernan el puerto */
	gpio_Config(&userLed);
 80014bc:	48a7      	ldr	r0, [pc, #668]	@ (800175c <init_system+0x2c8>)
 80014be:	f003 f8c3 	bl	8004648 <gpio_Config>

	gpio_WritePin(&userLed, SET);
 80014c2:	2101      	movs	r1, #1
 80014c4:	48a5      	ldr	r0, [pc, #660]	@ (800175c <init_system+0x2c8>)
 80014c6:	f003 fa33 	bl	8004930 <gpio_WritePin>
	 * y encienden estos "leds" enumerados alfabeticamente. El 7segmentos tambien puede verse como un pin muy grande con
	 * varias conexiones.
	 */

	/*	LedA	*/
	LedA.pGPIOx 						= 	GPIOC;
 80014ca:	4ba6      	ldr	r3, [pc, #664]	@ (8001764 <init_system+0x2d0>)
 80014cc:	4aa6      	ldr	r2, [pc, #664]	@ (8001768 <init_system+0x2d4>)
 80014ce:	601a      	str	r2, [r3, #0]
	LedA.pinConfig.GPIO_PinNumber		=	PIN_8;
 80014d0:	4ba4      	ldr	r3, [pc, #656]	@ (8001764 <init_system+0x2d0>)
 80014d2:	2208      	movs	r2, #8
 80014d4:	711a      	strb	r2, [r3, #4]
	LedA.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80014d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001764 <init_system+0x2d0>)
 80014d8:	2201      	movs	r2, #1
 80014da:	715a      	strb	r2, [r3, #5]
	LedA.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80014dc:	4ba1      	ldr	r3, [pc, #644]	@ (8001764 <init_system+0x2d0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	721a      	strb	r2, [r3, #8]
	LedA.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 80014e2:	4ba0      	ldr	r3, [pc, #640]	@ (8001764 <init_system+0x2d0>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	719a      	strb	r2, [r3, #6]
	LedA.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80014e8:	4b9e      	ldr	r3, [pc, #632]	@ (8001764 <init_system+0x2d0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedA);
 80014ee:	489d      	ldr	r0, [pc, #628]	@ (8001764 <init_system+0x2d0>)
 80014f0:	f003 f8aa 	bl	8004648 <gpio_Config>


	/*	LedB	*/
	LedB.pGPIOx 						= 	GPIOB;
 80014f4:	4b9d      	ldr	r3, [pc, #628]	@ (800176c <init_system+0x2d8>)
 80014f6:	4a9e      	ldr	r2, [pc, #632]	@ (8001770 <init_system+0x2dc>)
 80014f8:	601a      	str	r2, [r3, #0]
	LedB.pinConfig.GPIO_PinNumber		=	PIN_8;
 80014fa:	4b9c      	ldr	r3, [pc, #624]	@ (800176c <init_system+0x2d8>)
 80014fc:	2208      	movs	r2, #8
 80014fe:	711a      	strb	r2, [r3, #4]
	LedB.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 8001500:	4b9a      	ldr	r3, [pc, #616]	@ (800176c <init_system+0x2d8>)
 8001502:	2201      	movs	r2, #1
 8001504:	715a      	strb	r2, [r3, #5]
	LedB.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 8001506:	4b99      	ldr	r3, [pc, #612]	@ (800176c <init_system+0x2d8>)
 8001508:	2200      	movs	r2, #0
 800150a:	721a      	strb	r2, [r3, #8]
	LedB.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 800150c:	4b97      	ldr	r3, [pc, #604]	@ (800176c <init_system+0x2d8>)
 800150e:	2201      	movs	r2, #1
 8001510:	719a      	strb	r2, [r3, #6]
	LedB.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 8001512:	4b96      	ldr	r3, [pc, #600]	@ (800176c <init_system+0x2d8>)
 8001514:	2200      	movs	r2, #0
 8001516:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedB);
 8001518:	4894      	ldr	r0, [pc, #592]	@ (800176c <init_system+0x2d8>)
 800151a:	f003 f895 	bl	8004648 <gpio_Config>

	/*	LedC*/
	LedC.pGPIOx 						= 	GPIOD;
 800151e:	4b95      	ldr	r3, [pc, #596]	@ (8001774 <init_system+0x2e0>)
 8001520:	4a95      	ldr	r2, [pc, #596]	@ (8001778 <init_system+0x2e4>)
 8001522:	601a      	str	r2, [r3, #0]
	LedC.pinConfig.GPIO_PinNumber		=	PIN_2;
 8001524:	4b93      	ldr	r3, [pc, #588]	@ (8001774 <init_system+0x2e0>)
 8001526:	2202      	movs	r2, #2
 8001528:	711a      	strb	r2, [r3, #4]
	LedC.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 800152a:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <init_system+0x2e0>)
 800152c:	2201      	movs	r2, #1
 800152e:	715a      	strb	r2, [r3, #5]
	LedC.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 8001530:	4b90      	ldr	r3, [pc, #576]	@ (8001774 <init_system+0x2e0>)
 8001532:	2200      	movs	r2, #0
 8001534:	721a      	strb	r2, [r3, #8]
	LedC.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 8001536:	4b8f      	ldr	r3, [pc, #572]	@ (8001774 <init_system+0x2e0>)
 8001538:	2201      	movs	r2, #1
 800153a:	719a      	strb	r2, [r3, #6]
	LedC.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 800153c:	4b8d      	ldr	r3, [pc, #564]	@ (8001774 <init_system+0x2e0>)
 800153e:	2200      	movs	r2, #0
 8001540:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedC);
 8001542:	488c      	ldr	r0, [pc, #560]	@ (8001774 <init_system+0x2e0>)
 8001544:	f003 f880 	bl	8004648 <gpio_Config>

	/*	LedD*/
	LedD.pGPIOx 						= 	GPIOC;
 8001548:	4b8c      	ldr	r3, [pc, #560]	@ (800177c <init_system+0x2e8>)
 800154a:	4a87      	ldr	r2, [pc, #540]	@ (8001768 <init_system+0x2d4>)
 800154c:	601a      	str	r2, [r3, #0]
	LedD.pinConfig.GPIO_PinNumber		=	PIN_10;
 800154e:	4b8b      	ldr	r3, [pc, #556]	@ (800177c <init_system+0x2e8>)
 8001550:	220a      	movs	r2, #10
 8001552:	711a      	strb	r2, [r3, #4]
	LedD.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 8001554:	4b89      	ldr	r3, [pc, #548]	@ (800177c <init_system+0x2e8>)
 8001556:	2201      	movs	r2, #1
 8001558:	715a      	strb	r2, [r3, #5]
	LedD.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 800155a:	4b88      	ldr	r3, [pc, #544]	@ (800177c <init_system+0x2e8>)
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
	LedD.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 8001560:	4b86      	ldr	r3, [pc, #536]	@ (800177c <init_system+0x2e8>)
 8001562:	2201      	movs	r2, #1
 8001564:	719a      	strb	r2, [r3, #6]
	LedD.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 8001566:	4b85      	ldr	r3, [pc, #532]	@ (800177c <init_system+0x2e8>)
 8001568:	2200      	movs	r2, #0
 800156a:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedD);
 800156c:	4883      	ldr	r0, [pc, #524]	@ (800177c <init_system+0x2e8>)
 800156e:	f003 f86b 	bl	8004648 <gpio_Config>

	/*	LedE*/
	LedE.pGPIOx 						= 	GPIOC;
 8001572:	4b83      	ldr	r3, [pc, #524]	@ (8001780 <init_system+0x2ec>)
 8001574:	4a7c      	ldr	r2, [pc, #496]	@ (8001768 <init_system+0x2d4>)
 8001576:	601a      	str	r2, [r3, #0]
	LedE.pinConfig.GPIO_PinNumber		=	PIN_11;
 8001578:	4b81      	ldr	r3, [pc, #516]	@ (8001780 <init_system+0x2ec>)
 800157a:	220b      	movs	r2, #11
 800157c:	711a      	strb	r2, [r3, #4]
	LedE.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 800157e:	4b80      	ldr	r3, [pc, #512]	@ (8001780 <init_system+0x2ec>)
 8001580:	2201      	movs	r2, #1
 8001582:	715a      	strb	r2, [r3, #5]
	LedE.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 8001584:	4b7e      	ldr	r3, [pc, #504]	@ (8001780 <init_system+0x2ec>)
 8001586:	2200      	movs	r2, #0
 8001588:	721a      	strb	r2, [r3, #8]
	LedE.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 800158a:	4b7d      	ldr	r3, [pc, #500]	@ (8001780 <init_system+0x2ec>)
 800158c:	2201      	movs	r2, #1
 800158e:	719a      	strb	r2, [r3, #6]
	LedE.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 8001590:	4b7b      	ldr	r3, [pc, #492]	@ (8001780 <init_system+0x2ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedE);
 8001596:	487a      	ldr	r0, [pc, #488]	@ (8001780 <init_system+0x2ec>)
 8001598:	f003 f856 	bl	8004648 <gpio_Config>

	/*	LedF*/
	LedF.pGPIOx 						= 	GPIOC;
 800159c:	4b79      	ldr	r3, [pc, #484]	@ (8001784 <init_system+0x2f0>)
 800159e:	4a72      	ldr	r2, [pc, #456]	@ (8001768 <init_system+0x2d4>)
 80015a0:	601a      	str	r2, [r3, #0]
	LedF.pinConfig.GPIO_PinNumber		=	PIN_9;
 80015a2:	4b78      	ldr	r3, [pc, #480]	@ (8001784 <init_system+0x2f0>)
 80015a4:	2209      	movs	r2, #9
 80015a6:	711a      	strb	r2, [r3, #4]
	LedF.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80015a8:	4b76      	ldr	r3, [pc, #472]	@ (8001784 <init_system+0x2f0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	715a      	strb	r2, [r3, #5]
	LedF.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80015ae:	4b75      	ldr	r3, [pc, #468]	@ (8001784 <init_system+0x2f0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	721a      	strb	r2, [r3, #8]
	LedF.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 80015b4:	4b73      	ldr	r3, [pc, #460]	@ (8001784 <init_system+0x2f0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	719a      	strb	r2, [r3, #6]
	LedF.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80015ba:	4b72      	ldr	r3, [pc, #456]	@ (8001784 <init_system+0x2f0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedF);
 80015c0:	4870      	ldr	r0, [pc, #448]	@ (8001784 <init_system+0x2f0>)
 80015c2:	f003 f841 	bl	8004648 <gpio_Config>

	/*	LedG*/
	LedG.pGPIOx 						= 	GPIOC;
 80015c6:	4b70      	ldr	r3, [pc, #448]	@ (8001788 <init_system+0x2f4>)
 80015c8:	4a67      	ldr	r2, [pc, #412]	@ (8001768 <init_system+0x2d4>)
 80015ca:	601a      	str	r2, [r3, #0]
	LedG.pinConfig.GPIO_PinNumber		=	PIN_12;
 80015cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001788 <init_system+0x2f4>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	711a      	strb	r2, [r3, #4]
	LedG.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80015d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001788 <init_system+0x2f4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	715a      	strb	r2, [r3, #5]
	LedG.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80015d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001788 <init_system+0x2f4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	721a      	strb	r2, [r3, #8]
	LedG.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 80015de:	4b6a      	ldr	r3, [pc, #424]	@ (8001788 <init_system+0x2f4>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	719a      	strb	r2, [r3, #6]
	LedG.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80015e4:	4b68      	ldr	r3, [pc, #416]	@ (8001788 <init_system+0x2f4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedG);
 80015ea:	4867      	ldr	r0, [pc, #412]	@ (8001788 <init_system+0x2f4>)
 80015ec:	f003 f82c 	bl	8004648 <gpio_Config>

	//la variable switcheo se convirtio en switcheoD (derecho) y switcheoI (izquierdo), ya que cambiamos la configuracion de los transistores, ya no estan mas en base comun.

	/*	switcheoUnidades */
	switcheoUnidades.pGPIOx 						= 	GPIOB;
 80015f0:	4b66      	ldr	r3, [pc, #408]	@ (800178c <init_system+0x2f8>)
 80015f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001770 <init_system+0x2dc>)
 80015f4:	601a      	str	r2, [r3, #0]
	switcheoUnidades.pinConfig.GPIO_PinNumber		=	PIN_7;
 80015f6:	4b65      	ldr	r3, [pc, #404]	@ (800178c <init_system+0x2f8>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	711a      	strb	r2, [r3, #4]
	switcheoUnidades.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80015fc:	4b63      	ldr	r3, [pc, #396]	@ (800178c <init_system+0x2f8>)
 80015fe:	2201      	movs	r2, #1
 8001600:	715a      	strb	r2, [r3, #5]
	switcheoUnidades.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 8001602:	4b62      	ldr	r3, [pc, #392]	@ (800178c <init_system+0x2f8>)
 8001604:	2200      	movs	r2, #0
 8001606:	721a      	strb	r2, [r3, #8]
	switcheoUnidades.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 8001608:	4b60      	ldr	r3, [pc, #384]	@ (800178c <init_system+0x2f8>)
 800160a:	2202      	movs	r2, #2
 800160c:	719a      	strb	r2, [r3, #6]
	switcheoUnidades.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 800160e:	4b5f      	ldr	r3, [pc, #380]	@ (800178c <init_system+0x2f8>)
 8001610:	2200      	movs	r2, #0
 8001612:	71da      	strb	r2, [r3, #7]

	gpio_Config(&switcheoUnidades);
 8001614:	485d      	ldr	r0, [pc, #372]	@ (800178c <init_system+0x2f8>)
 8001616:	f003 f817 	bl	8004648 <gpio_Config>

	/*	switcheoDecenas */
	switcheoDecenas.pGPIOx 							= 	GPIOC;
 800161a:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <init_system+0x2fc>)
 800161c:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <init_system+0x2d4>)
 800161e:	601a      	str	r2, [r3, #0]
	switcheoDecenas.pinConfig.GPIO_PinNumber		=	PIN_13;
 8001620:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <init_system+0x2fc>)
 8001622:	220d      	movs	r2, #13
 8001624:	711a      	strb	r2, [r3, #4]
	switcheoDecenas.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 8001626:	4b5a      	ldr	r3, [pc, #360]	@ (8001790 <init_system+0x2fc>)
 8001628:	2201      	movs	r2, #1
 800162a:	715a      	strb	r2, [r3, #5]
	switcheoDecenas.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 800162c:	4b58      	ldr	r3, [pc, #352]	@ (8001790 <init_system+0x2fc>)
 800162e:	2200      	movs	r2, #0
 8001630:	721a      	strb	r2, [r3, #8]
	switcheoDecenas.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 8001632:	4b57      	ldr	r3, [pc, #348]	@ (8001790 <init_system+0x2fc>)
 8001634:	2202      	movs	r2, #2
 8001636:	719a      	strb	r2, [r3, #6]
	switcheoDecenas.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 8001638:	4b55      	ldr	r3, [pc, #340]	@ (8001790 <init_system+0x2fc>)
 800163a:	2200      	movs	r2, #0
 800163c:	71da      	strb	r2, [r3, #7]

	gpio_Config(&switcheoDecenas);
 800163e:	4854      	ldr	r0, [pc, #336]	@ (8001790 <init_system+0x2fc>)
 8001640:	f003 f802 	bl	8004648 <gpio_Config>

	/*	switcheoCentenas */
	switcheoCentenas.pGPIOx 						= 	GPIOA;
 8001644:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <init_system+0x300>)
 8001646:	4a46      	ldr	r2, [pc, #280]	@ (8001760 <init_system+0x2cc>)
 8001648:	601a      	str	r2, [r3, #0]
	switcheoCentenas.pinConfig.GPIO_PinNumber		=	PIN_9;
 800164a:	4b52      	ldr	r3, [pc, #328]	@ (8001794 <init_system+0x300>)
 800164c:	2209      	movs	r2, #9
 800164e:	711a      	strb	r2, [r3, #4]
	switcheoCentenas.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 8001650:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <init_system+0x300>)
 8001652:	2201      	movs	r2, #1
 8001654:	715a      	strb	r2, [r3, #5]
	switcheoCentenas.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 8001656:	4b4f      	ldr	r3, [pc, #316]	@ (8001794 <init_system+0x300>)
 8001658:	2200      	movs	r2, #0
 800165a:	721a      	strb	r2, [r3, #8]
	switcheoCentenas.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 800165c:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <init_system+0x300>)
 800165e:	2202      	movs	r2, #2
 8001660:	719a      	strb	r2, [r3, #6]
	switcheoCentenas.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 8001662:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <init_system+0x300>)
 8001664:	2200      	movs	r2, #0
 8001666:	71da      	strb	r2, [r3, #7]

	gpio_Config(&switcheoCentenas);
 8001668:	484a      	ldr	r0, [pc, #296]	@ (8001794 <init_system+0x300>)
 800166a:	f002 ffed 	bl	8004648 <gpio_Config>

	/*	switcheoMillares */
	switcheoMillares.pGPIOx 						= 	GPIOC;
 800166e:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <init_system+0x304>)
 8001670:	4a3d      	ldr	r2, [pc, #244]	@ (8001768 <init_system+0x2d4>)
 8001672:	601a      	str	r2, [r3, #0]
	switcheoMillares.pinConfig.GPIO_PinNumber		=	PIN_7;
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <init_system+0x304>)
 8001676:	2207      	movs	r2, #7
 8001678:	711a      	strb	r2, [r3, #4]
	switcheoMillares.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 800167a:	4b47      	ldr	r3, [pc, #284]	@ (8001798 <init_system+0x304>)
 800167c:	2201      	movs	r2, #1
 800167e:	715a      	strb	r2, [r3, #5]
	switcheoMillares.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 8001680:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <init_system+0x304>)
 8001682:	2200      	movs	r2, #0
 8001684:	721a      	strb	r2, [r3, #8]
	switcheoMillares.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 8001686:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <init_system+0x304>)
 8001688:	2202      	movs	r2, #2
 800168a:	719a      	strb	r2, [r3, #6]
	switcheoMillares.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <init_system+0x304>)
 800168e:	2200      	movs	r2, #0
 8001690:	71da      	strb	r2, [r3, #7]

	gpio_Config(&switcheoMillares);
 8001692:	4841      	ldr	r0, [pc, #260]	@ (8001798 <init_system+0x304>)
 8001694:	f002 ffd8 	bl	8004648 <gpio_Config>


	/*	LedRed*/
	LedRed.pGPIOx 							= 	GPIOC;
 8001698:	4b40      	ldr	r3, [pc, #256]	@ (800179c <init_system+0x308>)
 800169a:	4a33      	ldr	r2, [pc, #204]	@ (8001768 <init_system+0x2d4>)
 800169c:	601a      	str	r2, [r3, #0]
	LedRed.pinConfig.GPIO_PinNumber			=	PIN_5;
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <init_system+0x308>)
 80016a0:	2205      	movs	r2, #5
 80016a2:	711a      	strb	r2, [r3, #4]
	LedRed.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80016a4:	4b3d      	ldr	r3, [pc, #244]	@ (800179c <init_system+0x308>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	715a      	strb	r2, [r3, #5]
	LedRed.pinConfig.GPIO_PinOutputType		=	GPIO_OTYPE_PUSHPULL;
 80016aa:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <init_system+0x308>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	721a      	strb	r2, [r3, #8]
	LedRed.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 80016b0:	4b3a      	ldr	r3, [pc, #232]	@ (800179c <init_system+0x308>)
 80016b2:	2202      	movs	r2, #2
 80016b4:	719a      	strb	r2, [r3, #6]
	LedRed.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <init_system+0x308>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedRed);
 80016bc:	4837      	ldr	r0, [pc, #220]	@ (800179c <init_system+0x308>)
 80016be:	f002 ffc3 	bl	8004648 <gpio_Config>


	/*	LedBlue*/
	LedBlue.pGPIOx 							= 	GPIOC;
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <init_system+0x30c>)
 80016c4:	4a28      	ldr	r2, [pc, #160]	@ (8001768 <init_system+0x2d4>)
 80016c6:	601a      	str	r2, [r3, #0]
	LedBlue.pinConfig.GPIO_PinNumber		=	PIN_6;
 80016c8:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <init_system+0x30c>)
 80016ca:	2206      	movs	r2, #6
 80016cc:	711a      	strb	r2, [r3, #4]
	LedBlue.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <init_system+0x30c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	715a      	strb	r2, [r3, #5]
	LedBlue.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <init_system+0x30c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	721a      	strb	r2, [r3, #8]
	LedBlue.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <init_system+0x30c>)
 80016dc:	2202      	movs	r2, #2
 80016de:	719a      	strb	r2, [r3, #6]
	LedBlue.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <init_system+0x30c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedBlue);
 80016e6:	482e      	ldr	r0, [pc, #184]	@ (80017a0 <init_system+0x30c>)
 80016e8:	f002 ffae 	bl	8004648 <gpio_Config>

	/*	LedGreen*/
	LedGreen.pGPIOx 						= 	GPIOB;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <init_system+0x310>)
 80016ee:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <init_system+0x2dc>)
 80016f0:	601a      	str	r2, [r3, #0]
	LedGreen.pinConfig.GPIO_PinNumber		=	PIN_9;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <init_system+0x310>)
 80016f4:	2209      	movs	r2, #9
 80016f6:	711a      	strb	r2, [r3, #4]
	LedGreen.pinConfig.GPIO_PinMode			=	GPIO_MODE_OUT;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <init_system+0x310>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	715a      	strb	r2, [r3, #5]
	LedGreen.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80016fe:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <init_system+0x310>)
 8001700:	2200      	movs	r2, #0
 8001702:	721a      	strb	r2, [r3, #8]
	LedGreen.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_FAST;
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <init_system+0x310>)
 8001706:	2202      	movs	r2, #2
 8001708:	719a      	strb	r2, [r3, #6]
	LedGreen.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <init_system+0x310>)
 800170c:	2200      	movs	r2, #0
 800170e:	71da      	strb	r2, [r3, #7]

	gpio_Config(&LedGreen);
 8001710:	4824      	ldr	r0, [pc, #144]	@ (80017a4 <init_system+0x310>)
 8001712:	f002 ff99 	bl	8004648 <gpio_Config>

	//GPIOS del exti, recordar que se usan en modo input.

	/*	GPIO del pinSW */
	pinSW.pGPIOx 							= 	GPIOB;
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <init_system+0x314>)
 8001718:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <init_system+0x2dc>)
 800171a:	601a      	str	r2, [r3, #0]
	pinSW.pinConfig.GPIO_PinNumber			=	PIN_5;
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <init_system+0x314>)
 800171e:	2205      	movs	r2, #5
 8001720:	711a      	strb	r2, [r3, #4]
	pinSW.pinConfig.GPIO_PinMode			=	GPIO_MODE_IN;
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <init_system+0x314>)
 8001724:	2200      	movs	r2, #0
 8001726:	715a      	strb	r2, [r3, #5]

	gpio_Config(&pinSW);
 8001728:	481f      	ldr	r0, [pc, #124]	@ (80017a8 <init_system+0x314>)
 800172a:	f002 ff8d 	bl	8004648 <gpio_Config>

	extiSW.pGPIOHandler		=		&pinSW;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <init_system+0x318>)
 8001730:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <init_system+0x314>)
 8001732:	601a      	str	r2, [r3, #0]
	extiSW.edgeType			=		EXTERNAL_INTERRUPT_RISING_EDGE;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <init_system+0x318>)
 8001736:	2201      	movs	r2, #1
 8001738:	711a      	strb	r2, [r3, #4]

	exti_Config(&extiSW);
 800173a:	481c      	ldr	r0, [pc, #112]	@ (80017ac <init_system+0x318>)
 800173c:	f001 fdaa 	bl	8003294 <exti_Config>

	/*	GPIO del pinData. No necesita todas las configs de pinClock o pinSW. */
	pinData.pGPIOx 							= 	GPIOB;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <init_system+0x31c>)
 8001742:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <init_system+0x2dc>)
 8001744:	601a      	str	r2, [r3, #0]
	pinData.pinConfig.GPIO_PinNumber		=	PIN_3;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <init_system+0x31c>)
 8001748:	2203      	movs	r2, #3
 800174a:	711a      	strb	r2, [r3, #4]
	pinData.pinConfig.GPIO_PinMode			=	GPIO_MODE_IN;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <init_system+0x31c>)
 800174e:	2200      	movs	r2, #0
 8001750:	715a      	strb	r2, [r3, #5]

	gpio_Config(&pinData);
 8001752:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <init_system+0x31c>)
 8001754:	f002 ff78 	bl	8004648 <gpio_Config>
 8001758:	e02c      	b.n	80017b4 <init_system+0x320>
 800175a:	bf00      	nop
 800175c:	200001e4 	.word	0x200001e4
 8001760:	40020000 	.word	0x40020000
 8001764:	200001f0 	.word	0x200001f0
 8001768:	40020800 	.word	0x40020800
 800176c:	200001fc 	.word	0x200001fc
 8001770:	40020400 	.word	0x40020400
 8001774:	20000208 	.word	0x20000208
 8001778:	40020c00 	.word	0x40020c00
 800177c:	20000214 	.word	0x20000214
 8001780:	20000220 	.word	0x20000220
 8001784:	2000022c 	.word	0x2000022c
 8001788:	20000238 	.word	0x20000238
 800178c:	20000268 	.word	0x20000268
 8001790:	20000274 	.word	0x20000274
 8001794:	20000280 	.word	0x20000280
 8001798:	2000028c 	.word	0x2000028c
 800179c:	20000298 	.word	0x20000298
 80017a0:	200002b0 	.word	0x200002b0
 80017a4:	200002a4 	.word	0x200002a4
 80017a8:	200002bc 	.word	0x200002bc
 80017ac:	20000308 	.word	0x20000308
 80017b0:	200002c8 	.word	0x200002c8

	/*	GPIO del pinClock */
	pinClock.pGPIOx 						= 	GPIOB;
 80017b4:	4b64      	ldr	r3, [pc, #400]	@ (8001948 <init_system+0x4b4>)
 80017b6:	4a65      	ldr	r2, [pc, #404]	@ (800194c <init_system+0x4b8>)
 80017b8:	601a      	str	r2, [r3, #0]
	pinClock.pinConfig.GPIO_PinNumber		=	PIN_13;
 80017ba:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <init_system+0x4b4>)
 80017bc:	220d      	movs	r2, #13
 80017be:	711a      	strb	r2, [r3, #4]
	pinClock.pinConfig.GPIO_PinMode		=	GPIO_MODE_IN;
 80017c0:	4b61      	ldr	r3, [pc, #388]	@ (8001948 <init_system+0x4b4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	715a      	strb	r2, [r3, #5]

	gpio_Config(&pinClock);
 80017c6:	4860      	ldr	r0, [pc, #384]	@ (8001948 <init_system+0x4b4>)
 80017c8:	f002 ff3e 	bl	8004648 <gpio_Config>

	extiClock.pGPIOHandler		=		&pinClock;
 80017cc:	4b60      	ldr	r3, [pc, #384]	@ (8001950 <init_system+0x4bc>)
 80017ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001948 <init_system+0x4b4>)
 80017d0:	601a      	str	r2, [r3, #0]
	extiClock.edgeType			=		EXTERNAL_INTERRUPT_FALLING_EDGE;
 80017d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001950 <init_system+0x4bc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	711a      	strb	r2, [r3, #4]

	exti_Config(&extiClock);
 80017d8:	485d      	ldr	r0, [pc, #372]	@ (8001950 <init_system+0x4bc>)
 80017da:	f001 fd5b 	bl	8003294 <exti_Config>
	 * 1 ms. Este 1 ms se multiplica por el periodo, y lo elegimos segun lo que requiramos. Para el TIM2 pusimos 1000
	 * que 1ms * 1000, nos da 1000ms lo que es igual a 1 segundo, lo que completa nuestro deseo que este contador de segundos
	 * en efecto, cuente segundos. Para el blinky de manera "estandar" hacemos que vaya a un ratio de 250 ms.
	 */

	contador_segundos.pTIMx 							= TIM2;
 80017de:	4b5d      	ldr	r3, [pc, #372]	@ (8001954 <init_system+0x4c0>)
 80017e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e4:	601a      	str	r2, [r3, #0]
	contador_segundos.TIMx_Config.TIMx_Prescaler		=16000;  //	Genera incrementos de 1ms
 80017e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001954 <init_system+0x4c0>)
 80017e8:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80017ec:	80da      	strh	r2, [r3, #6]
	contador_segundos.TIMx_Config.TIMx_Period			=1000;  //	se pone 1000 porque en combinacion con el prescaler que es 16000, esa division da para que el timer vaya a 1000ms
 80017ee:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <init_system+0x4c0>)
 80017f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f4:	609a      	str	r2, [r3, #8]
	contador_segundos.TIMx_Config.TIMx_mode			=TIMER_UP_COUNTER;  //
 80017f6:	4b57      	ldr	r3, [pc, #348]	@ (8001954 <init_system+0x4c0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	711a      	strb	r2, [r3, #4]
	contador_segundos.TIMx_Config.TIMx_InterruptEnable	=TIMER_INT_ENABLE;  //
 80017fc:	4b55      	ldr	r3, [pc, #340]	@ (8001954 <init_system+0x4c0>)
 80017fe:	2201      	movs	r2, #1
 8001800:	731a      	strb	r2, [r3, #12]

	/*	Configuramos el Timer */
	timer_Config(&contador_segundos);
 8001802:	4854      	ldr	r0, [pc, #336]	@ (8001954 <init_system+0x4c0>)
 8001804:	f003 f92c 	bl	8004a60 <timer_Config>

	//	Encedemos el Timer.
	timer_SetState(&contador_segundos,SET);
 8001808:	2101      	movs	r1, #1
 800180a:	4852      	ldr	r0, [pc, #328]	@ (8001954 <init_system+0x4c0>)
 800180c:	f003 faa0 	bl	8004d50 <timer_SetState>

	blinkyTimer.pTIMx 							= TIM5;
 8001810:	4b51      	ldr	r3, [pc, #324]	@ (8001958 <init_system+0x4c4>)
 8001812:	4a52      	ldr	r2, [pc, #328]	@ (800195c <init_system+0x4c8>)
 8001814:	601a      	str	r2, [r3, #0]
	blinkyTimer.TIMx_Config.TIMx_Prescaler		=16000;  //	Genera incrementos de 1ms
 8001816:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <init_system+0x4c4>)
 8001818:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800181c:	80da      	strh	r2, [r3, #6]
	blinkyTimer.TIMx_Config.TIMx_Period			=250;  //	el prescaler lo ajusta 1ms, entonces lo quiero a 250ms, y es la multiplicacion de uno con el otro.
 800181e:	4b4e      	ldr	r3, [pc, #312]	@ (8001958 <init_system+0x4c4>)
 8001820:	22fa      	movs	r2, #250	@ 0xfa
 8001822:	609a      	str	r2, [r3, #8]
	blinkyTimer.TIMx_Config.TIMx_mode			=TIMER_UP_COUNTER;  //
 8001824:	4b4c      	ldr	r3, [pc, #304]	@ (8001958 <init_system+0x4c4>)
 8001826:	2200      	movs	r2, #0
 8001828:	711a      	strb	r2, [r3, #4]
	blinkyTimer.TIMx_Config.TIMx_InterruptEnable	=TIMER_INT_ENABLE;  //
 800182a:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <init_system+0x4c4>)
 800182c:	2201      	movs	r2, #1
 800182e:	731a      	strb	r2, [r3, #12]


	/*	Configuramos el Timer */
	timer_Config(&blinkyTimer);
 8001830:	4849      	ldr	r0, [pc, #292]	@ (8001958 <init_system+0x4c4>)
 8001832:	f003 f915 	bl	8004a60 <timer_Config>

	//	Encedemos el Timer.
	timer_SetState(&blinkyTimer,SET);
 8001836:	2101      	movs	r1, #1
 8001838:	4847      	ldr	r0, [pc, #284]	@ (8001958 <init_system+0x4c4>)
 800183a:	f003 fa89 	bl	8004d50 <timer_SetState>

	display.pTIMx 							= TIM3;
 800183e:	4b48      	ldr	r3, [pc, #288]	@ (8001960 <init_system+0x4cc>)
 8001840:	4a48      	ldr	r2, [pc, #288]	@ (8001964 <init_system+0x4d0>)
 8001842:	601a      	str	r2, [r3, #0]
	display.TIMx_Config.TIMx_Prescaler		=16000;  //	Genera incrementos de 1ms
 8001844:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <init_system+0x4cc>)
 8001846:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800184a:	80da      	strh	r2, [r3, #6]
	display.TIMx_Config.TIMx_Period			=2;  //	60FPS ultra calidad gamer. Se tuvo que subir porque no se veía fluido el refresco, antes era 15, que significaban 60 FPS
 800184c:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <init_system+0x4cc>)
 800184e:	2202      	movs	r2, #2
 8001850:	609a      	str	r2, [r3, #8]
	display.TIMx_Config.TIMx_mode			=TIMER_UP_COUNTER;  //
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <init_system+0x4cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	711a      	strb	r2, [r3, #4]
	display.TIMx_Config.TIMx_InterruptEnable	=TIMER_INT_ENABLE;  //
 8001858:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <init_system+0x4cc>)
 800185a:	2201      	movs	r2, #1
 800185c:	731a      	strb	r2, [r3, #12]


	/*	Configuramos el Timer */
	timer_Config(&display);
 800185e:	4840      	ldr	r0, [pc, #256]	@ (8001960 <init_system+0x4cc>)
 8001860:	f003 f8fe 	bl	8004a60 <timer_Config>

	//	Encedemos el Timer.
	timer_SetState(&display,SET);
 8001864:	2101      	movs	r1, #1
 8001866:	483e      	ldr	r0, [pc, #248]	@ (8001960 <init_system+0x4cc>)
 8001868:	f003 fa72 	bl	8004d50 <timer_SetState>


	/* Configuramos el USART2
	 * usamos las configs que el profe nos dejo en el documento de la tarea. */

	usart2.ptrUSARTx = USART2;
 800186c:	4b3e      	ldr	r3, [pc, #248]	@ (8001968 <init_system+0x4d4>)
 800186e:	4a3f      	ldr	r2, [pc, #252]	@ (800196c <init_system+0x4d8>)
 8001870:	601a      	str	r2, [r3, #0]
	usart2.USART_Config.baudrate =	USART_BAUDRATE_115200;
 8001872:	4b3d      	ldr	r3, [pc, #244]	@ (8001968 <init_system+0x4d4>)
 8001874:	2203      	movs	r2, #3
 8001876:	715a      	strb	r2, [r3, #5]
	usart2.USART_Config.datasize = USART_DATASIZE_8BIT;
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <init_system+0x4d4>)
 800187a:	2200      	movs	r2, #0
 800187c:	719a      	strb	r2, [r3, #6]
	usart2.USART_Config.parity = USART_PARITY_NONE;
 800187e:	4b3a      	ldr	r3, [pc, #232]	@ (8001968 <init_system+0x4d4>)
 8001880:	2200      	movs	r2, #0
 8001882:	71da      	strb	r2, [r3, #7]
	usart2.USART_Config.stopbits = USART_STOPBIT_1;
 8001884:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <init_system+0x4d4>)
 8001886:	2200      	movs	r2, #0
 8001888:	721a      	strb	r2, [r3, #8]
	usart2.USART_Config.enableIntRX = USART_RX_INTERRUP_ENABLE;
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <init_system+0x4d4>)
 800188c:	2201      	movs	r2, #1
 800188e:	725a      	strb	r2, [r3, #9]
	usart2.USART_Config.mode = USART_MODE_RXTX;
 8001890:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <init_system+0x4d4>)
 8001892:	2202      	movs	r2, #2
 8001894:	711a      	strb	r2, [r3, #4]

	usart_Config(&usart2);
 8001896:	4834      	ldr	r0, [pc, #208]	@ (8001968 <init_system+0x4d4>)
 8001898:	f003 fb42 	bl	8004f20 <usart_Config>

	pinRX.pGPIOx = GPIOA;
 800189c:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <init_system+0x4dc>)
 800189e:	4a35      	ldr	r2, [pc, #212]	@ (8001974 <init_system+0x4e0>)
 80018a0:	601a      	str	r2, [r3, #0]
	pinRX.pinConfig.GPIO_PinNumber		 = PIN_3;
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <init_system+0x4dc>)
 80018a4:	2203      	movs	r2, #3
 80018a6:	711a      	strb	r2, [r3, #4]
	pinRX.pinConfig.GPIO_PinMode		=	GPIO_MODE_ALTFN;
 80018a8:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <init_system+0x4dc>)
 80018aa:	2202      	movs	r2, #2
 80018ac:	715a      	strb	r2, [r3, #5]
	pinRX.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80018ae:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <init_system+0x4dc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	721a      	strb	r2, [r3, #8]
	pinRX.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 80018b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <init_system+0x4dc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	719a      	strb	r2, [r3, #6]
	pinRX.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <init_system+0x4dc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	71da      	strb	r2, [r3, #7]
	pinRX.pinConfig.GPIO_PinAltFunMode 	=	AF7;
 80018c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <init_system+0x4dc>)
 80018c2:	2207      	movs	r2, #7
 80018c4:	725a      	strb	r2, [r3, #9]

	gpio_Config(&pinRX);
 80018c6:	482a      	ldr	r0, [pc, #168]	@ (8001970 <init_system+0x4dc>)
 80018c8:	f002 febe 	bl	8004648 <gpio_Config>

	pinTX.pGPIOx = GPIOA;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <init_system+0x4e4>)
 80018ce:	4a29      	ldr	r2, [pc, #164]	@ (8001974 <init_system+0x4e0>)
 80018d0:	601a      	str	r2, [r3, #0]
	pinTX.pinConfig.GPIO_PinNumber		 = PIN_2;
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <init_system+0x4e4>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	711a      	strb	r2, [r3, #4]
	pinTX.pinConfig.GPIO_PinMode		=	GPIO_MODE_ALTFN;
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <init_system+0x4e4>)
 80018da:	2202      	movs	r2, #2
 80018dc:	715a      	strb	r2, [r3, #5]
	pinTX.pinConfig.GPIO_PinOutputType	=	GPIO_OTYPE_PUSHPULL;
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <init_system+0x4e4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	721a      	strb	r2, [r3, #8]
	pinTX.pinConfig.GPIO_PinOutputSpeed	=	GPIO_OSPEED_MEDIUM;
 80018e4:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <init_system+0x4e4>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	719a      	strb	r2, [r3, #6]
	pinTX.pinConfig.GPIO_PinPuPdControl	=	GPIO_PUPDR_NOTHING;
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <init_system+0x4e4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	71da      	strb	r2, [r3, #7]
	pinTX.pinConfig.GPIO_PinAltFunMode 	=	AF7;
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <init_system+0x4e4>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	725a      	strb	r2, [r3, #9]

	gpio_Config(&pinTX);
 80018f6:	4820      	ldr	r0, [pc, #128]	@ (8001978 <init_system+0x4e4>)
 80018f8:	f002 fea6 	bl	8004648 <gpio_Config>


	/* Configuramos el ADC */

	//el trimmer esta en el canal0, usamos las configs que el profe nos dejo
	trimmer.channel = CHANNEL_0;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	@ (800197c <init_system+0x4e8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	trimmer.resolution = RESOLUTION_12_BIT;
 8001902:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <init_system+0x4e8>)
 8001904:	2200      	movs	r2, #0
 8001906:	705a      	strb	r2, [r3, #1]
	trimmer.dataAlignment = ALIGNMENT_RIGHT;
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <init_system+0x4e8>)
 800190a:	2200      	movs	r2, #0
 800190c:	70da      	strb	r2, [r3, #3]
	trimmer.interruptState = ADC_INT_ENABLE;
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <init_system+0x4e8>)
 8001910:	2201      	movs	r2, #1
 8001912:	715a      	strb	r2, [r3, #5]
	trimmer.samplingPeriod = SAMPLING_PERIOD_112_CYCLES;
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <init_system+0x4e8>)
 8001916:	2205      	movs	r2, #5
 8001918:	709a      	strb	r2, [r3, #2]

	//cargamos la config.
	adc_ConfigSingleChannel(&trimmer);
 800191a:	4818      	ldr	r0, [pc, #96]	@ (800197c <init_system+0x4e8>)
 800191c:	f000 fc2e 	bl	800217c <adc_ConfigSingleChannel>
	adc_StartSingleConv();
 8001920:	f001 fb58 	bl	8002fd4 <adc_StartSingleConv>


	fotoresistencia.channel = CHANNEL_1;
 8001924:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <init_system+0x4ec>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
	fotoresistencia.resolution = RESOLUTION_12_BIT;
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <init_system+0x4ec>)
 800192c:	2200      	movs	r2, #0
 800192e:	705a      	strb	r2, [r3, #1]
	fotoresistencia.dataAlignment = ALIGNMENT_RIGHT;
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <init_system+0x4ec>)
 8001932:	2200      	movs	r2, #0
 8001934:	70da      	strb	r2, [r3, #3]
	fotoresistencia.interruptState = ADC_INT_ENABLE;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <init_system+0x4ec>)
 8001938:	2201      	movs	r2, #1
 800193a:	715a      	strb	r2, [r3, #5]
	fotoresistencia.samplingPeriod = SAMPLING_PERIOD_112_CYCLES;
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <init_system+0x4ec>)
 800193e:	2205      	movs	r2, #5
 8001940:	709a      	strb	r2, [r3, #2]





}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002d4 	.word	0x200002d4
 800194c:	40020400 	.word	0x40020400
 8001950:	20000310 	.word	0x20000310
 8001954:	20000398 	.word	0x20000398
 8001958:	200003a8 	.word	0x200003a8
 800195c:	40000c00 	.word	0x40000c00
 8001960:	200003b8 	.word	0x200003b8
 8001964:	40000400 	.word	0x40000400
 8001968:	200003c8 	.word	0x200003c8
 800196c:	40004400 	.word	0x40004400
 8001970:	200002e0 	.word	0x200002e0
 8001974:	40020000 	.word	0x40020000
 8001978:	200002ec 	.word	0x200002ec
 800197c:	200002f8 	.word	0x200002f8
 8001980:	20000300 	.word	0x20000300

08001984 <display_numbers>:
 *  Overwrite function
 **/

//funcion para pintar los numeros, seleccionamos los leds que se encienden para hacer X numero.

void display_numbers (uint8_t valor){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	switch (valor){
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b09      	cmp	r3, #9
 8001992:	f200 8139 	bhi.w	8001c08 <display_numbers+0x284>
 8001996:	a201      	add	r2, pc, #4	@ (adr r2, 800199c <display_numbers+0x18>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019c5 	.word	0x080019c5
 80019a0:	080019ff 	.word	0x080019ff
 80019a4:	08001a39 	.word	0x08001a39
 80019a8:	08001a73 	.word	0x08001a73
 80019ac:	08001aad 	.word	0x08001aad
 80019b0:	08001ae7 	.word	0x08001ae7
 80019b4:	08001b21 	.word	0x08001b21
 80019b8:	08001b5b 	.word	0x08001b5b
 80019bc:	08001b95 	.word	0x08001b95
 80019c0:	08001bcf 	.word	0x08001bcf
		case 0: {
					gpio_WritePin(&LedA, 0);
 80019c4:	2100      	movs	r1, #0
 80019c6:	4892      	ldr	r0, [pc, #584]	@ (8001c10 <display_numbers+0x28c>)
 80019c8:	f002 ffb2 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 80019cc:	2100      	movs	r1, #0
 80019ce:	4891      	ldr	r0, [pc, #580]	@ (8001c14 <display_numbers+0x290>)
 80019d0:	f002 ffae 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 80019d4:	2100      	movs	r1, #0
 80019d6:	4890      	ldr	r0, [pc, #576]	@ (8001c18 <display_numbers+0x294>)
 80019d8:	f002 ffaa 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 0);
 80019dc:	2100      	movs	r1, #0
 80019de:	488f      	ldr	r0, [pc, #572]	@ (8001c1c <display_numbers+0x298>)
 80019e0:	f002 ffa6 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	488e      	ldr	r0, [pc, #568]	@ (8001c20 <display_numbers+0x29c>)
 80019e8:	f002 ffa2 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 0);
 80019ec:	2100      	movs	r1, #0
 80019ee:	488d      	ldr	r0, [pc, #564]	@ (8001c24 <display_numbers+0x2a0>)
 80019f0:	f002 ff9e 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 1);
 80019f4:	2101      	movs	r1, #1
 80019f6:	488c      	ldr	r0, [pc, #560]	@ (8001c28 <display_numbers+0x2a4>)
 80019f8:	f002 ff9a 	bl	8004930 <gpio_WritePin>
					break;
 80019fc:	e104      	b.n	8001c08 <display_numbers+0x284>
				}
		case 1:{
					gpio_WritePin(&LedA, 1);
 80019fe:	2101      	movs	r1, #1
 8001a00:	4883      	ldr	r0, [pc, #524]	@ (8001c10 <display_numbers+0x28c>)
 8001a02:	f002 ff95 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4882      	ldr	r0, [pc, #520]	@ (8001c14 <display_numbers+0x290>)
 8001a0a:	f002 ff91 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4881      	ldr	r0, [pc, #516]	@ (8001c18 <display_numbers+0x294>)
 8001a12:	f002 ff8d 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 1);
 8001a16:	2101      	movs	r1, #1
 8001a18:	4880      	ldr	r0, [pc, #512]	@ (8001c1c <display_numbers+0x298>)
 8001a1a:	f002 ff89 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 1);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	487f      	ldr	r0, [pc, #508]	@ (8001c20 <display_numbers+0x29c>)
 8001a22:	f002 ff85 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 1);
 8001a26:	2101      	movs	r1, #1
 8001a28:	487e      	ldr	r0, [pc, #504]	@ (8001c24 <display_numbers+0x2a0>)
 8001a2a:	f002 ff81 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 1);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	487d      	ldr	r0, [pc, #500]	@ (8001c28 <display_numbers+0x2a4>)
 8001a32:	f002 ff7d 	bl	8004930 <gpio_WritePin>
					break;
 8001a36:	e0e7      	b.n	8001c08 <display_numbers+0x284>
				}
		case 2:{
					gpio_WritePin(&LedA, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4875      	ldr	r0, [pc, #468]	@ (8001c10 <display_numbers+0x28c>)
 8001a3c:	f002 ff78 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4874      	ldr	r0, [pc, #464]	@ (8001c14 <display_numbers+0x290>)
 8001a44:	f002 ff74 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 1);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4873      	ldr	r0, [pc, #460]	@ (8001c18 <display_numbers+0x294>)
 8001a4c:	f002 ff70 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 0);
 8001a50:	2100      	movs	r1, #0
 8001a52:	4872      	ldr	r0, [pc, #456]	@ (8001c1c <display_numbers+0x298>)
 8001a54:	f002 ff6c 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4871      	ldr	r0, [pc, #452]	@ (8001c20 <display_numbers+0x29c>)
 8001a5c:	f002 ff68 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 1);
 8001a60:	2101      	movs	r1, #1
 8001a62:	4870      	ldr	r0, [pc, #448]	@ (8001c24 <display_numbers+0x2a0>)
 8001a64:	f002 ff64 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	486f      	ldr	r0, [pc, #444]	@ (8001c28 <display_numbers+0x2a4>)
 8001a6c:	f002 ff60 	bl	8004930 <gpio_WritePin>
					break;
 8001a70:	e0ca      	b.n	8001c08 <display_numbers+0x284>
				}
		case 3:{
					gpio_WritePin(&LedA, 0);
 8001a72:	2100      	movs	r1, #0
 8001a74:	4866      	ldr	r0, [pc, #408]	@ (8001c10 <display_numbers+0x28c>)
 8001a76:	f002 ff5b 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4865      	ldr	r0, [pc, #404]	@ (8001c14 <display_numbers+0x290>)
 8001a7e:	f002 ff57 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001a82:	2100      	movs	r1, #0
 8001a84:	4864      	ldr	r0, [pc, #400]	@ (8001c18 <display_numbers+0x294>)
 8001a86:	f002 ff53 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 0);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4863      	ldr	r0, [pc, #396]	@ (8001c1c <display_numbers+0x298>)
 8001a8e:	f002 ff4f 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 1);
 8001a92:	2101      	movs	r1, #1
 8001a94:	4862      	ldr	r0, [pc, #392]	@ (8001c20 <display_numbers+0x29c>)
 8001a96:	f002 ff4b 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4861      	ldr	r0, [pc, #388]	@ (8001c24 <display_numbers+0x2a0>)
 8001a9e:	f002 ff47 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4860      	ldr	r0, [pc, #384]	@ (8001c28 <display_numbers+0x2a4>)
 8001aa6:	f002 ff43 	bl	8004930 <gpio_WritePin>
					break;
 8001aaa:	e0ad      	b.n	8001c08 <display_numbers+0x284>
				}
		case 4:{
					gpio_WritePin(&LedA, 1);
 8001aac:	2101      	movs	r1, #1
 8001aae:	4858      	ldr	r0, [pc, #352]	@ (8001c10 <display_numbers+0x28c>)
 8001ab0:	f002 ff3e 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4857      	ldr	r0, [pc, #348]	@ (8001c14 <display_numbers+0x290>)
 8001ab8:	f002 ff3a 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	4856      	ldr	r0, [pc, #344]	@ (8001c18 <display_numbers+0x294>)
 8001ac0:	f002 ff36 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4855      	ldr	r0, [pc, #340]	@ (8001c1c <display_numbers+0x298>)
 8001ac8:	f002 ff32 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 1);
 8001acc:	2101      	movs	r1, #1
 8001ace:	4854      	ldr	r0, [pc, #336]	@ (8001c20 <display_numbers+0x29c>)
 8001ad0:	f002 ff2e 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 0);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4853      	ldr	r0, [pc, #332]	@ (8001c24 <display_numbers+0x2a0>)
 8001ad8:	f002 ff2a 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	4852      	ldr	r0, [pc, #328]	@ (8001c28 <display_numbers+0x2a4>)
 8001ae0:	f002 ff26 	bl	8004930 <gpio_WritePin>
					break;
 8001ae4:	e090      	b.n	8001c08 <display_numbers+0x284>
				}
		case 5:{
					gpio_WritePin(&LedA, 0);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4849      	ldr	r0, [pc, #292]	@ (8001c10 <display_numbers+0x28c>)
 8001aea:	f002 ff21 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 1);
 8001aee:	2101      	movs	r1, #1
 8001af0:	4848      	ldr	r0, [pc, #288]	@ (8001c14 <display_numbers+0x290>)
 8001af2:	f002 ff1d 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001af6:	2100      	movs	r1, #0
 8001af8:	4847      	ldr	r0, [pc, #284]	@ (8001c18 <display_numbers+0x294>)
 8001afa:	f002 ff19 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 0);
 8001afe:	2100      	movs	r1, #0
 8001b00:	4846      	ldr	r0, [pc, #280]	@ (8001c1c <display_numbers+0x298>)
 8001b02:	f002 ff15 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	4845      	ldr	r0, [pc, #276]	@ (8001c20 <display_numbers+0x29c>)
 8001b0a:	f002 ff11 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 0);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4844      	ldr	r0, [pc, #272]	@ (8001c24 <display_numbers+0x2a0>)
 8001b12:	f002 ff0d 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001b16:	2100      	movs	r1, #0
 8001b18:	4843      	ldr	r0, [pc, #268]	@ (8001c28 <display_numbers+0x2a4>)
 8001b1a:	f002 ff09 	bl	8004930 <gpio_WritePin>
					break;
 8001b1e:	e073      	b.n	8001c08 <display_numbers+0x284>
				}
		case 6:{
					gpio_WritePin(&LedA, 0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	483b      	ldr	r0, [pc, #236]	@ (8001c10 <display_numbers+0x28c>)
 8001b24:	f002 ff04 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 1);
 8001b28:	2101      	movs	r1, #1
 8001b2a:	483a      	ldr	r0, [pc, #232]	@ (8001c14 <display_numbers+0x290>)
 8001b2c:	f002 ff00 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	4839      	ldr	r0, [pc, #228]	@ (8001c18 <display_numbers+0x294>)
 8001b34:	f002 fefc 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4838      	ldr	r0, [pc, #224]	@ (8001c1c <display_numbers+0x298>)
 8001b3c:	f002 fef8 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	4837      	ldr	r0, [pc, #220]	@ (8001c20 <display_numbers+0x29c>)
 8001b44:	f002 fef4 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 0);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4836      	ldr	r0, [pc, #216]	@ (8001c24 <display_numbers+0x2a0>)
 8001b4c:	f002 fef0 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001b50:	2100      	movs	r1, #0
 8001b52:	4835      	ldr	r0, [pc, #212]	@ (8001c28 <display_numbers+0x2a4>)
 8001b54:	f002 feec 	bl	8004930 <gpio_WritePin>
					break;
 8001b58:	e056      	b.n	8001c08 <display_numbers+0x284>
				}
		case 7:{
					gpio_WritePin(&LedA, 0);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	482c      	ldr	r0, [pc, #176]	@ (8001c10 <display_numbers+0x28c>)
 8001b5e:	f002 fee7 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001b62:	2100      	movs	r1, #0
 8001b64:	482b      	ldr	r0, [pc, #172]	@ (8001c14 <display_numbers+0x290>)
 8001b66:	f002 fee3 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	482a      	ldr	r0, [pc, #168]	@ (8001c18 <display_numbers+0x294>)
 8001b6e:	f002 fedf 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 1);
 8001b72:	2101      	movs	r1, #1
 8001b74:	4829      	ldr	r0, [pc, #164]	@ (8001c1c <display_numbers+0x298>)
 8001b76:	f002 fedb 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4828      	ldr	r0, [pc, #160]	@ (8001c20 <display_numbers+0x29c>)
 8001b7e:	f002 fed7 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 1);
 8001b82:	2101      	movs	r1, #1
 8001b84:	4827      	ldr	r0, [pc, #156]	@ (8001c24 <display_numbers+0x2a0>)
 8001b86:	f002 fed3 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 1);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4826      	ldr	r0, [pc, #152]	@ (8001c28 <display_numbers+0x2a4>)
 8001b8e:	f002 fecf 	bl	8004930 <gpio_WritePin>
					break;
 8001b92:	e039      	b.n	8001c08 <display_numbers+0x284>
				}
		case 8:{
					gpio_WritePin(&LedA, 0);
 8001b94:	2100      	movs	r1, #0
 8001b96:	481e      	ldr	r0, [pc, #120]	@ (8001c10 <display_numbers+0x28c>)
 8001b98:	f002 feca 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	481d      	ldr	r0, [pc, #116]	@ (8001c14 <display_numbers+0x290>)
 8001ba0:	f002 fec6 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	481c      	ldr	r0, [pc, #112]	@ (8001c18 <display_numbers+0x294>)
 8001ba8:	f002 fec2 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 0);
 8001bac:	2100      	movs	r1, #0
 8001bae:	481b      	ldr	r0, [pc, #108]	@ (8001c1c <display_numbers+0x298>)
 8001bb0:	f002 febe 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 0);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	481a      	ldr	r0, [pc, #104]	@ (8001c20 <display_numbers+0x29c>)
 8001bb8:	f002 feba 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4819      	ldr	r0, [pc, #100]	@ (8001c24 <display_numbers+0x2a0>)
 8001bc0:	f002 feb6 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4818      	ldr	r0, [pc, #96]	@ (8001c28 <display_numbers+0x2a4>)
 8001bc8:	f002 feb2 	bl	8004930 <gpio_WritePin>
					break;
 8001bcc:	e01c      	b.n	8001c08 <display_numbers+0x284>
				}
		case 9:{
					gpio_WritePin(&LedA, 0);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	480f      	ldr	r0, [pc, #60]	@ (8001c10 <display_numbers+0x28c>)
 8001bd2:	f002 fead 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedB, 0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	480e      	ldr	r0, [pc, #56]	@ (8001c14 <display_numbers+0x290>)
 8001bda:	f002 fea9 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedC, 0);
 8001bde:	2100      	movs	r1, #0
 8001be0:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <display_numbers+0x294>)
 8001be2:	f002 fea5 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedD, 1);
 8001be6:	2101      	movs	r1, #1
 8001be8:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <display_numbers+0x298>)
 8001bea:	f002 fea1 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedE, 1);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <display_numbers+0x29c>)
 8001bf2:	f002 fe9d 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedF, 0);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <display_numbers+0x2a0>)
 8001bfa:	f002 fe99 	bl	8004930 <gpio_WritePin>
					gpio_WritePin(&LedG, 0);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <display_numbers+0x2a4>)
 8001c02:	f002 fe95 	bl	8004930 <gpio_WritePin>
					break;
 8001c06:	bf00      	nop
				}
		}
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200001f0 	.word	0x200001f0
 8001c14:	200001fc 	.word	0x200001fc
 8001c18:	20000208 	.word	0x20000208
 8001c1c:	20000214 	.word	0x20000214
 8001c20:	20000220 	.word	0x20000220
 8001c24:	2000022c 	.word	0x2000022c
 8001c28:	20000238 	.word	0x20000238

08001c2c <switcheo_transistor>:


//aqui es donde se supone que esta generando el fantasma en DECENAS, no se pudo encontrar una forma de solucionarlo. Quedo poder ver y preguntar.
//lo que hacemos primero es apagar los pines que switchean todo lo que no sea unidades (para el primer caso por ejemplo), y si, 1 es apagar 0 encender. Usamos display_number para encender lo que requerimos y asi se completa unidades, lo mismo para los otros.
void switcheo_transistor (uint8_t choose){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	switch(choose){
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d863      	bhi.n	8001d04 <switcheo_transistor+0xd8>
 8001c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c44 <switcheo_transistor+0x18>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001c81 	.word	0x08001c81
 8001c4c:	08001cad 	.word	0x08001cad
 8001c50:	08001cd9 	.word	0x08001cd9
	case 0:{
		gpio_WritePin(&switcheoCentenas,1);
 8001c54:	2101      	movs	r1, #1
 8001c56:	482d      	ldr	r0, [pc, #180]	@ (8001d0c <switcheo_transistor+0xe0>)
 8001c58:	f002 fe6a 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoDecenas,1);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	482c      	ldr	r0, [pc, #176]	@ (8001d10 <switcheo_transistor+0xe4>)
 8001c60:	f002 fe66 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoMillares,1);
 8001c64:	2101      	movs	r1, #1
 8001c66:	482b      	ldr	r0, [pc, #172]	@ (8001d14 <switcheo_transistor+0xe8>)
 8001c68:	f002 fe62 	bl	8004930 <gpio_WritePin>
		display_numbers(unidades);
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <switcheo_transistor+0xec>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fe87 	bl	8001984 <display_numbers>
		gpio_WritePin(&switcheoUnidades,0);
 8001c76:	2100      	movs	r1, #0
 8001c78:	4828      	ldr	r0, [pc, #160]	@ (8001d1c <switcheo_transistor+0xf0>)
 8001c7a:	f002 fe59 	bl	8004930 <gpio_WritePin>
		break;
 8001c7e:	e041      	b.n	8001d04 <switcheo_transistor+0xd8>
		}
	case 1:{
		gpio_WritePin(&switcheoCentenas,1);
 8001c80:	2101      	movs	r1, #1
 8001c82:	4822      	ldr	r0, [pc, #136]	@ (8001d0c <switcheo_transistor+0xe0>)
 8001c84:	f002 fe54 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoMillares,1);
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4822      	ldr	r0, [pc, #136]	@ (8001d14 <switcheo_transistor+0xe8>)
 8001c8c:	f002 fe50 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoUnidades,1);
 8001c90:	2101      	movs	r1, #1
 8001c92:	4822      	ldr	r0, [pc, #136]	@ (8001d1c <switcheo_transistor+0xf0>)
 8001c94:	f002 fe4c 	bl	8004930 <gpio_WritePin>
		display_numbers(decenas);
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <switcheo_transistor+0xf4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fe71 	bl	8001984 <display_numbers>
		gpio_WritePin(&switcheoDecenas,0);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	481a      	ldr	r0, [pc, #104]	@ (8001d10 <switcheo_transistor+0xe4>)
 8001ca6:	f002 fe43 	bl	8004930 <gpio_WritePin>
		break;
 8001caa:	e02b      	b.n	8001d04 <switcheo_transistor+0xd8>
		}
	case 2:{
		gpio_WritePin(&switcheoUnidades,1);
 8001cac:	2101      	movs	r1, #1
 8001cae:	481b      	ldr	r0, [pc, #108]	@ (8001d1c <switcheo_transistor+0xf0>)
 8001cb0:	f002 fe3e 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoDecenas,1);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4816      	ldr	r0, [pc, #88]	@ (8001d10 <switcheo_transistor+0xe4>)
 8001cb8:	f002 fe3a 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoMillares,1);
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4815      	ldr	r0, [pc, #84]	@ (8001d14 <switcheo_transistor+0xe8>)
 8001cc0:	f002 fe36 	bl	8004930 <gpio_WritePin>
		display_numbers(centenas);
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <switcheo_transistor+0xf8>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fe5b 	bl	8001984 <display_numbers>
		gpio_WritePin(&switcheoCentenas,0);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <switcheo_transistor+0xe0>)
 8001cd2:	f002 fe2d 	bl	8004930 <gpio_WritePin>
		break;
 8001cd6:	e015      	b.n	8001d04 <switcheo_transistor+0xd8>
		}
	case 3:{
		gpio_WritePin(&switcheoCentenas,1);
 8001cd8:	2101      	movs	r1, #1
 8001cda:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <switcheo_transistor+0xe0>)
 8001cdc:	f002 fe28 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoDecenas,1);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <switcheo_transistor+0xe4>)
 8001ce4:	f002 fe24 	bl	8004930 <gpio_WritePin>
		gpio_WritePin(&switcheoUnidades,1);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <switcheo_transistor+0xf0>)
 8001cec:	f002 fe20 	bl	8004930 <gpio_WritePin>
		display_numbers(millares);
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <switcheo_transistor+0xfc>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe45 	bl	8001984 <display_numbers>
		gpio_WritePin(&switcheoMillares,0);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <switcheo_transistor+0xe8>)
 8001cfe:	f002 fe17 	bl	8004930 <gpio_WritePin>
		break;
 8001d02:	bf00      	nop
		}
	}
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000280 	.word	0x20000280
 8001d10:	20000274 	.word	0x20000274
 8001d14:	2000028c 	.word	0x2000028c
 8001d18:	20000260 	.word	0x20000260
 8001d1c:	20000268 	.word	0x20000268
 8001d20:	20000261 	.word	0x20000261
 8001d24:	20000262 	.word	0x20000262
 8001d28:	20000263 	.word	0x20000263

08001d2c <separador_numero>:


//funcion para separar el numero, asi recibimos las unidades, decenas, centenas y millares del numero que nos arroje las lecturas de ADC, etc.
void separador_numero (uint16_t valor){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]

	uint16_t numero = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	81fb      	strh	r3, [r7, #14]
	// supngamos que numero es igual 1234
	numero = valor;
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	81fb      	strh	r3, [r7, #14]
	// residuo 4,
	unidades = numero % 10;
 8001d3e:	89fa      	ldrh	r2, [r7, #14]
 8001d40:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <separador_numero+0xb0>)
 8001d42:	fba3 1302 	umull	r1, r3, r3, r2
 8001d46:	08d9      	lsrs	r1, r3, #3
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <separador_numero+0xb4>)
 8001d58:	701a      	strb	r2, [r3, #0]
	// cociente 123
	numero = numero/10;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ddc <separador_numero+0xb0>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	81fb      	strh	r3, [r7, #14]
	// residuo 3
	decenas = numero % 10;
 8001d66:	89fa      	ldrh	r2, [r7, #14]
 8001d68:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <separador_numero+0xb0>)
 8001d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6e:	08d9      	lsrs	r1, r3, #3
 8001d70:	460b      	mov	r3, r1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <separador_numero+0xb8>)
 8001d80:	701a      	strb	r2, [r3, #0]
	// cociente 12
	numero = numero/10;
 8001d82:	89fb      	ldrh	r3, [r7, #14]
 8001d84:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <separador_numero+0xb0>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	81fb      	strh	r3, [r7, #14]
	// residuo 2
	centenas = numero % 10;
 8001d8e:	89fa      	ldrh	r2, [r7, #14]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <separador_numero+0xb0>)
 8001d92:	fba3 1302 	umull	r1, r3, r3, r2
 8001d96:	08d9      	lsrs	r1, r3, #3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <separador_numero+0xbc>)
 8001da8:	701a      	strb	r2, [r3, #0]
	// cociente 1
	numero = numero/10;
 8001daa:	89fb      	ldrh	r3, [r7, #14]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <separador_numero+0xb0>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	81fb      	strh	r3, [r7, #14]
	millares =numero%10;
 8001db6:	89fa      	ldrh	r2, [r7, #14]
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <separador_numero+0xb0>)
 8001dba:	fba3 1302 	umull	r1, r3, r3, r2
 8001dbe:	08d9      	lsrs	r1, r3, #3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <separador_numero+0xc0>)
 8001dd0:	701a      	strb	r2, [r3, #0]



}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	cccccccd 	.word	0xcccccccd
 8001de0:	20000260 	.word	0x20000260
 8001de4:	20000261 	.word	0x20000261
 8001de8:	20000262 	.word	0x20000262
 8001dec:	20000263 	.word	0x20000263

08001df0 <Timer2_Callback>:
 * necesitamos. Es decir cuando se hace la interrupcion, esta misma (administrada por el timer2) suma +1 al contador.
 * Esta parte del codigo ademas de mandar la interrupcion, tambien detiene la misma.
 */

//contador del modo 4, subimos la bandera.
void Timer2_Callback(void){
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	flag_conteo = 1;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <Timer2_Callback+0x14>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000253 	.word	0x20000253

08001e08 <Timer3_Callback>:


//sube la bandera del display
void Timer3_Callback(void){
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	display_flag = 1;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <Timer3_Callback+0x14>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000458 	.word	0x20000458

08001e20 <Timer5_Callback>:

/* este el callback del Led de estado, usamos el TooglePin para que se enciende y se apague, es la unico para lo
 * que nos sirve esta interrupcion. A grandes rasgos sirve para saber que el sistema funciona.

 Ademas de eso, agregamos la bandera para que se de la conversion de adc y la inicializacion de la variable sendMsg*/
void Timer5_Callback(void){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	gpio_TooglePin(&userLed);
 8001e24:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <Timer5_Callback+0x1c>)
 8001e26:	f002 fdc4 	bl	80049b2 <gpio_TooglePin>
	flag_adc_conversion = 1;
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <Timer5_Callback+0x20>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
	sendMsg = 1;
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <Timer5_Callback+0x24>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001e4 	.word	0x200001e4
 8001e40:	2000024e 	.word	0x2000024e
 8001e44:	2000024f 	.word	0x2000024f

08001e48 <callback_ExtInt13>:


//Callbacks del EXTI.
//subimos la bandera del clock, y leemos el dato que tenemos del encoder:exti_Data, y lo enviamos por pinData.
void callback_ExtInt13(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	flag_clock = 1;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <callback_ExtInt13+0x1c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
	exti_Data = gpio_ReadPin(&pinData);
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <callback_ExtInt13+0x20>)
 8001e54:	f002 fd96 	bl	8004984 <gpio_ReadPin>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <callback_ExtInt13+0x24>)
 8001e5e:	701a      	strb	r2, [r3, #0]
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000255 	.word	0x20000255
 8001e68:	200002c8 	.word	0x200002c8
 8001e6c:	20000254 	.word	0x20000254

08001e70 <callback_ExtInt5>:

void callback_ExtInt5(void){
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	changeModo = 1;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <callback_ExtInt5+0x14>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000252 	.word	0x20000252

08001e88 <adc_CompleteCallback>:

// Callback de ADC. adcData recibe el valor del adc. Subimos la bander del adc.
void adc_CompleteCallback (void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	adcData = adc_GetValue();
 8001e8c:	f001 f8be 	bl	800300c <adc_GetValue>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <adc_CompleteCallback+0x1c>)
 8001e96:	801a      	strh	r2, [r3, #0]
	flag_adc = 1;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <adc_CompleteCallback+0x20>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000248 	.word	0x20000248
 8001ea8:	20000247 	.word	0x20000247

08001eac <usart2_RxCallback>:
//Callbacks de USART2. usartdata es la variable que recibe lo recolectado por usart, recordemos que usart esta configurado para trabajar con RX y TX al tiempo.
void usart2_RxCallback(void){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	flag_usart = 1;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <usart2_RxCallback+0x1c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
	usart_data = usart_getRxData();
 8001eb6:	f003 fa8d 	bl	80053d4 <usart_getRxData>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <usart2_RxCallback+0x20>)
 8001ec0:	701a      	strb	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000246 	.word	0x20000246
 8001ecc:	20000258 	.word	0x20000258

08001ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <_kill>:

int _kill(int pid, int sig)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ee8:	f004 faac 	bl	8006444 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2216      	movs	r2, #22
 8001ef0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_exit>:

void _exit (int status)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f06:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffe7 	bl	8001ede <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <_exit+0x12>

08001f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e00a      	b.n	8001f3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f26:	f3af 8000 	nop.w
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	60ba      	str	r2, [r7, #8]
 8001f32:	b2ca      	uxtb	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf0      	blt.n	8001f26 <_read+0x12>
	}

return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e009      	b.n	8001f74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf1      	blt.n	8001f60 <_write+0x12>
	}
	return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_close>:

int _close(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fac:	605a      	str	r2, [r3, #4]
	return 0;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
	return 0;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
	...

08001fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff0:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002018:	f004 fa14 	bl	8006444 <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20020000 	.word	0x20020000
 8002048:	00000400 	.word	0x00000400
 800204c:	2000045c 	.word	0x2000045c
 8002050:	200005c8 	.word	0x200005c8

08002054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002054:	480d      	ldr	r0, [pc, #52]	@ (800208c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002056:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002058:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	@ (8002090 <LoopForever+0x6>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	@ (8002094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <LoopForever+0xe>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	@ (80020a0 <LoopForever+0x16>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002082:	f004 f9e5 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002086:	f7fe fe3d 	bl	8000d04 <main>

0800208a <LoopForever>:

LoopForever:
    b LoopForever
 800208a:	e7fe      	b.n	800208a <LoopForever>
  ldr   r0, =_estack
 800208c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002098:	08009fc0 	.word	0x08009fc0
  ldr r2, =_sbss
 800209c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80020a0:	200005c4 	.word	0x200005c4

080020a4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <BusFault_Handler>
	...

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4906      	ldr	r1, [pc, #24]	@ (80020dc <__NVIC_EnableIRQ+0x34>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db12      	blt.n	8002118 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	490a      	ldr	r1, [pc, #40]	@ (8002124 <__NVIC_DisableIRQ+0x44>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	3320      	adds	r3, #32
 8002108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800210c:	f3bf 8f4f 	dsb	sy
}
 8002110:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002112:	f3bf 8f6f 	isb	sy
}
 8002116:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	@ (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	@ (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <adc_ConfigSingleChannel>:
uint16_t		adcRawData = 0;

/*
 *
 * */
void adc_ConfigSingleChannel (ADC_Config_t *adcConfig){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

	/* 1. Configuramos el PinX para que cumpla la funcion del canal analogo deseado*/
	adc_ConfigAnalogPin(adcConfig->channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 ff5f 	bl	800304c <adc_ConfigAnalogPin>

	/* 2. Activamos la senal de reloj para el ADC */
	adc_enable_clock_peripheral();
 800218e:	f000 f82f 	bl	80021f0 <adc_enable_clock_peripheral>

	//Limpiamos los registros antes de empezar a configurar
	ADC1->CR1 = 0;
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <adc_ConfigSingleChannel+0x6c>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8002198:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <adc_ConfigSingleChannel+0x6c>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuracion de ADC1 */

	/* 3. Resolucion del ADC  */
	adc_set_resolution(adcConfig);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f834 	bl	800220c <adc_set_resolution>

	/* 4. Configuramos el modo Scan como desactivado */
	adc_ScanMode(SCAN_OFF);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f000 fef9 	bl	8002f9c <adc_ScanMode>


	/* 5. Configuramos la alineacion de los datos (derecha o izquierda) */
	adc_set_alignment(adcConfig);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f86c 	bl	8002288 <adc_set_alignment>

	/* 6. Desactivamos el "continuous mode */
	adc_StopContinuousConv ();
 80021b0:	f000 ff1e 	bl	8002ff0 <adc_StopContinuousConv>

	/* 7. Aca se deberia configurar el sampling... */
	adc_set_sampling_and_hold(adcConfig);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f889 	bl	80022cc <adc_set_sampling_and_hold>

	/* 8. Configuramos la secuencia y cuandos elementos hay en la secuencia */
	adc_one_channel_sequence(adcConfig);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fdfc 	bl	8002db8 <adc_one_channel_sequence>

	/* 9. Configurar el prescaler del ADC en 2:1 (el mas rapido que se puede tener) */
	ADC ->CCR &= ~ADC_CCR_ADCPRE;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <adc_ConfigSingleChannel+0x70>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a09      	ldr	r2, [pc, #36]	@ (80021ec <adc_ConfigSingleChannel+0x70>)
 80021c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80021ca:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80021cc:	b672      	cpsid	i
}
 80021ce:	bf00      	nop
	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Configuramos la interrupcion (si se encuentra activa), ademas de inscribir//remover
	 * la interrupcion enel NVIC */
	adc_config_interrupt(adcConfig);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fea1 	bl	8002f18 <adc_config_interrupt>

	/* 12. Activamos el moduloADC */
	adc_peripheralOnOFF(ADC_ON);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fec4 	bl	8002f64 <adc_peripheralOnOFF>
  __ASM volatile ("cpsie i" : : : "memory");
 80021dc:	b662      	cpsie	i
}
 80021de:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40012000 	.word	0x40012000
 80021ec:	40012300 	.word	0x40012300

080021f0 <adc_enable_clock_peripheral>:

/*
 * Enable Cloc signal for ADC peripheral
 *  */
static void adc_enable_clock_peripheral(void){
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <adc_enable_clock_peripheral+0x18>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	4a03      	ldr	r2, [pc, #12]	@ (8002208 <adc_enable_clock_peripheral+0x18>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40023800 	.word	0x40023800

0800220c <adc_set_resolution>:


	/*
	 * Configures the resolution for the conversion
	 */
static void adc_set_resolution(ADC_Config_t *adcConfig){
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	// se limpia el registro del res.
	ADC1->CR1 &= ~(0b11<< 24);
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <adc_set_resolution+0x78>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a1a      	ldr	r2, [pc, #104]	@ (8002284 <adc_set_resolution+0x78>)
 800221a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800221e:	6053      	str	r3, [r2, #4]
	switch(adcConfig->resolution){
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d827      	bhi.n	8002278 <adc_set_resolution+0x6c>
 8002228:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <adc_set_resolution+0x24>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002241 	.word	0x08002241
 8002234:	0800224f 	.word	0x0800224f
 8002238:	0800225d 	.word	0x0800225d
 800223c:	0800226b 	.word	0x0800226b
	case 0:{
		ADC1->CR1 &= ~(0b11<< 24);
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <adc_set_resolution+0x78>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <adc_set_resolution+0x78>)
 8002246:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800224a:	6053      	str	r3, [r2, #4]
		break;
 800224c:	e014      	b.n	8002278 <adc_set_resolution+0x6c>

	}
	case 1:{
		ADC1->CR1 |= (0b01<< 24);
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <adc_set_resolution+0x78>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <adc_set_resolution+0x78>)
 8002254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002258:	6053      	str	r3, [r2, #4]
		break;
 800225a:	e00d      	b.n	8002278 <adc_set_resolution+0x6c>
	}
	case 2:{
		ADC1->CR1 |= (0b10<< 24);
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <adc_set_resolution+0x78>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <adc_set_resolution+0x78>)
 8002262:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002266:	6053      	str	r3, [r2, #4]
		break;
 8002268:	e006      	b.n	8002278 <adc_set_resolution+0x6c>
	}
	case 3:{
		ADC1->CR1 |= (0b11<< 24);
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <adc_set_resolution+0x78>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <adc_set_resolution+0x78>)
 8002270:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8002274:	6053      	str	r3, [r2, #4]
		break;
 8002276:	bf00      	nop
	}
	}
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40012000 	.word	0x40012000

08002288 <adc_set_alignment>:


	/*
	 * Set the number of alignment: left or right
	 */
static void adc_set_alignment(ADC_Config_t *adcConfig){
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	// se limpia el registro del alignment.
		ADC1->CR2 &= ~(0b1<< 11);
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <adc_set_alignment+0x40>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a0c      	ldr	r2, [pc, #48]	@ (80022c8 <adc_set_alignment+0x40>)
 8002296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800229a:	6093      	str	r3, [r2, #8]
		if(adcConfig->dataAlignment == ALIGNMENT_RIGHT){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	78db      	ldrb	r3, [r3, #3]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <adc_set_alignment+0x2a>
		ADC1->CR2 &= ~(0b1<< 11);
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <adc_set_alignment+0x40>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <adc_set_alignment+0x40>)
 80022aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022ae:	6093      	str	r3, [r2, #8]
		}

		/*
		 * Relacionando con el valor del tiempo de carga del capacitor HOLD
		 */
}
 80022b0:	e005      	b.n	80022be <adc_set_alignment+0x36>
			ADC1->CR2 |= (0b1<< 11);
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <adc_set_alignment+0x40>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <adc_set_alignment+0x40>)
 80022b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022bc:	6093      	str	r3, [r2, #8]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012000 	.word	0x40012000

080022cc <adc_set_sampling_and_hold>:



static void adc_set_sampling_and_hold(ADC_Config_t *adcConfig){
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	switch(adcConfig->channel){
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	f200 8568 	bhi.w	8002dae <adc_set_sampling_and_hold+0xae2>
 80022de:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <adc_set_sampling_and_hold+0x18>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	08002325 	.word	0x08002325
 80022e8:	080023c9 	.word	0x080023c9
 80022ec:	0800246d 	.word	0x0800246d
 80022f0:	08002511 	.word	0x08002511
 80022f4:	080025b3 	.word	0x080025b3
 80022f8:	0800265b 	.word	0x0800265b
 80022fc:	080026ff 	.word	0x080026ff
 8002300:	080027a3 	.word	0x080027a3
 8002304:	08002847 	.word	0x08002847
 8002308:	080028ef 	.word	0x080028ef
 800230c:	08002993 	.word	0x08002993
 8002310:	08002a37 	.word	0x08002a37
 8002314:	08002adb 	.word	0x08002adb
 8002318:	08002b83 	.word	0x08002b83
 800231c:	08002c27 	.word	0x08002c27
 8002320:	08002ccb 	.word	0x08002ccb
	case 0:{
		switch(adcConfig->samplingPeriod){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	2b07      	cmp	r3, #7
 800232a:	f200 851e 	bhi.w	8002d6a <adc_set_sampling_and_hold+0xa9e>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <adc_set_sampling_and_hold+0x68>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002355 	.word	0x08002355
 8002338:	08002363 	.word	0x08002363
 800233c:	08002371 	.word	0x08002371
 8002340:	0800237f 	.word	0x0800237f
 8002344:	0800238d 	.word	0x0800238d
 8002348:	0800239b 	.word	0x0800239b
 800234c:	080023a9 	.word	0x080023a9
 8002350:	080023b7 	.word	0x080023b7
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<0);
 8002354:	4ba3      	ldr	r3, [pc, #652]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4aa2      	ldr	r2, [pc, #648]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800235a:	f023 0307 	bic.w	r3, r3, #7
 800235e:	6113      	str	r3, [r2, #16]
			break;
 8002360:	e030      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<0);
 8002362:	4ba0      	ldr	r3, [pc, #640]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	4a9f      	ldr	r2, [pc, #636]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6113      	str	r3, [r2, #16]
			break;
 800236e:	e029      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<0);
 8002370:	4b9c      	ldr	r3, [pc, #624]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	4a9b      	ldr	r2, [pc, #620]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	6113      	str	r3, [r2, #16]
			break;
 800237c:	e022      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<0);
 800237e:	4b99      	ldr	r3, [pc, #612]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	4a98      	ldr	r2, [pc, #608]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002384:	f043 0303 	orr.w	r3, r3, #3
 8002388:	6113      	str	r3, [r2, #16]
			break;
 800238a:	e01b      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<0);
 800238c:	4b95      	ldr	r3, [pc, #596]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4a94      	ldr	r2, [pc, #592]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6113      	str	r3, [r2, #16]
			break;
 8002398:	e014      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<0);
 800239a:	4b92      	ldr	r3, [pc, #584]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	4a91      	ldr	r2, [pc, #580]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023a0:	f043 0305 	orr.w	r3, r3, #5
 80023a4:	6113      	str	r3, [r2, #16]
			break;
 80023a6:	e00d      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<0);
 80023a8:	4b8e      	ldr	r3, [pc, #568]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4a8d      	ldr	r2, [pc, #564]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023ae:	f043 0306 	orr.w	r3, r3, #6
 80023b2:	6113      	str	r3, [r2, #16]
			break;
 80023b4:	e006      	b.n	80023c4 <adc_set_sampling_and_hold+0xf8>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<0);
 80023b6:	4b8b      	ldr	r3, [pc, #556]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023bc:	f043 0307 	orr.w	r3, r3, #7
 80023c0:	6113      	str	r3, [r2, #16]
			break;
 80023c2:	bf00      	nop
		}
		} break;
 80023c4:	f000 bcd1 	b.w	8002d6a <adc_set_sampling_and_hold+0xa9e>
	}
	case 1:{
		switch(adcConfig->samplingPeriod){
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	789b      	ldrb	r3, [r3, #2]
 80023cc:	2b07      	cmp	r3, #7
 80023ce:	f200 84ce 	bhi.w	8002d6e <adc_set_sampling_and_hold+0xaa2>
 80023d2:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <adc_set_sampling_and_hold+0x10c>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	080023f9 	.word	0x080023f9
 80023dc:	08002407 	.word	0x08002407
 80023e0:	08002415 	.word	0x08002415
 80023e4:	08002423 	.word	0x08002423
 80023e8:	08002431 	.word	0x08002431
 80023ec:	0800243f 	.word	0x0800243f
 80023f0:	0800244d 	.word	0x0800244d
 80023f4:	0800245b 	.word	0x0800245b
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<3);
 80023f8:	4b7a      	ldr	r3, [pc, #488]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	4a79      	ldr	r2, [pc, #484]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80023fe:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002402:	6113      	str	r3, [r2, #16]
			break;
 8002404:	e030      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<3);
 8002406:	4b77      	ldr	r3, [pc, #476]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	4a76      	ldr	r2, [pc, #472]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6113      	str	r3, [r2, #16]
			break;
 8002412:	e029      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<3);
 8002414:	4b73      	ldr	r3, [pc, #460]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a72      	ldr	r2, [pc, #456]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	6113      	str	r3, [r2, #16]
			break;
 8002420:	e022      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<3);
 8002422:	4b70      	ldr	r3, [pc, #448]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4a6f      	ldr	r2, [pc, #444]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002428:	f043 0318 	orr.w	r3, r3, #24
 800242c:	6113      	str	r3, [r2, #16]
			break;
 800242e:	e01b      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<3);
 8002430:	4b6c      	ldr	r3, [pc, #432]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a6b      	ldr	r2, [pc, #428]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002436:	f043 0320 	orr.w	r3, r3, #32
 800243a:	6113      	str	r3, [r2, #16]
			break;
 800243c:	e014      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<3);
 800243e:	4b69      	ldr	r3, [pc, #420]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	4a68      	ldr	r2, [pc, #416]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002444:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002448:	6113      	str	r3, [r2, #16]
			break;
 800244a:	e00d      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<3);
 800244c:	4b65      	ldr	r3, [pc, #404]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4a64      	ldr	r2, [pc, #400]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002452:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002456:	6113      	str	r3, [r2, #16]
			break;
 8002458:	e006      	b.n	8002468 <adc_set_sampling_and_hold+0x19c>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<3);
 800245a:	4b62      	ldr	r3, [pc, #392]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	4a61      	ldr	r2, [pc, #388]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002460:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002464:	6113      	str	r3, [r2, #16]
			break;
 8002466:	bf00      	nop
		}
		} break;
 8002468:	f000 bc81 	b.w	8002d6e <adc_set_sampling_and_hold+0xaa2>
	}
	case 2:{
		switch(adcConfig->samplingPeriod){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	789b      	ldrb	r3, [r3, #2]
 8002470:	2b07      	cmp	r3, #7
 8002472:	f200 847e 	bhi.w	8002d72 <adc_set_sampling_and_hold+0xaa6>
 8002476:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <adc_set_sampling_and_hold+0x1b0>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	0800249d 	.word	0x0800249d
 8002480:	080024ab 	.word	0x080024ab
 8002484:	080024b9 	.word	0x080024b9
 8002488:	080024c7 	.word	0x080024c7
 800248c:	080024d5 	.word	0x080024d5
 8002490:	080024e3 	.word	0x080024e3
 8002494:	080024f1 	.word	0x080024f1
 8002498:	080024ff 	.word	0x080024ff
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<6);
 800249c:	4b51      	ldr	r3, [pc, #324]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4a50      	ldr	r2, [pc, #320]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024a2:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 80024a6:	6113      	str	r3, [r2, #16]
			break;
 80024a8:	e030      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<6);
 80024aa:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	4a4d      	ldr	r2, [pc, #308]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b4:	6113      	str	r3, [r2, #16]
			break;
 80024b6:	e029      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<6);
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	4a49      	ldr	r2, [pc, #292]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c2:	6113      	str	r3, [r2, #16]
			break;
 80024c4:	e022      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<6);
 80024c6:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	4a46      	ldr	r2, [pc, #280]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80024d0:	6113      	str	r3, [r2, #16]
			break;
 80024d2:	e01b      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<6);
 80024d4:	4b43      	ldr	r3, [pc, #268]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	4a42      	ldr	r2, [pc, #264]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	6113      	str	r3, [r2, #16]
			break;
 80024e0:	e014      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<6);
 80024e2:	4b40      	ldr	r3, [pc, #256]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	4a3f      	ldr	r2, [pc, #252]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024e8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80024ec:	6113      	str	r3, [r2, #16]
			break;
 80024ee:	e00d      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<6);
 80024f0:	4b3c      	ldr	r3, [pc, #240]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80024f6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80024fa:	6113      	str	r3, [r2, #16]
			break;
 80024fc:	e006      	b.n	800250c <adc_set_sampling_and_hold+0x240>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<6);
 80024fe:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	4a38      	ldr	r2, [pc, #224]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002504:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8002508:	6113      	str	r3, [r2, #16]
			break;
 800250a:	bf00      	nop
		}
		} break;
 800250c:	f000 bc31 	b.w	8002d72 <adc_set_sampling_and_hold+0xaa6>
	}
	case 3:{
		switch(adcConfig->samplingPeriod){
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	789b      	ldrb	r3, [r3, #2]
 8002514:	2b07      	cmp	r3, #7
 8002516:	f200 842e 	bhi.w	8002d76 <adc_set_sampling_and_hold+0xaaa>
 800251a:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <adc_set_sampling_and_hold+0x254>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002541 	.word	0x08002541
 8002524:	0800254f 	.word	0x0800254f
 8002528:	0800255d 	.word	0x0800255d
 800252c:	0800256b 	.word	0x0800256b
 8002530:	08002579 	.word	0x08002579
 8002534:	08002587 	.word	0x08002587
 8002538:	08002595 	.word	0x08002595
 800253c:	080025a3 	.word	0x080025a3
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<9);
 8002540:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002546:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 800254a:	6113      	str	r3, [r2, #16]
			break;
 800254c:	e030      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<9);
 800254e:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	4a24      	ldr	r2, [pc, #144]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002554:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002558:	6113      	str	r3, [r2, #16]
			break;
 800255a:	e029      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<9);
 800255c:	4b21      	ldr	r3, [pc, #132]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4a20      	ldr	r2, [pc, #128]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002562:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002566:	6113      	str	r3, [r2, #16]
			break;
 8002568:	e022      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<9);
 800256a:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002570:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002574:	6113      	str	r3, [r2, #16]
			break;
 8002576:	e01b      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<9);
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800257e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002582:	6113      	str	r3, [r2, #16]
			break;
 8002584:	e014      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<9);
 8002586:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800258c:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8002590:	6113      	str	r3, [r2, #16]
			break;
 8002592:	e00d      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<9);
 8002594:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 800259a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800259e:	6113      	str	r3, [r2, #16]
			break;
 80025a0:	e006      	b.n	80025b0 <adc_set_sampling_and_hold+0x2e4>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<9);
 80025a2:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	4a0f      	ldr	r2, [pc, #60]	@ (80025e4 <adc_set_sampling_and_hold+0x318>)
 80025a8:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 80025ac:	6113      	str	r3, [r2, #16]
			break;
 80025ae:	bf00      	nop
		}
		} break;
 80025b0:	e3e1      	b.n	8002d76 <adc_set_sampling_and_hold+0xaaa>
	}
	case 4:{
		switch(adcConfig->samplingPeriod){
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	789b      	ldrb	r3, [r3, #2]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	f200 83df 	bhi.w	8002d7a <adc_set_sampling_and_hold+0xaae>
 80025bc:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <adc_set_sampling_and_hold+0x2f8>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	080025f7 	.word	0x080025f7
 80025cc:	08002605 	.word	0x08002605
 80025d0:	08002613 	.word	0x08002613
 80025d4:	08002621 	.word	0x08002621
 80025d8:	0800262f 	.word	0x0800262f
 80025dc:	0800263d 	.word	0x0800263d
 80025e0:	0800264b 	.word	0x0800264b
 80025e4:	40012000 	.word	0x40012000
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<12);
 80025e8:	4ba3      	ldr	r3, [pc, #652]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4aa2      	ldr	r2, [pc, #648]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80025ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025f2:	6113      	str	r3, [r2, #16]
			break;
 80025f4:	e030      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<12);
 80025f6:	4ba0      	ldr	r3, [pc, #640]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	4a9f      	ldr	r2, [pc, #636]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80025fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002600:	6113      	str	r3, [r2, #16]
			break;
 8002602:	e029      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<12);
 8002604:	4b9c      	ldr	r3, [pc, #624]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a9b      	ldr	r2, [pc, #620]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800260a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800260e:	6113      	str	r3, [r2, #16]
			break;
 8002610:	e022      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<12);
 8002612:	4b99      	ldr	r3, [pc, #612]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	4a98      	ldr	r2, [pc, #608]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002618:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800261c:	6113      	str	r3, [r2, #16]
			break;
 800261e:	e01b      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<12);
 8002620:	4b95      	ldr	r3, [pc, #596]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4a94      	ldr	r2, [pc, #592]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262a:	6113      	str	r3, [r2, #16]
			break;
 800262c:	e014      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<12);
 800262e:	4b92      	ldr	r3, [pc, #584]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4a91      	ldr	r2, [pc, #580]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002634:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8002638:	6113      	str	r3, [r2, #16]
			break;
 800263a:	e00d      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<12);
 800263c:	4b8e      	ldr	r3, [pc, #568]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	4a8d      	ldr	r2, [pc, #564]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002642:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002646:	6113      	str	r3, [r2, #16]
			break;
 8002648:	e006      	b.n	8002658 <adc_set_sampling_and_hold+0x38c>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<12);
 800264a:	4b8b      	ldr	r3, [pc, #556]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4a8a      	ldr	r2, [pc, #552]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002650:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8002654:	6113      	str	r3, [r2, #16]
			break;
 8002656:	bf00      	nop
		}
		} break;
 8002658:	e38f      	b.n	8002d7a <adc_set_sampling_and_hold+0xaae>
	}
	case 5:{
		switch(adcConfig->samplingPeriod){
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	789b      	ldrb	r3, [r3, #2]
 800265e:	2b07      	cmp	r3, #7
 8002660:	f200 838d 	bhi.w	8002d7e <adc_set_sampling_and_hold+0xab2>
 8002664:	a201      	add	r2, pc, #4	@ (adr r2, 800266c <adc_set_sampling_and_hold+0x3a0>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	0800268d 	.word	0x0800268d
 8002670:	0800269b 	.word	0x0800269b
 8002674:	080026a9 	.word	0x080026a9
 8002678:	080026b7 	.word	0x080026b7
 800267c:	080026c5 	.word	0x080026c5
 8002680:	080026d3 	.word	0x080026d3
 8002684:	080026e1 	.word	0x080026e1
 8002688:	080026ef 	.word	0x080026ef
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<15);
 800268c:	4b7a      	ldr	r3, [pc, #488]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4a79      	ldr	r2, [pc, #484]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002692:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8002696:	6113      	str	r3, [r2, #16]
			break;
 8002698:	e030      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<15);
 800269a:	4b77      	ldr	r3, [pc, #476]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	4a76      	ldr	r2, [pc, #472]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a4:	6113      	str	r3, [r2, #16]
			break;
 80026a6:	e029      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<15);
 80026a8:	4b73      	ldr	r3, [pc, #460]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a72      	ldr	r2, [pc, #456]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b2:	6113      	str	r3, [r2, #16]
			break;
 80026b4:	e022      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<15);
 80026b6:	4b70      	ldr	r3, [pc, #448]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026bc:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
 80026c0:	6113      	str	r3, [r2, #16]
			break;
 80026c2:	e01b      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<15);
 80026c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ce:	6113      	str	r3, [r2, #16]
			break;
 80026d0:	e014      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<15);
 80026d2:	4b69      	ldr	r3, [pc, #420]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	4a68      	ldr	r2, [pc, #416]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026d8:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 80026dc:	6113      	str	r3, [r2, #16]
			break;
 80026de:	e00d      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<15);
 80026e0:	4b65      	ldr	r3, [pc, #404]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4a64      	ldr	r2, [pc, #400]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026e6:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80026ea:	6113      	str	r3, [r2, #16]
			break;
 80026ec:	e006      	b.n	80026fc <adc_set_sampling_and_hold+0x430>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<15);
 80026ee:	4b62      	ldr	r3, [pc, #392]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4a61      	ldr	r2, [pc, #388]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80026f4:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 80026f8:	6113      	str	r3, [r2, #16]
			break;
 80026fa:	bf00      	nop
		}
		} break;
 80026fc:	e33f      	b.n	8002d7e <adc_set_sampling_and_hold+0xab2>
	}
	case 6:{
		switch(adcConfig->samplingPeriod){
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	789b      	ldrb	r3, [r3, #2]
 8002702:	2b07      	cmp	r3, #7
 8002704:	f200 833d 	bhi.w	8002d82 <adc_set_sampling_and_hold+0xab6>
 8002708:	a201      	add	r2, pc, #4	@ (adr r2, 8002710 <adc_set_sampling_and_hold+0x444>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002731 	.word	0x08002731
 8002714:	0800273f 	.word	0x0800273f
 8002718:	0800274d 	.word	0x0800274d
 800271c:	0800275b 	.word	0x0800275b
 8002720:	08002769 	.word	0x08002769
 8002724:	08002777 	.word	0x08002777
 8002728:	08002785 	.word	0x08002785
 800272c:	08002793 	.word	0x08002793
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<18);
 8002730:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	4a50      	ldr	r2, [pc, #320]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002736:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800273a:	6113      	str	r3, [r2, #16]
			break;
 800273c:	e030      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<18);
 800273e:	4b4e      	ldr	r3, [pc, #312]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	4a4d      	ldr	r2, [pc, #308]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002748:	6113      	str	r3, [r2, #16]
			break;
 800274a:	e029      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<18);
 800274c:	4b4a      	ldr	r3, [pc, #296]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	4a49      	ldr	r2, [pc, #292]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002752:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002756:	6113      	str	r3, [r2, #16]
			break;
 8002758:	e022      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<18);
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4a46      	ldr	r2, [pc, #280]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002760:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002764:	6113      	str	r3, [r2, #16]
			break;
 8002766:	e01b      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<18);
 8002768:	4b43      	ldr	r3, [pc, #268]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4a42      	ldr	r2, [pc, #264]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002772:	6113      	str	r3, [r2, #16]
			break;
 8002774:	e014      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<18);
 8002776:	4b40      	ldr	r3, [pc, #256]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	4a3f      	ldr	r2, [pc, #252]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800277c:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8002780:	6113      	str	r3, [r2, #16]
			break;
 8002782:	e00d      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<18);
 8002784:	4b3c      	ldr	r3, [pc, #240]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	4a3b      	ldr	r2, [pc, #236]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800278a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800278e:	6113      	str	r3, [r2, #16]
			break;
 8002790:	e006      	b.n	80027a0 <adc_set_sampling_and_hold+0x4d4>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<18);
 8002792:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	4a38      	ldr	r2, [pc, #224]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002798:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800279c:	6113      	str	r3, [r2, #16]
			break;
 800279e:	bf00      	nop
		}
		} break;
 80027a0:	e2ef      	b.n	8002d82 <adc_set_sampling_and_hold+0xab6>
	}
	case 7:{
		switch(adcConfig->samplingPeriod){
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	789b      	ldrb	r3, [r3, #2]
 80027a6:	2b07      	cmp	r3, #7
 80027a8:	f200 82ed 	bhi.w	8002d86 <adc_set_sampling_and_hold+0xaba>
 80027ac:	a201      	add	r2, pc, #4	@ (adr r2, 80027b4 <adc_set_sampling_and_hold+0x4e8>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027d5 	.word	0x080027d5
 80027b8:	080027e3 	.word	0x080027e3
 80027bc:	080027f1 	.word	0x080027f1
 80027c0:	080027ff 	.word	0x080027ff
 80027c4:	0800280d 	.word	0x0800280d
 80027c8:	0800281b 	.word	0x0800281b
 80027cc:	08002829 	.word	0x08002829
 80027d0:	08002837 	.word	0x08002837
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<21);
 80027d4:	4b28      	ldr	r3, [pc, #160]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	4a27      	ldr	r2, [pc, #156]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80027da:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80027de:	6113      	str	r3, [r2, #16]
			break;
 80027e0:	e030      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<21);
 80027e2:	4b25      	ldr	r3, [pc, #148]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a24      	ldr	r2, [pc, #144]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80027e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ec:	6113      	str	r3, [r2, #16]
			break;
 80027ee:	e029      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<21);
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 80027f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027fa:	6113      	str	r3, [r2, #16]
			break;
 80027fc:	e022      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<21);
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	4a1d      	ldr	r2, [pc, #116]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002804:	f443 03c0 	orr.w	r3, r3, #6291456	@ 0x600000
 8002808:	6113      	str	r3, [r2, #16]
			break;
 800280a:	e01b      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<21);
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4a19      	ldr	r2, [pc, #100]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002812:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002816:	6113      	str	r3, [r2, #16]
			break;
 8002818:	e014      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<21);
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002820:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8002824:	6113      	str	r3, [r2, #16]
			break;
 8002826:	e00d      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<21);
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800282e:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002832:	6113      	str	r3, [r2, #16]
			break;
 8002834:	e006      	b.n	8002844 <adc_set_sampling_and_hold+0x578>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<21);
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <adc_set_sampling_and_hold+0x5ac>)
 800283c:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
 8002840:	6113      	str	r3, [r2, #16]
			break;
 8002842:	bf00      	nop
		}
		} break;
 8002844:	e29f      	b.n	8002d86 <adc_set_sampling_and_hold+0xaba>
	}
	case 8:{
		switch(adcConfig->samplingPeriod){
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	789b      	ldrb	r3, [r3, #2]
 800284a:	2b07      	cmp	r3, #7
 800284c:	f200 829d 	bhi.w	8002d8a <adc_set_sampling_and_hold+0xabe>
 8002850:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <adc_set_sampling_and_hold+0x58c>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	0800287d 	.word	0x0800287d
 800285c:	0800288b 	.word	0x0800288b
 8002860:	08002899 	.word	0x08002899
 8002864:	080028a7 	.word	0x080028a7
 8002868:	080028b5 	.word	0x080028b5
 800286c:	080028c3 	.word	0x080028c3
 8002870:	080028d1 	.word	0x080028d1
 8002874:	080028df 	.word	0x080028df
 8002878:	40012000 	.word	0x40012000
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<24);
 800287c:	4ba3      	ldr	r3, [pc, #652]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4aa2      	ldr	r2, [pc, #648]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002882:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002886:	6113      	str	r3, [r2, #16]
			break;
 8002888:	e030      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<24);
 800288a:	4ba0      	ldr	r3, [pc, #640]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a9f      	ldr	r2, [pc, #636]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002894:	6113      	str	r3, [r2, #16]
			break;
 8002896:	e029      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<24);
 8002898:	4b9c      	ldr	r3, [pc, #624]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	4a9b      	ldr	r2, [pc, #620]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800289e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	6113      	str	r3, [r2, #16]
			break;
 80028a4:	e022      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<24);
 80028a6:	4b99      	ldr	r3, [pc, #612]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	4a98      	ldr	r2, [pc, #608]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028ac:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80028b0:	6113      	str	r3, [r2, #16]
			break;
 80028b2:	e01b      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<24);
 80028b4:	4b95      	ldr	r3, [pc, #596]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4a94      	ldr	r2, [pc, #592]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028be:	6113      	str	r3, [r2, #16]
			break;
 80028c0:	e014      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<24);
 80028c2:	4b92      	ldr	r3, [pc, #584]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	4a91      	ldr	r2, [pc, #580]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028c8:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 80028cc:	6113      	str	r3, [r2, #16]
			break;
 80028ce:	e00d      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<24);
 80028d0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	4a8d      	ldr	r2, [pc, #564]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028d6:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80028da:	6113      	str	r3, [r2, #16]
			break;
 80028dc:	e006      	b.n	80028ec <adc_set_sampling_and_hold+0x620>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<24);
 80028de:	4b8b      	ldr	r3, [pc, #556]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4a8a      	ldr	r2, [pc, #552]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80028e4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028e8:	6113      	str	r3, [r2, #16]
			break;
 80028ea:	bf00      	nop
		}
		} break;
 80028ec:	e24d      	b.n	8002d8a <adc_set_sampling_and_hold+0xabe>
	}
	case 9:{
		switch(adcConfig->samplingPeriod){
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	789b      	ldrb	r3, [r3, #2]
 80028f2:	2b07      	cmp	r3, #7
 80028f4:	f200 824b 	bhi.w	8002d8e <adc_set_sampling_and_hold+0xac2>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <adc_set_sampling_and_hold+0x634>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002921 	.word	0x08002921
 8002904:	0800292f 	.word	0x0800292f
 8002908:	0800293d 	.word	0x0800293d
 800290c:	0800294b 	.word	0x0800294b
 8002910:	08002959 	.word	0x08002959
 8002914:	08002967 	.word	0x08002967
 8002918:	08002975 	.word	0x08002975
 800291c:	08002983 	.word	0x08002983
		case 0:{
			ADC1->SMPR2 &= ~(0b111<<27);
 8002920:	4b7a      	ldr	r3, [pc, #488]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a79      	ldr	r2, [pc, #484]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002926:	f023 5360 	bic.w	r3, r3, #939524096	@ 0x38000000
 800292a:	6113      	str	r3, [r2, #16]
			break;
 800292c:	e030      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 1:{
			ADC1->SMPR2 |= (0b1<<27);
 800292e:	4b77      	ldr	r3, [pc, #476]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	4a76      	ldr	r2, [pc, #472]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002934:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002938:	6113      	str	r3, [r2, #16]
			break;
 800293a:	e029      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 2:{
			ADC1->SMPR2 |= (0b010<<27);
 800293c:	4b73      	ldr	r3, [pc, #460]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4a72      	ldr	r2, [pc, #456]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002946:	6113      	str	r3, [r2, #16]
			break;
 8002948:	e022      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 3:{
			ADC1->SMPR2 |= (0b011<<27);
 800294a:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	4a6f      	ldr	r2, [pc, #444]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002950:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 8002954:	6113      	str	r3, [r2, #16]
			break;
 8002956:	e01b      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 4:{
			ADC1->SMPR2 |= (0b100<<27);
 8002958:	4b6c      	ldr	r3, [pc, #432]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800295e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002962:	6113      	str	r3, [r2, #16]
			break;
 8002964:	e014      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 5:{
			ADC1->SMPR2 |= (0b101<<27);
 8002966:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	4a68      	ldr	r2, [pc, #416]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800296c:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 8002970:	6113      	str	r3, [r2, #16]
			break;
 8002972:	e00d      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 6:{
			ADC1->SMPR2 |= (0b110<<27);
 8002974:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4a64      	ldr	r2, [pc, #400]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 800297a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800297e:	6113      	str	r3, [r2, #16]
			break;
 8002980:	e006      	b.n	8002990 <adc_set_sampling_and_hold+0x6c4>
		}
		case 7:{
			ADC1->SMPR2 |= (0b111<<27);
 8002982:	4b62      	ldr	r3, [pc, #392]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	4a61      	ldr	r2, [pc, #388]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002988:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800298c:	6113      	str	r3, [r2, #16]
			break;
 800298e:	bf00      	nop
		}
		} break;
 8002990:	e1fd      	b.n	8002d8e <adc_set_sampling_and_hold+0xac2>
	}
	case 10:{
		switch(adcConfig->samplingPeriod){
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	789b      	ldrb	r3, [r3, #2]
 8002996:	2b07      	cmp	r3, #7
 8002998:	f200 81fb 	bhi.w	8002d92 <adc_set_sampling_and_hold+0xac6>
 800299c:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <adc_set_sampling_and_hold+0x6d8>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029c5 	.word	0x080029c5
 80029a8:	080029d3 	.word	0x080029d3
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	080029ef 	.word	0x080029ef
 80029b4:	080029fd 	.word	0x080029fd
 80029b8:	08002a0b 	.word	0x08002a0b
 80029bc:	08002a19 	.word	0x08002a19
 80029c0:	08002a27 	.word	0x08002a27
		case 0:{
			ADC1->SMPR1 &= ~(0b111<<0);
 80029c4:	4b51      	ldr	r3, [pc, #324]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	60d3      	str	r3, [r2, #12]
			break;
 80029d0:	e030      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 1:{
			ADC1->SMPR1 |= (0b1<<0);
 80029d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	60d3      	str	r3, [r2, #12]
			break;
 80029de:	e029      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 2:{
			ADC1->SMPR1 |= (0b010<<0);
 80029e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a49      	ldr	r2, [pc, #292]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
			break;
 80029ec:	e022      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 3:{
			ADC1->SMPR1 |= (0b011<<0);
 80029ee:	4b47      	ldr	r3, [pc, #284]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029f4:	f043 0303 	orr.w	r3, r3, #3
 80029f8:	60d3      	str	r3, [r2, #12]
			break;
 80029fa:	e01b      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 4:{
			ADC1->SMPR1 |= (0b100<<0);
 80029fc:	4b43      	ldr	r3, [pc, #268]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a42      	ldr	r2, [pc, #264]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	60d3      	str	r3, [r2, #12]
			break;
 8002a08:	e014      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 5:{
			ADC1->SMPR1 |= (0b101<<0);
 8002a0a:	4b40      	ldr	r3, [pc, #256]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a10:	f043 0305 	orr.w	r3, r3, #5
 8002a14:	60d3      	str	r3, [r2, #12]
			break;
 8002a16:	e00d      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 6:{
			ADC1->SMPR1 |= (0b110<<0);
 8002a18:	4b3c      	ldr	r3, [pc, #240]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a1e:	f043 0306 	orr.w	r3, r3, #6
 8002a22:	60d3      	str	r3, [r2, #12]
			break;
 8002a24:	e006      	b.n	8002a34 <adc_set_sampling_and_hold+0x768>
		}
		case 7:{
			ADC1->SMPR1 |= (0b111<<0);
 8002a26:	4b39      	ldr	r3, [pc, #228]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a38      	ldr	r2, [pc, #224]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	60d3      	str	r3, [r2, #12]
			break;
 8002a32:	bf00      	nop
		}
		} break;
 8002a34:	e1ad      	b.n	8002d92 <adc_set_sampling_and_hold+0xac6>
	}
	case 11:{
		switch(adcConfig->samplingPeriod){
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	789b      	ldrb	r3, [r3, #2]
 8002a3a:	2b07      	cmp	r3, #7
 8002a3c:	f200 81ae 	bhi.w	8002d9c <adc_set_sampling_and_hold+0xad0>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <adc_set_sampling_and_hold+0x77c>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a69 	.word	0x08002a69
 8002a4c:	08002a77 	.word	0x08002a77
 8002a50:	08002a85 	.word	0x08002a85
 8002a54:	08002a93 	.word	0x08002a93
 8002a58:	08002aa1 	.word	0x08002aa1
 8002a5c:	08002aaf 	.word	0x08002aaf
 8002a60:	08002abd 	.word	0x08002abd
 8002a64:	08002acb 	.word	0x08002acb
		case 0:{
			ADC1->SMPR1 &= ~(0b111<<3);
 8002a68:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a27      	ldr	r2, [pc, #156]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a6e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002a72:	60d3      	str	r3, [r2, #12]
			break;
 8002a74:	e030      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 1:{
			ADC1->SMPR1 |= (0b1<<3);
 8002a76:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	60d3      	str	r3, [r2, #12]
			break;
 8002a82:	e029      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 2:{
			ADC1->SMPR1 |= (0b010<<3);
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a20      	ldr	r2, [pc, #128]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	60d3      	str	r3, [r2, #12]
			break;
 8002a90:	e022      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 3:{
			ADC1->SMPR1 |= (0b011<<3);
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002a98:	f043 0318 	orr.w	r3, r3, #24
 8002a9c:	60d3      	str	r3, [r2, #12]
			break;
 8002a9e:	e01b      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 4:{
			ADC1->SMPR1 |= (0b100<<3);
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	60d3      	str	r3, [r2, #12]
			break;
 8002aac:	e014      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 5:{
			ADC1->SMPR1 |= (0b101<<3);
 8002aae:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002ab4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002ab8:	60d3      	str	r3, [r2, #12]
			break;
 8002aba:	e00d      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 6:{
			ADC1->SMPR1 |= (0b110<<3);
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002ac2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002ac6:	60d3      	str	r3, [r2, #12]
			break;
 8002ac8:	e006      	b.n	8002ad8 <adc_set_sampling_and_hold+0x80c>
		}
		case 7:{
			ADC1->SMPR1 |= (0b111<<3);
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <adc_set_sampling_and_hold+0x840>)
 8002ad0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002ad4:	60d3      	str	r3, [r2, #12]
			break;
 8002ad6:	bf00      	nop
		}
		} break;
 8002ad8:	e160      	b.n	8002d9c <adc_set_sampling_and_hold+0xad0>
	}
	case 12:{
		switch(adcConfig->samplingPeriod){
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	789b      	ldrb	r3, [r3, #2]
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	f200 815e 	bhi.w	8002da0 <adc_set_sampling_and_hold+0xad4>
 8002ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aec <adc_set_sampling_and_hold+0x820>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002b11 	.word	0x08002b11
 8002af0:	08002b1f 	.word	0x08002b1f
 8002af4:	08002b2d 	.word	0x08002b2d
 8002af8:	08002b3b 	.word	0x08002b3b
 8002afc:	08002b49 	.word	0x08002b49
 8002b00:	08002b57 	.word	0x08002b57
 8002b04:	08002b65 	.word	0x08002b65
 8002b08:	08002b73 	.word	0x08002b73
 8002b0c:	40012000 	.word	0x40012000
		case 0:{
			ADC1->SMPR1 &= ~(0b111<<6);
 8002b10:	4ba1      	ldr	r3, [pc, #644]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4aa0      	ldr	r2, [pc, #640]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b16:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8002b1a:	60d3      	str	r3, [r2, #12]
			break;
 8002b1c:	e030      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 1:{
			ADC1->SMPR1 |= (0b1<<6);
 8002b1e:	4b9e      	ldr	r3, [pc, #632]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a9d      	ldr	r2, [pc, #628]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b28:	60d3      	str	r3, [r2, #12]
			break;
 8002b2a:	e029      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 2:{
			ADC1->SMPR1 |= (0b010<<6);
 8002b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a99      	ldr	r2, [pc, #612]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b36:	60d3      	str	r3, [r2, #12]
			break;
 8002b38:	e022      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 3:{
			ADC1->SMPR1 |= (0b011<<6);
 8002b3a:	4b97      	ldr	r3, [pc, #604]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a96      	ldr	r2, [pc, #600]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b44:	60d3      	str	r3, [r2, #12]
			break;
 8002b46:	e01b      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 4:{
			ADC1->SMPR1 |= (0b100<<6);
 8002b48:	4b93      	ldr	r3, [pc, #588]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a92      	ldr	r2, [pc, #584]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b52:	60d3      	str	r3, [r2, #12]
			break;
 8002b54:	e014      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 5:{
			ADC1->SMPR1 |= (0b101<<6);
 8002b56:	4b90      	ldr	r3, [pc, #576]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a8f      	ldr	r2, [pc, #572]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b5c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002b60:	60d3      	str	r3, [r2, #12]
			break;
 8002b62:	e00d      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 6:{
			ADC1->SMPR1 |= (0b110<<6);
 8002b64:	4b8c      	ldr	r3, [pc, #560]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a8b      	ldr	r2, [pc, #556]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b6a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8002b6e:	60d3      	str	r3, [r2, #12]
			break;
 8002b70:	e006      	b.n	8002b80 <adc_set_sampling_and_hold+0x8b4>
		}
		case 7:{
			ADC1->SMPR1 |= (0b111<<6);
 8002b72:	4b89      	ldr	r3, [pc, #548]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a88      	ldr	r2, [pc, #544]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002b78:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8002b7c:	60d3      	str	r3, [r2, #12]
			break;
 8002b7e:	bf00      	nop
		}
		} break;
 8002b80:	e10e      	b.n	8002da0 <adc_set_sampling_and_hold+0xad4>
	}
	case 13:{
		switch(adcConfig->samplingPeriod){
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	789b      	ldrb	r3, [r3, #2]
 8002b86:	2b07      	cmp	r3, #7
 8002b88:	f200 810c 	bhi.w	8002da4 <adc_set_sampling_and_hold+0xad8>
 8002b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <adc_set_sampling_and_hold+0x8c8>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002bb5 	.word	0x08002bb5
 8002b98:	08002bc3 	.word	0x08002bc3
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002bdf 	.word	0x08002bdf
 8002ba4:	08002bed 	.word	0x08002bed
 8002ba8:	08002bfb 	.word	0x08002bfb
 8002bac:	08002c09 	.word	0x08002c09
 8002bb0:	08002c17 	.word	0x08002c17
		case 0:{
			ADC1->SMPR1 &= ~(0b111<<9);
 8002bb4:	4b78      	ldr	r3, [pc, #480]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a77      	ldr	r2, [pc, #476]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bba:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 8002bbe:	60d3      	str	r3, [r2, #12]
			break;
 8002bc0:	e030      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 1:{
			ADC1->SMPR1 |= (0b1<<9);
 8002bc2:	4b75      	ldr	r3, [pc, #468]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a74      	ldr	r2, [pc, #464]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bcc:	60d3      	str	r3, [r2, #12]
			break;
 8002bce:	e029      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 2:{
			ADC1->SMPR1 |= (0b010<<9);
 8002bd0:	4b71      	ldr	r3, [pc, #452]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a70      	ldr	r2, [pc, #448]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bda:	60d3      	str	r3, [r2, #12]
			break;
 8002bdc:	e022      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 3:{
			ADC1->SMPR1 |= (0b011<<9);
 8002bde:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a6d      	ldr	r2, [pc, #436]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002be4:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002be8:	60d3      	str	r3, [r2, #12]
			break;
 8002bea:	e01b      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 4:{
			ADC1->SMPR1 |= (0b100<<9);
 8002bec:	4b6a      	ldr	r3, [pc, #424]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a69      	ldr	r2, [pc, #420]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bf2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bf6:	60d3      	str	r3, [r2, #12]
			break;
 8002bf8:	e014      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 5:{
			ADC1->SMPR1 |= (0b101<<9);
 8002bfa:	4b67      	ldr	r3, [pc, #412]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a66      	ldr	r2, [pc, #408]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c00:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8002c04:	60d3      	str	r3, [r2, #12]
			break;
 8002c06:	e00d      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 6:{
			ADC1->SMPR1 |= (0b110<<9);
 8002c08:	4b63      	ldr	r3, [pc, #396]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a62      	ldr	r2, [pc, #392]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c0e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002c12:	60d3      	str	r3, [r2, #12]
			break;
 8002c14:	e006      	b.n	8002c24 <adc_set_sampling_and_hold+0x958>
		}
		case 7:{
			ADC1->SMPR1 |= (0b111<<9);
 8002c16:	4b60      	ldr	r3, [pc, #384]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c1c:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8002c20:	60d3      	str	r3, [r2, #12]
			break;
 8002c22:	bf00      	nop
		}
		} break;
 8002c24:	e0be      	b.n	8002da4 <adc_set_sampling_and_hold+0xad8>
	}
	case 14:{
		switch(adcConfig->samplingPeriod){
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	789b      	ldrb	r3, [r3, #2]
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	f200 80bc 	bhi.w	8002da8 <adc_set_sampling_and_hold+0xadc>
 8002c30:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <adc_set_sampling_and_hold+0x96c>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c59 	.word	0x08002c59
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002c83 	.word	0x08002c83
 8002c48:	08002c91 	.word	0x08002c91
 8002c4c:	08002c9f 	.word	0x08002c9f
 8002c50:	08002cad 	.word	0x08002cad
 8002c54:	08002cbb 	.word	0x08002cbb
		case 0:{
			ADC1->SMPR1 &= ~(0b111<<12);
 8002c58:	4b4f      	ldr	r3, [pc, #316]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c62:	60d3      	str	r3, [r2, #12]
			break;
 8002c64:	e030      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 1:{
			ADC1->SMPR1 |= (0b1<<12);
 8002c66:	4b4c      	ldr	r3, [pc, #304]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c70:	60d3      	str	r3, [r2, #12]
			break;
 8002c72:	e029      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 2:{
			ADC1->SMPR1 |= (0b010<<12);
 8002c74:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a47      	ldr	r2, [pc, #284]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c7e:	60d3      	str	r3, [r2, #12]
			break;
 8002c80:	e022      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 3:{
			ADC1->SMPR1 |= (0b011<<12);
 8002c82:	4b45      	ldr	r3, [pc, #276]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	4a44      	ldr	r2, [pc, #272]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c88:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002c8c:	60d3      	str	r3, [r2, #12]
			break;
 8002c8e:	e01b      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 4:{
			ADC1->SMPR1 |= (0b100<<12);
 8002c90:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a40      	ldr	r2, [pc, #256]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c9a:	60d3      	str	r3, [r2, #12]
			break;
 8002c9c:	e014      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 5:{
			ADC1->SMPR1 |= (0b101<<12);
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002ca4:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8002ca8:	60d3      	str	r3, [r2, #12]
			break;
 8002caa:	e00d      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 6:{
			ADC1->SMPR1 |= (0b110<<12);
 8002cac:	4b3a      	ldr	r3, [pc, #232]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a39      	ldr	r2, [pc, #228]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002cb2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002cb6:	60d3      	str	r3, [r2, #12]
			break;
 8002cb8:	e006      	b.n	8002cc8 <adc_set_sampling_and_hold+0x9fc>
		}
		case 7:{
			ADC1->SMPR1 |= (0b111<<12);
 8002cba:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a36      	ldr	r2, [pc, #216]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002cc0:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8002cc4:	60d3      	str	r3, [r2, #12]
			break;
 8002cc6:	bf00      	nop
		}
		} break;
 8002cc8:	e06e      	b.n	8002da8 <adc_set_sampling_and_hold+0xadc>
	}
	case 15:{
		switch(adcConfig->samplingPeriod){
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	789b      	ldrb	r3, [r3, #2]
 8002cce:	2b07      	cmp	r3, #7
 8002cd0:	d86c      	bhi.n	8002dac <adc_set_sampling_and_hold+0xae0>
 8002cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <adc_set_sampling_and_hold+0xa0c>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002cf9 	.word	0x08002cf9
 8002cdc:	08002d07 	.word	0x08002d07
 8002ce0:	08002d15 	.word	0x08002d15
 8002ce4:	08002d23 	.word	0x08002d23
 8002ce8:	08002d31 	.word	0x08002d31
 8002cec:	08002d3f 	.word	0x08002d3f
 8002cf0:	08002d4d 	.word	0x08002d4d
 8002cf4:	08002d5b 	.word	0x08002d5b
		case 0:{
			ADC1->SMPR1 &= ~(0b111<<15);
 8002cf8:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a26      	ldr	r2, [pc, #152]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002cfe:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8002d02:	60d3      	str	r3, [r2, #12]
			break;
 8002d04:	e030      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 1:{
			ADC1->SMPR1 |= (0b1<<15);
 8002d06:	4b24      	ldr	r3, [pc, #144]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d10:	60d3      	str	r3, [r2, #12]
			break;
 8002d12:	e029      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 2:{
			ADC1->SMPR1 |= (0b010<<15);
 8002d14:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d1e:	60d3      	str	r3, [r2, #12]
			break;
 8002d20:	e022      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 3:{
			ADC1->SMPR1 |= (0b011<<15);
 8002d22:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d28:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
 8002d2c:	60d3      	str	r3, [r2, #12]
			break;
 8002d2e:	e01b      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 4:{
			ADC1->SMPR1 |= (0b100<<15);
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3a:	60d3      	str	r3, [r2, #12]
			break;
 8002d3c:	e014      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 5:{
			ADC1->SMPR1 |= (0b101<<15);
 8002d3e:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d44:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8002d48:	60d3      	str	r3, [r2, #12]
			break;
 8002d4a:	e00d      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 6:{
			ADC1->SMPR1 |= (0b110<<15);
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a11      	ldr	r2, [pc, #68]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d52:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002d56:	60d3      	str	r3, [r2, #12]
			break;
 8002d58:	e006      	b.n	8002d68 <adc_set_sampling_and_hold+0xa9c>
		}
		case 7:{
			ADC1->SMPR1 |= (0b111<<15);
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d98 <adc_set_sampling_and_hold+0xacc>)
 8002d60:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 8002d64:	60d3      	str	r3, [r2, #12]
			break;
 8002d66:	bf00      	nop
		}
		} break;
 8002d68:	e020      	b.n	8002dac <adc_set_sampling_and_hold+0xae0>
		} break;
 8002d6a:	bf00      	nop
 8002d6c:	e01f      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d6e:	bf00      	nop
 8002d70:	e01d      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d72:	bf00      	nop
 8002d74:	e01b      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d76:	bf00      	nop
 8002d78:	e019      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d7a:	bf00      	nop
 8002d7c:	e017      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d7e:	bf00      	nop
 8002d80:	e015      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d82:	bf00      	nop
 8002d84:	e013      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d86:	bf00      	nop
 8002d88:	e011      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d8a:	bf00      	nop
 8002d8c:	e00f      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d8e:	bf00      	nop
 8002d90:	e00d      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002d92:	bf00      	nop
 8002d94:	e00b      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
 8002d96:	bf00      	nop
 8002d98:	40012000 	.word	0x40012000
		} break;
 8002d9c:	bf00      	nop
 8002d9e:	e006      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002da0:	bf00      	nop
 8002da2:	e004      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002da4:	bf00      	nop
 8002da6:	e002      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <adc_set_sampling_and_hold+0xae2>
		} break;
 8002dac:	bf00      	nop


	/*	Configura el numero de elementos en la secuencia (solo un elemento)
	 * 	Configura cual es el canal adquiere la señal ADC
	 */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <adc_one_channel_sequence>:
static void adc_one_channel_sequence(ADC_Config_t *adcConfig){
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	ADC1->SQR1 &= ~(0b1111 << 20);
 8002dc0:	4b54      	ldr	r3, [pc, #336]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	4a53      	ldr	r2, [pc, #332]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002dc6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 &= ~(0b11111 << 0);
 8002dcc:	4b51      	ldr	r3, [pc, #324]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd0:	4a50      	ldr	r2, [pc, #320]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002dd2:	f023 031f 	bic.w	r3, r3, #31
 8002dd6:	6353      	str	r3, [r2, #52]	@ 0x34
	switch(adcConfig->channel){
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	f200 8093 	bhi.w	8002f08 <adc_one_channel_sequence+0x150>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <adc_one_channel_sequence+0x30>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e29 	.word	0x08002e29
 8002dec:	08002e37 	.word	0x08002e37
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e53 	.word	0x08002e53
 8002df8:	08002e61 	.word	0x08002e61
 8002dfc:	08002e6f 	.word	0x08002e6f
 8002e00:	08002e7d 	.word	0x08002e7d
 8002e04:	08002e8b 	.word	0x08002e8b
 8002e08:	08002e99 	.word	0x08002e99
 8002e0c:	08002ea7 	.word	0x08002ea7
 8002e10:	08002eb5 	.word	0x08002eb5
 8002e14:	08002ec3 	.word	0x08002ec3
 8002e18:	08002ed1 	.word	0x08002ed1
 8002e1c:	08002edf 	.word	0x08002edf
 8002e20:	08002eed 	.word	0x08002eed
 8002e24:	08002efb 	.word	0x08002efb
	case 0:{
		ADC1->SQR3 &= ~(0b11111);
 8002e28:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	4a39      	ldr	r2, [pc, #228]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e2e:	f023 031f 	bic.w	r3, r3, #31
 8002e32:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e34:	e068      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 1:{
		ADC1->SQR3 |= (0b1);
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	4a36      	ldr	r2, [pc, #216]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e42:	e061      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 2:{
		ADC1->SQR3 |= (2);
 8002e44:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e50:	e05a      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 3:{
		ADC1->SQR3 |= (3);
 8002e52:	4b30      	ldr	r3, [pc, #192]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e56:	4a2f      	ldr	r2, [pc, #188]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e58:	f043 0303 	orr.w	r3, r3, #3
 8002e5c:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e5e:	e053      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 4:{
		ADC1->SQR3 |= (4);
 8002e60:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e64:	4a2b      	ldr	r2, [pc, #172]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e6c:	e04c      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 5:{
		ADC1->SQR3 |= (5);
 8002e6e:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e72:	4a28      	ldr	r2, [pc, #160]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e74:	f043 0305 	orr.w	r3, r3, #5
 8002e78:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e7a:	e045      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 6:{
		ADC1->SQR3 |= (6);
 8002e7c:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e82:	f043 0306 	orr.w	r3, r3, #6
 8002e86:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e88:	e03e      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 7:{
		ADC1->SQR3 |= (7);
 8002e8a:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	4a21      	ldr	r2, [pc, #132]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e90:	f043 0307 	orr.w	r3, r3, #7
 8002e94:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002e96:	e037      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 8:{
		ADC1->SQR3 |= (8);
 8002e98:	4b1e      	ldr	r3, [pc, #120]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002e9e:	f043 0308 	orr.w	r3, r3, #8
 8002ea2:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002ea4:	e030      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 9:{
		ADC1->SQR3 |= (9);
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002eac:	f043 0309 	orr.w	r3, r3, #9
 8002eb0:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002eb2:	e029      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 10:{
		ADC1->SQR3 |= (10);
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002eba:	f043 030a 	orr.w	r3, r3, #10
 8002ebe:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002ec0:	e022      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 11:{
		ADC1->SQR3 |= (11);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec6:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ec8:	f043 030b 	orr.w	r3, r3, #11
 8002ecc:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002ece:	e01b      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 12:{
		ADC1->SQR3 |= (12);
 8002ed0:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ed6:	f043 030c 	orr.w	r3, r3, #12
 8002eda:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002edc:	e014      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 13:{
		ADC1->SQR3 |= (13);
 8002ede:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ee4:	f043 030d 	orr.w	r3, r3, #13
 8002ee8:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002eea:	e00d      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 14:{
		ADC1->SQR3 |= (14);
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef0:	4a08      	ldr	r2, [pc, #32]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002ef2:	f043 030e 	orr.w	r3, r3, #14
 8002ef6:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002ef8:	e006      	b.n	8002f08 <adc_one_channel_sequence+0x150>
	}
	case 15:{
		ADC1->SQR3 |= (15);
 8002efa:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <adc_one_channel_sequence+0x15c>)
 8002f00:	f043 030f 	orr.w	r3, r3, #15
 8002f04:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8002f06:	bf00      	nop


		/*
		 * Configura el enable de la interrupcion y la activacion del NVIC
		  */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40012000 	.word	0x40012000

08002f18 <adc_config_interrupt>:


static void	adc_config_interrupt(ADC_Config_t *adcConfig){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	if(adcConfig->interruptState == ADC_INT_ENABLE){
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	795b      	ldrb	r3, [r3, #5]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10d      	bne.n	8002f44 <adc_config_interrupt+0x2c>
		ADC1->CR1 |= (1 << 5);
 8002f28:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <adc_config_interrupt+0x48>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f60 <adc_config_interrupt+0x48>)
 8002f2e:	f043 0320 	orr.w	r3, r3, #32
 8002f32:	6053      	str	r3, [r2, #4]
		__NVIC_EnableIRQ(ADC_IRQn);
 8002f34:	2012      	movs	r0, #18
 8002f36:	f7ff f8b7 	bl	80020a8 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(ADC_IRQn, 4);
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	2012      	movs	r0, #18
 8002f3e:	f7ff f8f3 	bl	8002128 <__NVIC_SetPriority>
		 * Controla la activacion y desactivacion del modulo ADC desde el registro
		 * Cr2 del adc.
		 * */


	}
 8002f42:	e008      	b.n	8002f56 <adc_config_interrupt+0x3e>
		ADC1->CR1 &= ~(1 << 5);
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <adc_config_interrupt+0x48>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <adc_config_interrupt+0x48>)
 8002f4a:	f023 0320 	bic.w	r3, r3, #32
 8002f4e:	6053      	str	r3, [r2, #4]
		__NVIC_DisableIRQ(ADC_IRQn);
 8002f50:	2012      	movs	r0, #18
 8002f52:	f7ff f8c5 	bl	80020e0 <__NVIC_DisableIRQ>
	}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40012000 	.word	0x40012000

08002f64 <adc_peripheralOnOFF>:
void adc_peripheralOnOFF(uint8_t state){
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
	if(state == ADC_ON){
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <adc_peripheralOnOFF+0x1e>
		ADC1->CR2 |= (1);
 8002f74:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <adc_peripheralOnOFF+0x34>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a07      	ldr	r2, [pc, #28]	@ (8002f98 <adc_peripheralOnOFF+0x34>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6093      	str	r3, [r2, #8]

	/*	Enables and disables the Scan mode...
	 * 	Funciona de la mano con la secuencia de varios canales.
	 * 	No es necesario para el caso de solo un canal simple.
	 */
}
 8002f80:	e005      	b.n	8002f8e <adc_peripheralOnOFF+0x2a>
		ADC1->CR2 &= ~(1);
 8002f82:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <adc_peripheralOnOFF+0x34>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <adc_peripheralOnOFF+0x34>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6093      	str	r3, [r2, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012000 	.word	0x40012000

08002f9c <adc_ScanMode>:
void adc_ScanMode(uint8_t state){
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]





	if(state == SCAN_ON){
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <adc_ScanMode+0x1e>
			ADC1->CR1 |= (1<<8);
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <adc_ScanMode+0x34>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <adc_ScanMode+0x34>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb6:	6053      	str	r3, [r2, #4]


		/*
		 * Funcion que comienza la conversion ADC simple
		 */
}
 8002fb8:	e005      	b.n	8002fc6 <adc_ScanMode+0x2a>
			ADC1->CR1 &= ~(1<<8);
 8002fba:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <adc_ScanMode+0x34>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <adc_ScanMode+0x34>)
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc4:	6053      	str	r3, [r2, #4]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012000 	.word	0x40012000

08002fd4 <adc_StartSingleConv>:
void adc_StartSingleConv(void){
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (1<<30);
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <adc_StartSingleConv+0x18>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a03      	ldr	r2, [pc, #12]	@ (8002fec <adc_StartSingleConv+0x18>)
 8002fde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fe2:	6093      	str	r3, [r2, #8]

		/*
		 * Funcion que comienza la conversion ADC continua
		 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012000 	.word	0x40012000

08002ff0 <adc_StopContinuousConv>:

void adc_StartContinuousConv(void){
	ADC1->CR2 |= (1<<30);
	ADC1->CR2 |= (1<<1);
}
void adc_StopContinuousConv(void){
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~(1<<1);
 8002ff4:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <adc_StopContinuousConv+0x18>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a03      	ldr	r2, [pc, #12]	@ (8003008 <adc_StopContinuousConv+0x18>)
 8002ffa:	f023 0302 	bic.w	r3, r3, #2
 8002ffe:	6093      	str	r3, [r2, #8]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40012000 	.word	0x40012000

0800300c <adc_GetValue>:

/*
 * Funcion que me retorna el ultimo dato adquirido por la ADC
 */
uint16_t adc_GetValue(void){
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	return adcRawData;
 8003010:	4b02      	ldr	r3, [pc, #8]	@ (800301c <adc_GetValue+0x10>)
 8003012:	881b      	ldrh	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	2000046c 	.word	0x2000046c

08003020 <ADC_IRQHandler>:

/*
 *  Esta la ISR de la interrupcion por conversion ADC
 */

void ADC_IRQHandler(void){
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	if(ADC1->SR & (1<<1)){
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <ADC_IRQHandler+0x24>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <ADC_IRQHandler+0x1e>
	adcRawData = ADC1->DR;
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <ADC_IRQHandler+0x24>)
 8003032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <ADC_IRQHandler+0x28>)
 8003038:	801a      	strh	r2, [r3, #0]
	adc_CompleteCallback ();
 800303a:	f7fe ff25 	bl	8001e88 <adc_CompleteCallback>
	}

}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40012000 	.word	0x40012000
 8003048:	2000046c 	.word	0x2000046c

0800304c <adc_ConfigAnalogPin>:
__attribute__((weak)) void adc_CompleteCallback(void){
		__NOP();
	}
void adc_ConfigAnalogPin(uint8_t adcChannel){
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
switch (adcChannel){
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	f200 80f3 	bhi.w	8003244 <adc_ConfigAnalogPin+0x1f8>
 800305e:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <adc_ConfigAnalogPin+0x18>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030bf 	.word	0x080030bf
 800306c:	080030d9 	.word	0x080030d9
 8003070:	080030f3 	.word	0x080030f3
 8003074:	0800310d 	.word	0x0800310d
 8003078:	08003127 	.word	0x08003127
 800307c:	08003141 	.word	0x08003141
 8003080:	0800315b 	.word	0x0800315b
 8003084:	08003175 	.word	0x08003175
 8003088:	0800318f 	.word	0x0800318f
 800308c:	080031a9 	.word	0x080031a9
 8003090:	080031c3 	.word	0x080031c3
 8003094:	080031dd 	.word	0x080031dd
 8003098:	080031f7 	.word	0x080031f7
 800309c:	08003211 	.word	0x08003211
 80030a0:	0800322b 	.word	0x0800322b
	case 0: {
		handlerADCPin.pGPIOx = GPIOA;
 80030a4:	4b69      	ldr	r3, [pc, #420]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 80030a8:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80030aa:	4b68      	ldr	r3, [pc, #416]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030ac:	2203      	movs	r2, #3
 80030ae:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_0;
 80030b0:	4b66      	ldr	r3, [pc, #408]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80030b6:	4865      	ldr	r0, [pc, #404]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030b8:	f001 fac6 	bl	8004648 <gpio_Config>
		break;
 80030bc:	e0c2      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 1: {
		handlerADCPin.pGPIOx = GPIOA;
 80030be:	4b63      	ldr	r3, [pc, #396]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030c0:	4a63      	ldr	r2, [pc, #396]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 80030c2:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030c6:	2203      	movs	r2, #3
 80030c8:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_1;
 80030ca:	4b60      	ldr	r3, [pc, #384]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80030d0:	485e      	ldr	r0, [pc, #376]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030d2:	f001 fab9 	bl	8004648 <gpio_Config>
		break;
 80030d6:	e0b5      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 2: {
		handlerADCPin.pGPIOx = GPIOA;
 80030d8:	4b5c      	ldr	r3, [pc, #368]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030da:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 80030dc:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80030de:	4b5b      	ldr	r3, [pc, #364]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030e0:	2203      	movs	r2, #3
 80030e2:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_2;
 80030e4:	4b59      	ldr	r3, [pc, #356]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030e6:	2202      	movs	r2, #2
 80030e8:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80030ea:	4858      	ldr	r0, [pc, #352]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030ec:	f001 faac 	bl	8004648 <gpio_Config>
		break;
 80030f0:	e0a8      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 3: {
		handlerADCPin.pGPIOx = GPIOA;
 80030f2:	4b56      	ldr	r3, [pc, #344]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030f4:	4a56      	ldr	r2, [pc, #344]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 80030f6:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80030f8:	4b54      	ldr	r3, [pc, #336]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80030fa:	2203      	movs	r2, #3
 80030fc:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_3;
 80030fe:	4b53      	ldr	r3, [pc, #332]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003100:	2203      	movs	r2, #3
 8003102:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 8003104:	4851      	ldr	r0, [pc, #324]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003106:	f001 fa9f 	bl	8004648 <gpio_Config>
		break;
 800310a:	e09b      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 4: {
		handlerADCPin.pGPIOx = GPIOA;
 800310c:	4b4f      	ldr	r3, [pc, #316]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800310e:	4a50      	ldr	r2, [pc, #320]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 8003110:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003112:	4b4e      	ldr	r3, [pc, #312]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003114:	2203      	movs	r2, #3
 8003116:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_4;
 8003118:	4b4c      	ldr	r3, [pc, #304]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800311a:	2204      	movs	r2, #4
 800311c:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 800311e:	484b      	ldr	r0, [pc, #300]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003120:	f001 fa92 	bl	8004648 <gpio_Config>
		break;
 8003124:	e08e      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 5: {
		handlerADCPin.pGPIOx = GPIOA;
 8003126:	4b49      	ldr	r3, [pc, #292]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003128:	4a49      	ldr	r2, [pc, #292]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 800312a:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800312c:	4b47      	ldr	r3, [pc, #284]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800312e:	2203      	movs	r2, #3
 8003130:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_5;
 8003132:	4b46      	ldr	r3, [pc, #280]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003134:	2205      	movs	r2, #5
 8003136:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 8003138:	4844      	ldr	r0, [pc, #272]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800313a:	f001 fa85 	bl	8004648 <gpio_Config>
		break;
 800313e:	e081      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 6: {
		handlerADCPin.pGPIOx = GPIOA;
 8003140:	4b42      	ldr	r3, [pc, #264]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003142:	4a43      	ldr	r2, [pc, #268]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 8003144:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003146:	4b41      	ldr	r3, [pc, #260]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003148:	2203      	movs	r2, #3
 800314a:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_6;
 800314c:	4b3f      	ldr	r3, [pc, #252]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800314e:	2206      	movs	r2, #6
 8003150:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 8003152:	483e      	ldr	r0, [pc, #248]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003154:	f001 fa78 	bl	8004648 <gpio_Config>
		break;
 8003158:	e074      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 7: {
		handlerADCPin.pGPIOx = GPIOA;
 800315a:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800315c:	4a3c      	ldr	r2, [pc, #240]	@ (8003250 <adc_ConfigAnalogPin+0x204>)
 800315e:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003160:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003162:	2203      	movs	r2, #3
 8003164:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_7;
 8003166:	4b39      	ldr	r3, [pc, #228]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003168:	2207      	movs	r2, #7
 800316a:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 800316c:	4837      	ldr	r0, [pc, #220]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800316e:	f001 fa6b 	bl	8004648 <gpio_Config>
		break;
 8003172:	e067      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 8: {
		handlerADCPin.pGPIOx = GPIOB;
 8003174:	4b35      	ldr	r3, [pc, #212]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003176:	4a37      	ldr	r2, [pc, #220]	@ (8003254 <adc_ConfigAnalogPin+0x208>)
 8003178:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800317a:	4b34      	ldr	r3, [pc, #208]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800317c:	2203      	movs	r2, #3
 800317e:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_0;
 8003180:	4b32      	ldr	r3, [pc, #200]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003182:	2200      	movs	r2, #0
 8003184:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 8003186:	4831      	ldr	r0, [pc, #196]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003188:	f001 fa5e 	bl	8004648 <gpio_Config>
		break;
 800318c:	e05a      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 9: {
		handlerADCPin.pGPIOx = GPIOB;
 800318e:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003190:	4a30      	ldr	r2, [pc, #192]	@ (8003254 <adc_ConfigAnalogPin+0x208>)
 8003192:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003194:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003196:	2203      	movs	r2, #3
 8003198:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_1;
 800319a:	4b2c      	ldr	r3, [pc, #176]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800319c:	2201      	movs	r2, #1
 800319e:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80031a0:	482a      	ldr	r0, [pc, #168]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031a2:	f001 fa51 	bl	8004648 <gpio_Config>
		break;
 80031a6:	e04d      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 10: {
		handlerADCPin.pGPIOx = GPIOC;
 80031a8:	4b28      	ldr	r3, [pc, #160]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <adc_ConfigAnalogPin+0x20c>)
 80031ac:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80031ae:	4b27      	ldr	r3, [pc, #156]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031b0:	2203      	movs	r2, #3
 80031b2:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_0;
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80031ba:	4824      	ldr	r0, [pc, #144]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031bc:	f001 fa44 	bl	8004648 <gpio_Config>
		break;
 80031c0:	e040      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 11: {
		handlerADCPin.pGPIOx = GPIOC;
 80031c2:	4b22      	ldr	r3, [pc, #136]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <adc_ConfigAnalogPin+0x20c>)
 80031c6:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80031c8:	4b20      	ldr	r3, [pc, #128]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031ca:	2203      	movs	r2, #3
 80031cc:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_1;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80031d4:	481d      	ldr	r0, [pc, #116]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031d6:	f001 fa37 	bl	8004648 <gpio_Config>
		break;
 80031da:	e033      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 12: {
		handlerADCPin.pGPIOx = GPIOC;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031de:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <adc_ConfigAnalogPin+0x20c>)
 80031e0:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031e4:	2203      	movs	r2, #3
 80031e6:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_2;
 80031e8:	4b18      	ldr	r3, [pc, #96]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031ea:	2202      	movs	r2, #2
 80031ec:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 80031ee:	4817      	ldr	r0, [pc, #92]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031f0:	f001 fa2a 	bl	8004648 <gpio_Config>
		break;
 80031f4:	e026      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 13: {
		handlerADCPin.pGPIOx = GPIOC;
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031f8:	4a17      	ldr	r2, [pc, #92]	@ (8003258 <adc_ConfigAnalogPin+0x20c>)
 80031fa:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80031fc:	4b13      	ldr	r3, [pc, #76]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 80031fe:	2203      	movs	r2, #3
 8003200:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_3;
 8003202:	4b12      	ldr	r3, [pc, #72]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003204:	2203      	movs	r2, #3
 8003206:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 8003208:	4810      	ldr	r0, [pc, #64]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800320a:	f001 fa1d 	bl	8004648 <gpio_Config>
		break;
 800320e:	e019      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 14: {
		handlerADCPin.pGPIOx = GPIOC;
 8003210:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003212:	4a11      	ldr	r2, [pc, #68]	@ (8003258 <adc_ConfigAnalogPin+0x20c>)
 8003214:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003218:	2203      	movs	r2, #3
 800321a:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_4;
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800321e:	2204      	movs	r2, #4
 8003220:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 8003222:	480a      	ldr	r0, [pc, #40]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003224:	f001 fa10 	bl	8004648 <gpio_Config>
		break;
 8003228:	e00c      	b.n	8003244 <adc_ConfigAnalogPin+0x1f8>
	}
	case 15: {
		handlerADCPin.pGPIOx = GPIOC;
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <adc_ConfigAnalogPin+0x20c>)
 800322e:	601a      	str	r2, [r3, #0]
		handlerADCPin.pinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003232:	2203      	movs	r2, #3
 8003234:	715a      	strb	r2, [r3, #5]
		handlerADCPin.pinConfig.GPIO_PinNumber = PIN_5;
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 8003238:	2205      	movs	r2, #5
 800323a:	711a      	strb	r2, [r3, #4]
		gpio_Config(&handlerADCPin);
 800323c:	4803      	ldr	r0, [pc, #12]	@ (800324c <adc_ConfigAnalogPin+0x200>)
 800323e:	f001 fa03 	bl	8004648 <gpio_Config>
		break;
 8003242:	bf00      	nop
	}

}
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000460 	.word	0x20000460
 8003250:	40020000 	.word	0x40020000
 8003254:	40020400 	.word	0x40020400
 8003258:	40020800 	.word	0x40020800

0800325c <__NVIC_EnableIRQ>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	2b00      	cmp	r3, #0
 800326c:	db0b      	blt.n	8003286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4906      	ldr	r1, [pc, #24]	@ (8003290 <__NVIC_EnableIRQ+0x34>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2001      	movs	r0, #1
 800327e:	fa00 f202 	lsl.w	r2, r0, r2
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100

08003294 <exti_Config>:
/*
 * Funcion de configuracion del sistema EXTI.
 * Requiere que un pinX ya se encuentre configurado como
 * entrada digital
 * */
void exti_Config(EXTI_Config_t *extiConfig) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	gpio_Config(extiConfig->pGPIOHandler);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 f9d1 	bl	8004648 <gpio_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	exti_enable_clock_peripheral();
 80032a6:	f000 f811 	bl	80032cc <exti_enable_clock_peripheral>

	/* 3.0 Seleccion de canal */
	exti_assign_channel(extiConfig);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f81c 	bl	80032e8 <exti_assign_channel>

	/* 4.0 Seleccionamos el tipo de flanco */
	exti_select_edge(extiConfig);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fdfb 	bl	8003eac <exti_select_edge>
  __ASM volatile ("cpsid i" : : : "memory");
 80032b6:	b672      	cpsid	i
}
 80032b8:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
	__disable_irq();
	/*Agregue su código acá*/

	/* 6. 0 Manejo de Interrupciones */
	exti_config_interrupt(extiConfig);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 ff3e 	bl	800413c <exti_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 80032c0:	b662      	cpsie	i
}
 80032c2:	bf00      	nop

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <exti_enable_clock_peripheral>:

/*
 * No requiere el periferico, ya que solo es necesario activar
 * al SYCFG
 * */
static void exti_enable_clock_peripheral(void) {
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
	/* 2.0 Activamos el acceso al SYSCFG */
	/*Agregue su código acá*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <exti_enable_clock_peripheral+0x18>)
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	4a03      	ldr	r2, [pc, #12]	@ (80032e4 <exti_enable_clock_peripheral+0x18>)
 80032d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032da:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40023800 	.word	0x40023800

080032e8 <exti_assign_channel>:

/*
 * Funcion que configura los MUX para asignar el pinX del puerto Y
 * a la entrada EXTI correspondiente.
 * */
static void exti_assign_channel(EXTI_Config_t *extiConfig) {
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	/*Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
	switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	791b      	ldrb	r3, [r3, #4]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f200 85cd 	bhi.w	8003e96 <exti_assign_channel+0xbae>
 80032fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <exti_assign_channel+0x1c>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003345 	.word	0x08003345
 8003308:	080033fb 	.word	0x080033fb
 800330c:	080034b1 	.word	0x080034b1
 8003310:	08003567 	.word	0x08003567
 8003314:	0800363b 	.word	0x0800363b
 8003318:	080036e9 	.word	0x080036e9
 800331c:	08003791 	.word	0x08003791
 8003320:	08003855 	.word	0x08003855
 8003324:	080038fd 	.word	0x080038fd
 8003328:	080039a5 	.word	0x080039a5
 800332c:	08003a6b 	.word	0x08003a6b
 8003330:	08003b13 	.word	0x08003b13
 8003334:	08003bbb 	.word	0x08003bbb
 8003338:	08003c81 	.word	0x08003c81
 800333c:	08003d29 	.word	0x08003d29
 8003340:	08003dd1 	.word	0x08003dd1
	/* Configurando para el todos los pines GPIOX_0*/
	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8003344:	4b91      	ldr	r3, [pc, #580]	@ (800358c <exti_assign_channel+0x2a4>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a90      	ldr	r2, [pc, #576]	@ (800358c <exti_assign_channel+0x2a4>)
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a8e      	ldr	r2, [pc, #568]	@ (8003590 <exti_assign_channel+0x2a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d105      	bne.n	8003368 <exti_assign_channel+0x80>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 800335c:	4b8b      	ldr	r3, [pc, #556]	@ (800358c <exti_assign_channel+0x2a4>)
 800335e:	4a8b      	ldr	r2, [pc, #556]	@ (800358c <exti_assign_channel+0x2a4>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8003364:	f000 bd99 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a89      	ldr	r2, [pc, #548]	@ (8003594 <exti_assign_channel+0x2ac>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d107      	bne.n	8003384 <exti_assign_channel+0x9c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8003374:	4b85      	ldr	r3, [pc, #532]	@ (800358c <exti_assign_channel+0x2a4>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4a84      	ldr	r2, [pc, #528]	@ (800358c <exti_assign_channel+0x2a4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6093      	str	r3, [r2, #8]
		break;
 8003380:	f000 bd8b 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a83      	ldr	r2, [pc, #524]	@ (8003598 <exti_assign_channel+0x2b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d107      	bne.n	80033a0 <exti_assign_channel+0xb8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8003390:	4b7e      	ldr	r3, [pc, #504]	@ (800358c <exti_assign_channel+0x2a4>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a7d      	ldr	r2, [pc, #500]	@ (800358c <exti_assign_channel+0x2a4>)
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6093      	str	r3, [r2, #8]
		break;
 800339c:	f000 bd7d 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7d      	ldr	r2, [pc, #500]	@ (800359c <exti_assign_channel+0x2b4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d107      	bne.n	80033bc <exti_assign_channel+0xd4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80033ac:	4b77      	ldr	r3, [pc, #476]	@ (800358c <exti_assign_channel+0x2a4>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a76      	ldr	r2, [pc, #472]	@ (800358c <exti_assign_channel+0x2a4>)
 80033b2:	f043 0303 	orr.w	r3, r3, #3
 80033b6:	6093      	str	r3, [r2, #8]
		break;
 80033b8:	f000 bd6f 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a77      	ldr	r2, [pc, #476]	@ (80035a0 <exti_assign_channel+0x2b8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d107      	bne.n	80033d8 <exti_assign_channel+0xf0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80033c8:	4b70      	ldr	r3, [pc, #448]	@ (800358c <exti_assign_channel+0x2a4>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a6f      	ldr	r2, [pc, #444]	@ (800358c <exti_assign_channel+0x2a4>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6093      	str	r3, [r2, #8]
		break;
 80033d4:	f000 bd61 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a71      	ldr	r2, [pc, #452]	@ (80035a4 <exti_assign_channel+0x2bc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d107      	bne.n	80033f4 <exti_assign_channel+0x10c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80033e4:	4b69      	ldr	r3, [pc, #420]	@ (800358c <exti_assign_channel+0x2a4>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a68      	ldr	r2, [pc, #416]	@ (800358c <exti_assign_channel+0x2a4>)
 80033ea:	f043 0307 	orr.w	r3, r3, #7
 80033ee:	6093      	str	r3, [r2, #8]
		break;
 80033f0:	f000 bd53 	b.w	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 80033f4:	bf00      	nop
		break;
 80033f6:	f000 bd50 	b.w	8003e9a <exti_assign_channel+0xbb2>
		/* Configurando para el todos los pines GPIOX_1*/
	case 1: {
		/* SYSCFG_EXTICR1 */
		/*Agregue su código acá*/
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI1);
 80033fa:	4b64      	ldr	r3, [pc, #400]	@ (800358c <exti_assign_channel+0x2a4>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a63      	ldr	r2, [pc, #396]	@ (800358c <exti_assign_channel+0x2a4>)
 8003400:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003404:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a corker en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a60      	ldr	r2, [pc, #384]	@ (8003590 <exti_assign_channel+0x2a8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d105      	bne.n	800341e <exti_assign_channel+0x136>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8003412:	4b5e      	ldr	r3, [pc, #376]	@ (800358c <exti_assign_channel+0x2a4>)
 8003414:	4a5d      	ldr	r2, [pc, #372]	@ (800358c <exti_assign_channel+0x2a4>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 800341a:	f000 bd3e 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5b      	ldr	r2, [pc, #364]	@ (8003594 <exti_assign_channel+0x2ac>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d107      	bne.n	800343a <exti_assign_channel+0x152>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800342a:	4b58      	ldr	r3, [pc, #352]	@ (800358c <exti_assign_channel+0x2a4>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4a57      	ldr	r2, [pc, #348]	@ (800358c <exti_assign_channel+0x2a4>)
 8003430:	f043 0310 	orr.w	r3, r3, #16
 8003434:	6093      	str	r3, [r2, #8]
		break;
 8003436:	f000 bd30 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a55      	ldr	r2, [pc, #340]	@ (8003598 <exti_assign_channel+0x2b0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d107      	bne.n	8003456 <exti_assign_channel+0x16e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8003446:	4b51      	ldr	r3, [pc, #324]	@ (800358c <exti_assign_channel+0x2a4>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4a50      	ldr	r2, [pc, #320]	@ (800358c <exti_assign_channel+0x2a4>)
 800344c:	f043 0320 	orr.w	r3, r3, #32
 8003450:	6093      	str	r3, [r2, #8]
		break;
 8003452:	f000 bd22 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4f      	ldr	r2, [pc, #316]	@ (800359c <exti_assign_channel+0x2b4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d107      	bne.n	8003472 <exti_assign_channel+0x18a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8003462:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <exti_assign_channel+0x2a4>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4a49      	ldr	r2, [pc, #292]	@ (800358c <exti_assign_channel+0x2a4>)
 8003468:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800346c:	6093      	str	r3, [r2, #8]
		break;
 800346e:	f000 bd14 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a49      	ldr	r2, [pc, #292]	@ (80035a0 <exti_assign_channel+0x2b8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d107      	bne.n	800348e <exti_assign_channel+0x1a6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800347e:	4b43      	ldr	r3, [pc, #268]	@ (800358c <exti_assign_channel+0x2a4>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4a42      	ldr	r2, [pc, #264]	@ (800358c <exti_assign_channel+0x2a4>)
 8003484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003488:	6093      	str	r3, [r2, #8]
		break;
 800348a:	f000 bd06 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a43      	ldr	r2, [pc, #268]	@ (80035a4 <exti_assign_channel+0x2bc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d107      	bne.n	80034aa <exti_assign_channel+0x1c2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800349a:	4b3c      	ldr	r3, [pc, #240]	@ (800358c <exti_assign_channel+0x2a4>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	@ (800358c <exti_assign_channel+0x2a4>)
 80034a0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80034a4:	6093      	str	r3, [r2, #8]
		break;
 80034a6:	f000 bcf8 	b.w	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 80034aa:	bf00      	nop
		break;
 80034ac:	f000 bcf5 	b.w	8003e9a <exti_assign_channel+0xbb2>
		/* Configurando para el todos los pines GPIOX_2*/
	case 2: {
		/* SYSCFG_EXTICR1 */
		/*Agregue su código acá*/
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI2);
 80034b0:	4b36      	ldr	r3, [pc, #216]	@ (800358c <exti_assign_channel+0x2a4>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a35      	ldr	r2, [pc, #212]	@ (800358c <exti_assign_channel+0x2a4>)
 80034b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034ba:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a33      	ldr	r2, [pc, #204]	@ (8003590 <exti_assign_channel+0x2a8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d105      	bne.n	80034d4 <exti_assign_channel+0x1ec>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80034c8:	4b30      	ldr	r3, [pc, #192]	@ (800358c <exti_assign_channel+0x2a4>)
 80034ca:	4a30      	ldr	r2, [pc, #192]	@ (800358c <exti_assign_channel+0x2a4>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 80034d0:	f000 bce3 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2e      	ldr	r2, [pc, #184]	@ (8003594 <exti_assign_channel+0x2ac>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d107      	bne.n	80034f0 <exti_assign_channel+0x208>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80034e0:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <exti_assign_channel+0x2a4>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a29      	ldr	r2, [pc, #164]	@ (800358c <exti_assign_channel+0x2a4>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ea:	6093      	str	r3, [r2, #8]
		break;
 80034ec:	f000 bcd5 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a28      	ldr	r2, [pc, #160]	@ (8003598 <exti_assign_channel+0x2b0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d107      	bne.n	800350c <exti_assign_channel+0x224>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80034fc:	4b23      	ldr	r3, [pc, #140]	@ (800358c <exti_assign_channel+0x2a4>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <exti_assign_channel+0x2a4>)
 8003502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003506:	6093      	str	r3, [r2, #8]
		break;
 8003508:	f000 bcc7 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a22      	ldr	r2, [pc, #136]	@ (800359c <exti_assign_channel+0x2b4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d107      	bne.n	8003528 <exti_assign_channel+0x240>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8003518:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <exti_assign_channel+0x2a4>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <exti_assign_channel+0x2a4>)
 800351e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003522:	6093      	str	r3, [r2, #8]
		break;
 8003524:	f000 bcb9 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <exti_assign_channel+0x2b8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d107      	bne.n	8003544 <exti_assign_channel+0x25c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003534:	4b15      	ldr	r3, [pc, #84]	@ (800358c <exti_assign_channel+0x2a4>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a14      	ldr	r2, [pc, #80]	@ (800358c <exti_assign_channel+0x2a4>)
 800353a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800353e:	6093      	str	r3, [r2, #8]
		break;
 8003540:	f000 bcab 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <exti_assign_channel+0x2bc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d107      	bne.n	8003560 <exti_assign_channel+0x278>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8003550:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <exti_assign_channel+0x2a4>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <exti_assign_channel+0x2a4>)
 8003556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800355a:	6093      	str	r3, [r2, #8]
		break;
 800355c:	f000 bc9d 	b.w	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003560:	bf00      	nop
		break;
 8003562:	f000 bc9a 	b.w	8003e9a <exti_assign_channel+0xbb2>

	case 3: {
		/* SYSCFG_EXTICR1 */
		/*Agregue su código acá*/
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI3);
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <exti_assign_channel+0x2a4>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a08      	ldr	r2, [pc, #32]	@ (800358c <exti_assign_channel+0x2a4>)
 800356c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003570:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a05      	ldr	r2, [pc, #20]	@ (8003590 <exti_assign_channel+0x2a8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d114      	bne.n	80035a8 <exti_assign_channel+0x2c0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800357e:	4b03      	ldr	r3, [pc, #12]	@ (800358c <exti_assign_channel+0x2a4>)
 8003580:	4a02      	ldr	r2, [pc, #8]	@ (800358c <exti_assign_channel+0x2a4>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8003586:	f000 bc88 	b.w	8003e9a <exti_assign_channel+0xbb2>
 800358a:	bf00      	nop
 800358c:	40013800 	.word	0x40013800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40021c00 	.word	0x40021c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a87      	ldr	r2, [pc, #540]	@ (80037cc <exti_assign_channel+0x4e4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d107      	bne.n	80035c4 <exti_assign_channel+0x2dc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80035b4:	4b86      	ldr	r3, [pc, #536]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a85      	ldr	r2, [pc, #532]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80035ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035be:	6093      	str	r3, [r2, #8]
		break;
 80035c0:	f000 bc6b 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a82      	ldr	r2, [pc, #520]	@ (80037d4 <exti_assign_channel+0x4ec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d107      	bne.n	80035e0 <exti_assign_channel+0x2f8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80035d0:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a7e      	ldr	r2, [pc, #504]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80035d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035da:	6093      	str	r3, [r2, #8]
		break;
 80035dc:	f000 bc5d 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7c      	ldr	r2, [pc, #496]	@ (80037d8 <exti_assign_channel+0x4f0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d107      	bne.n	80035fc <exti_assign_channel+0x314>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80035ec:	4b78      	ldr	r3, [pc, #480]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a77      	ldr	r2, [pc, #476]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80035f2:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80035f6:	6093      	str	r3, [r2, #8]
		break;
 80035f8:	f000 bc4f 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a76      	ldr	r2, [pc, #472]	@ (80037dc <exti_assign_channel+0x4f4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d107      	bne.n	8003618 <exti_assign_channel+0x330>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8003608:	4b71      	ldr	r3, [pc, #452]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a70      	ldr	r2, [pc, #448]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800360e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003612:	6093      	str	r3, [r2, #8]
		break;
 8003614:	f000 bc41 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a70      	ldr	r2, [pc, #448]	@ (80037e0 <exti_assign_channel+0x4f8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d107      	bne.n	8003634 <exti_assign_channel+0x34c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003624:	4b6a      	ldr	r3, [pc, #424]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a69      	ldr	r2, [pc, #420]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800362a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800362e:	6093      	str	r3, [r2, #8]
		break;
 8003630:	f000 bc33 	b.w	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003634:	bf00      	nop
		break;
 8003636:	f000 bc30 	b.w	8003e9a <exti_assign_channel+0xbb2>
	}

	case 4: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR2_EXTI4);
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a64      	ldr	r2, [pc, #400]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a65      	ldr	r2, [pc, #404]	@ (80037e4 <exti_assign_channel+0x4fc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d105      	bne.n	800365e <exti_assign_channel+0x376>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003652:	4b5f      	ldr	r3, [pc, #380]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003654:	4a5e      	ldr	r2, [pc, #376]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 800365a:	f000 bc1e 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a59      	ldr	r2, [pc, #356]	@ (80037cc <exti_assign_channel+0x4e4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d107      	bne.n	800367a <exti_assign_channel+0x392>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 800366a:	4b59      	ldr	r3, [pc, #356]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a58      	ldr	r2, [pc, #352]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	60d3      	str	r3, [r2, #12]
		break;
 8003676:	f000 bc10 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a54      	ldr	r2, [pc, #336]	@ (80037d4 <exti_assign_channel+0x4ec>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d107      	bne.n	8003696 <exti_assign_channel+0x3ae>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003686:	4b52      	ldr	r3, [pc, #328]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a51      	ldr	r2, [pc, #324]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	60d3      	str	r3, [r2, #12]
		break;
 8003692:	f000 bc02 	b.w	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a4e      	ldr	r2, [pc, #312]	@ (80037d8 <exti_assign_channel+0x4f0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d106      	bne.n	80036b0 <exti_assign_channel+0x3c8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80036a2:	4b4b      	ldr	r3, [pc, #300]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a4a      	ldr	r2, [pc, #296]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036a8:	f043 0303 	orr.w	r3, r3, #3
 80036ac:	60d3      	str	r3, [r2, #12]
		break;
 80036ae:	e3f4      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a49      	ldr	r2, [pc, #292]	@ (80037dc <exti_assign_channel+0x4f4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d106      	bne.n	80036ca <exti_assign_channel+0x3e2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80036bc:	4b44      	ldr	r3, [pc, #272]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a43      	ldr	r2, [pc, #268]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036c2:	f043 0304 	orr.w	r3, r3, #4
 80036c6:	60d3      	str	r3, [r2, #12]
		break;
 80036c8:	e3e7      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a43      	ldr	r2, [pc, #268]	@ (80037e0 <exti_assign_channel+0x4f8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d106      	bne.n	80036e4 <exti_assign_channel+0x3fc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80036d6:	4b3e      	ldr	r3, [pc, #248]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4a3d      	ldr	r2, [pc, #244]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036dc:	f043 0307 	orr.w	r3, r3, #7
 80036e0:	60d3      	str	r3, [r2, #12]
		break;
 80036e2:	e3da      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 80036e4:	bf00      	nop
		break;
 80036e6:	e3d8      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 5: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR2_EXTI5);
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a38      	ldr	r2, [pc, #224]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80036ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f2:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3a      	ldr	r2, [pc, #232]	@ (80037e4 <exti_assign_channel+0x4fc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d104      	bne.n	800370a <exti_assign_channel+0x422>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003702:	4a33      	ldr	r2, [pc, #204]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8003708:	e3c7      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2e      	ldr	r2, [pc, #184]	@ (80037cc <exti_assign_channel+0x4e4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d106      	bne.n	8003724 <exti_assign_channel+0x43c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003716:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800371c:	f043 0310 	orr.w	r3, r3, #16
 8003720:	60d3      	str	r3, [r2, #12]
		break;
 8003722:	e3ba      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2a      	ldr	r2, [pc, #168]	@ (80037d4 <exti_assign_channel+0x4ec>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d106      	bne.n	800373e <exti_assign_channel+0x456>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003730:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a26      	ldr	r2, [pc, #152]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	60d3      	str	r3, [r2, #12]
		break;
 800373c:	e3ad      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a24      	ldr	r2, [pc, #144]	@ (80037d8 <exti_assign_channel+0x4f0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d106      	bne.n	8003758 <exti_assign_channel+0x470>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 800374a:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4a20      	ldr	r2, [pc, #128]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003750:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003754:	60d3      	str	r3, [r2, #12]
		break;
 8003756:	e3a0      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1f      	ldr	r2, [pc, #124]	@ (80037dc <exti_assign_channel+0x4f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d106      	bne.n	8003772 <exti_assign_channel+0x48a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003764:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <exti_assign_channel+0x4e8>)
 800376a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376e:	60d3      	str	r3, [r2, #12]
		break;
 8003770:	e393      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a19      	ldr	r2, [pc, #100]	@ (80037e0 <exti_assign_channel+0x4f8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d106      	bne.n	800378c <exti_assign_channel+0x4a4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800377e:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003784:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003788:	60d3      	str	r3, [r2, #12]
		break;
 800378a:	e386      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 800378c:	bf00      	nop
		break;
 800378e:	e384      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 6: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR2_EXTI6);
 8003790:	4b0f      	ldr	r3, [pc, #60]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a0e      	ldr	r2, [pc, #56]	@ (80037d0 <exti_assign_channel+0x4e8>)
 8003796:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800379a:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a10      	ldr	r2, [pc, #64]	@ (80037e4 <exti_assign_channel+0x4fc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d104      	bne.n	80037b2 <exti_assign_channel+0x4ca>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80037a8:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80037aa:	4a09      	ldr	r2, [pc, #36]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 80037b0:	e373      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <exti_assign_channel+0x4e4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d114      	bne.n	80037e8 <exti_assign_channel+0x500>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4a03      	ldr	r2, [pc, #12]	@ (80037d0 <exti_assign_channel+0x4e8>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c8:	60d3      	str	r3, [r2, #12]
		break;
 80037ca:	e366      	b.n	8003e9a <exti_assign_channel+0xbb2>
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40013800 	.word	0x40013800
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021c00 	.word	0x40021c00
 80037e4:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a83      	ldr	r2, [pc, #524]	@ (80039fc <exti_assign_channel+0x714>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d106      	bne.n	8003802 <exti_assign_channel+0x51a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80037f4:	4b82      	ldr	r3, [pc, #520]	@ (8003a00 <exti_assign_channel+0x718>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a81      	ldr	r2, [pc, #516]	@ (8003a00 <exti_assign_channel+0x718>)
 80037fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037fe:	60d3      	str	r3, [r2, #12]
		break;
 8003800:	e34b      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7e      	ldr	r2, [pc, #504]	@ (8003a04 <exti_assign_channel+0x71c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d106      	bne.n	800381c <exti_assign_channel+0x534>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800380e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a00 <exti_assign_channel+0x718>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4a7b      	ldr	r2, [pc, #492]	@ (8003a00 <exti_assign_channel+0x718>)
 8003814:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003818:	60d3      	str	r3, [r2, #12]
		break;
 800381a:	e33e      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a79      	ldr	r2, [pc, #484]	@ (8003a08 <exti_assign_channel+0x720>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d106      	bne.n	8003836 <exti_assign_channel+0x54e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003828:	4b75      	ldr	r3, [pc, #468]	@ (8003a00 <exti_assign_channel+0x718>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a74      	ldr	r2, [pc, #464]	@ (8003a00 <exti_assign_channel+0x718>)
 800382e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003832:	60d3      	str	r3, [r2, #12]
		break;
 8003834:	e331      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a73      	ldr	r2, [pc, #460]	@ (8003a0c <exti_assign_channel+0x724>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d106      	bne.n	8003850 <exti_assign_channel+0x568>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003842:	4b6f      	ldr	r3, [pc, #444]	@ (8003a00 <exti_assign_channel+0x718>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4a6e      	ldr	r2, [pc, #440]	@ (8003a00 <exti_assign_channel+0x718>)
 8003848:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800384c:	60d3      	str	r3, [r2, #12]
		break;
 800384e:	e324      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003850:	bf00      	nop
		break;
 8003852:	e322      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 7: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR2_EXTI7);
 8003854:	4b6a      	ldr	r3, [pc, #424]	@ (8003a00 <exti_assign_channel+0x718>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a69      	ldr	r2, [pc, #420]	@ (8003a00 <exti_assign_channel+0x718>)
 800385a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800385e:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6a      	ldr	r2, [pc, #424]	@ (8003a10 <exti_assign_channel+0x728>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d104      	bne.n	8003876 <exti_assign_channel+0x58e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800386c:	4b64      	ldr	r3, [pc, #400]	@ (8003a00 <exti_assign_channel+0x718>)
 800386e:	4a64      	ldr	r2, [pc, #400]	@ (8003a00 <exti_assign_channel+0x718>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8003874:	e311      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a65      	ldr	r2, [pc, #404]	@ (8003a14 <exti_assign_channel+0x72c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d106      	bne.n	8003890 <exti_assign_channel+0x5a8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003882:	4b5f      	ldr	r3, [pc, #380]	@ (8003a00 <exti_assign_channel+0x718>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a5e      	ldr	r2, [pc, #376]	@ (8003a00 <exti_assign_channel+0x718>)
 8003888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800388c:	60d3      	str	r3, [r2, #12]
		break;
 800388e:	e304      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a59      	ldr	r2, [pc, #356]	@ (80039fc <exti_assign_channel+0x714>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d106      	bne.n	80038aa <exti_assign_channel+0x5c2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800389c:	4b58      	ldr	r3, [pc, #352]	@ (8003a00 <exti_assign_channel+0x718>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a57      	ldr	r2, [pc, #348]	@ (8003a00 <exti_assign_channel+0x718>)
 80038a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038a6:	60d3      	str	r3, [r2, #12]
		break;
 80038a8:	e2f7      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a54      	ldr	r2, [pc, #336]	@ (8003a04 <exti_assign_channel+0x71c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d106      	bne.n	80038c4 <exti_assign_channel+0x5dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80038b6:	4b52      	ldr	r3, [pc, #328]	@ (8003a00 <exti_assign_channel+0x718>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4a51      	ldr	r2, [pc, #324]	@ (8003a00 <exti_assign_channel+0x718>)
 80038bc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80038c0:	60d3      	str	r3, [r2, #12]
		break;
 80038c2:	e2ea      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003a08 <exti_assign_channel+0x720>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d106      	bne.n	80038de <exti_assign_channel+0x5f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80038d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003a00 <exti_assign_channel+0x718>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <exti_assign_channel+0x718>)
 80038d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038da:	60d3      	str	r3, [r2, #12]
		break;
 80038dc:	e2dd      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a49      	ldr	r2, [pc, #292]	@ (8003a0c <exti_assign_channel+0x724>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d106      	bne.n	80038f8 <exti_assign_channel+0x610>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80038ea:	4b45      	ldr	r3, [pc, #276]	@ (8003a00 <exti_assign_channel+0x718>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	4a44      	ldr	r2, [pc, #272]	@ (8003a00 <exti_assign_channel+0x718>)
 80038f0:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80038f4:	60d3      	str	r3, [r2, #12]
		break;
 80038f6:	e2d0      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 80038f8:	bf00      	nop
		break;
 80038fa:	e2ce      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 8: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(SYSCFG_EXTICR3_EXTI8);
 80038fc:	4b40      	ldr	r3, [pc, #256]	@ (8003a00 <exti_assign_channel+0x718>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	4a3f      	ldr	r2, [pc, #252]	@ (8003a00 <exti_assign_channel+0x718>)
 8003902:	f023 030f 	bic.w	r3, r3, #15
 8003906:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a40      	ldr	r2, [pc, #256]	@ (8003a10 <exti_assign_channel+0x728>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d104      	bne.n	800391e <exti_assign_channel+0x636>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003914:	4b3a      	ldr	r3, [pc, #232]	@ (8003a00 <exti_assign_channel+0x718>)
 8003916:	4a3a      	ldr	r2, [pc, #232]	@ (8003a00 <exti_assign_channel+0x718>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 800391c:	e2bd      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a3b      	ldr	r2, [pc, #236]	@ (8003a14 <exti_assign_channel+0x72c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d106      	bne.n	8003938 <exti_assign_channel+0x650>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800392a:	4b35      	ldr	r3, [pc, #212]	@ (8003a00 <exti_assign_channel+0x718>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	4a34      	ldr	r2, [pc, #208]	@ (8003a00 <exti_assign_channel+0x718>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6113      	str	r3, [r2, #16]
		break;
 8003936:	e2b0      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2f      	ldr	r2, [pc, #188]	@ (80039fc <exti_assign_channel+0x714>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d106      	bne.n	8003952 <exti_assign_channel+0x66a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003944:	4b2e      	ldr	r3, [pc, #184]	@ (8003a00 <exti_assign_channel+0x718>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4a2d      	ldr	r2, [pc, #180]	@ (8003a00 <exti_assign_channel+0x718>)
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	6113      	str	r3, [r2, #16]
		break;
 8003950:	e2a3      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <exti_assign_channel+0x71c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d106      	bne.n	800396c <exti_assign_channel+0x684>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800395e:	4b28      	ldr	r3, [pc, #160]	@ (8003a00 <exti_assign_channel+0x718>)
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	4a27      	ldr	r2, [pc, #156]	@ (8003a00 <exti_assign_channel+0x718>)
 8003964:	f043 0303 	orr.w	r3, r3, #3
 8003968:	6113      	str	r3, [r2, #16]
		break;
 800396a:	e296      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a25      	ldr	r2, [pc, #148]	@ (8003a08 <exti_assign_channel+0x720>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d106      	bne.n	8003986 <exti_assign_channel+0x69e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003978:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <exti_assign_channel+0x718>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a20      	ldr	r2, [pc, #128]	@ (8003a00 <exti_assign_channel+0x718>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6113      	str	r3, [r2, #16]
		break;
 8003984:	e289      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <exti_assign_channel+0x724>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d106      	bne.n	80039a0 <exti_assign_channel+0x6b8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003992:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <exti_assign_channel+0x718>)
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	4a1a      	ldr	r2, [pc, #104]	@ (8003a00 <exti_assign_channel+0x718>)
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	6113      	str	r3, [r2, #16]
		break;
 800399e:	e27c      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 80039a0:	bf00      	nop
		break;
 80039a2:	e27a      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 9: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(SYSCFG_EXTICR3_EXTI9);
 80039a4:	4b16      	ldr	r3, [pc, #88]	@ (8003a00 <exti_assign_channel+0x718>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <exti_assign_channel+0x718>)
 80039aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ae:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <exti_assign_channel+0x728>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d104      	bne.n	80039c6 <exti_assign_channel+0x6de>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80039bc:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <exti_assign_channel+0x718>)
 80039be:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <exti_assign_channel+0x718>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 80039c4:	e269      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a11      	ldr	r2, [pc, #68]	@ (8003a14 <exti_assign_channel+0x72c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d106      	bne.n	80039e0 <exti_assign_channel+0x6f8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80039d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <exti_assign_channel+0x718>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a00 <exti_assign_channel+0x718>)
 80039d8:	f043 0310 	orr.w	r3, r3, #16
 80039dc:	6113      	str	r3, [r2, #16]
		break;
 80039de:	e25c      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a05      	ldr	r2, [pc, #20]	@ (80039fc <exti_assign_channel+0x714>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d115      	bne.n	8003a18 <exti_assign_channel+0x730>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <exti_assign_channel+0x718>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	4a03      	ldr	r2, [pc, #12]	@ (8003a00 <exti_assign_channel+0x718>)
 80039f2:	f043 0320 	orr.w	r3, r3, #32
 80039f6:	6113      	str	r3, [r2, #16]
		break;
 80039f8:	e24f      	b.n	8003e9a <exti_assign_channel+0xbb2>
 80039fa:	bf00      	nop
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40020c00 	.word	0x40020c00
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40020400 	.word	0x40020400
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a83      	ldr	r2, [pc, #524]	@ (8003c2c <exti_assign_channel+0x944>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d106      	bne.n	8003a32 <exti_assign_channel+0x74a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003a24:	4b82      	ldr	r3, [pc, #520]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	4a81      	ldr	r2, [pc, #516]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a2a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003a2e:	6113      	str	r3, [r2, #16]
		break;
 8003a30:	e233      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7e      	ldr	r2, [pc, #504]	@ (8003c34 <exti_assign_channel+0x94c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <exti_assign_channel+0x764>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a48:	6113      	str	r3, [r2, #16]
		break;
 8003a4a:	e226      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a79      	ldr	r2, [pc, #484]	@ (8003c38 <exti_assign_channel+0x950>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d106      	bne.n	8003a66 <exti_assign_channel+0x77e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003a58:	4b75      	ldr	r3, [pc, #468]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4a74      	ldr	r2, [pc, #464]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a5e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003a62:	6113      	str	r3, [r2, #16]
		break;
 8003a64:	e219      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003a66:	bf00      	nop
		break;
 8003a68:	e217      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 10: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(SYSCFG_EXTICR3_EXTI10);
 8003a6a:	4b71      	ldr	r3, [pc, #452]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4a70      	ldr	r2, [pc, #448]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a74:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6f      	ldr	r2, [pc, #444]	@ (8003c3c <exti_assign_channel+0x954>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d104      	bne.n	8003a8c <exti_assign_channel+0x7a4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003a82:	4b6b      	ldr	r3, [pc, #428]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a84:	4a6a      	ldr	r2, [pc, #424]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8003a8a:	e206      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6b      	ldr	r2, [pc, #428]	@ (8003c40 <exti_assign_channel+0x958>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d106      	bne.n	8003aa6 <exti_assign_channel+0x7be>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003a98:	4b65      	ldr	r3, [pc, #404]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	4a64      	ldr	r2, [pc, #400]	@ (8003c30 <exti_assign_channel+0x948>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa2:	6113      	str	r3, [r2, #16]
		break;
 8003aa4:	e1f9      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a65      	ldr	r2, [pc, #404]	@ (8003c44 <exti_assign_channel+0x95c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d106      	bne.n	8003ac0 <exti_assign_channel+0x7d8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c30 <exti_assign_channel+0x948>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c30 <exti_assign_channel+0x948>)
 8003ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003abc:	6113      	str	r3, [r2, #16]
		break;
 8003abe:	e1ec      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a59      	ldr	r2, [pc, #356]	@ (8003c2c <exti_assign_channel+0x944>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d106      	bne.n	8003ada <exti_assign_channel+0x7f2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003acc:	4b58      	ldr	r3, [pc, #352]	@ (8003c30 <exti_assign_channel+0x948>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	@ (8003c30 <exti_assign_channel+0x948>)
 8003ad2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003ad6:	6113      	str	r3, [r2, #16]
		break;
 8003ad8:	e1df      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a54      	ldr	r2, [pc, #336]	@ (8003c34 <exti_assign_channel+0x94c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d106      	bne.n	8003af4 <exti_assign_channel+0x80c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003ae6:	4b52      	ldr	r3, [pc, #328]	@ (8003c30 <exti_assign_channel+0x948>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	4a51      	ldr	r2, [pc, #324]	@ (8003c30 <exti_assign_channel+0x948>)
 8003aec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003af0:	6113      	str	r3, [r2, #16]
		break;
 8003af2:	e1d2      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4f      	ldr	r2, [pc, #316]	@ (8003c38 <exti_assign_channel+0x950>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d106      	bne.n	8003b0e <exti_assign_channel+0x826>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003b00:	4b4b      	ldr	r3, [pc, #300]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	4a4a      	ldr	r2, [pc, #296]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b0a:	6113      	str	r3, [r2, #16]
		break;
 8003b0c:	e1c5      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003b0e:	bf00      	nop
		break;
 8003b10:	e1c3      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 11: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(SYSCFG_EXTICR3_EXTI11);
 8003b12:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4a46      	ldr	r2, [pc, #280]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b1c:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a45      	ldr	r2, [pc, #276]	@ (8003c3c <exti_assign_channel+0x954>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d104      	bne.n	8003b34 <exti_assign_channel+0x84c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8003b2a:	4b41      	ldr	r3, [pc, #260]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b2c:	4a40      	ldr	r2, [pc, #256]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8003b32:	e1b2      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a41      	ldr	r2, [pc, #260]	@ (8003c40 <exti_assign_channel+0x958>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d106      	bne.n	8003b4e <exti_assign_channel+0x866>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003b40:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	4a3a      	ldr	r2, [pc, #232]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b4a:	6113      	str	r3, [r2, #16]
		break;
 8003b4c:	e1a5      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3b      	ldr	r2, [pc, #236]	@ (8003c44 <exti_assign_channel+0x95c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d106      	bne.n	8003b68 <exti_assign_channel+0x880>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8003b5a:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	4a34      	ldr	r2, [pc, #208]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b64:	6113      	str	r3, [r2, #16]
		break;
 8003b66:	e198      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c2c <exti_assign_channel+0x944>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d106      	bne.n	8003b82 <exti_assign_channel+0x89a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003b74:	4b2e      	ldr	r3, [pc, #184]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4a2d      	ldr	r2, [pc, #180]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b7a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8003b7e:	6113      	str	r3, [r2, #16]
		break;
 8003b80:	e18b      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2a      	ldr	r2, [pc, #168]	@ (8003c34 <exti_assign_channel+0x94c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d106      	bne.n	8003b9c <exti_assign_channel+0x8b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8003b8e:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	4a27      	ldr	r2, [pc, #156]	@ (8003c30 <exti_assign_channel+0x948>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b98:	6113      	str	r3, [r2, #16]
		break;
 8003b9a:	e17e      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a25      	ldr	r2, [pc, #148]	@ (8003c38 <exti_assign_channel+0x950>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d106      	bne.n	8003bb6 <exti_assign_channel+0x8ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003ba8:	4b21      	ldr	r3, [pc, #132]	@ (8003c30 <exti_assign_channel+0x948>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4a20      	ldr	r2, [pc, #128]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bae:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8003bb2:	6113      	str	r3, [r2, #16]
		break;
 8003bb4:	e171      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003bb6:	bf00      	nop
		break;
 8003bb8:	e16f      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 12: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI12);
 8003bba:	4b1d      	ldr	r3, [pc, #116]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bc0:	f023 030f 	bic.w	r3, r3, #15
 8003bc4:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c3c <exti_assign_channel+0x954>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d104      	bne.n	8003bdc <exti_assign_channel+0x8f4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003bd2:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bd4:	4a16      	ldr	r2, [pc, #88]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8003bda:	e15e      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <exti_assign_channel+0x958>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d106      	bne.n	8003bf6 <exti_assign_channel+0x90e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003be8:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	4a10      	ldr	r2, [pc, #64]	@ (8003c30 <exti_assign_channel+0x948>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6153      	str	r3, [r2, #20]
		break;
 8003bf4:	e151      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a11      	ldr	r2, [pc, #68]	@ (8003c44 <exti_assign_channel+0x95c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d106      	bne.n	8003c10 <exti_assign_channel+0x928>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003c02:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <exti_assign_channel+0x948>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <exti_assign_channel+0x948>)
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	6153      	str	r3, [r2, #20]
		break;
 8003c0e:	e144      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a05      	ldr	r2, [pc, #20]	@ (8003c2c <exti_assign_channel+0x944>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d115      	bne.n	8003c48 <exti_assign_channel+0x960>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8003c1c:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <exti_assign_channel+0x948>)
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	4a03      	ldr	r2, [pc, #12]	@ (8003c30 <exti_assign_channel+0x948>)
 8003c22:	f043 0303 	orr.w	r3, r3, #3
 8003c26:	6153      	str	r3, [r2, #20]
		break;
 8003c28:	e137      	b.n	8003e9a <exti_assign_channel+0xbb2>
 8003c2a:	bf00      	nop
 8003c2c:	40020c00 	.word	0x40020c00
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40021c00 	.word	0x40021c00
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020800 	.word	0x40020800
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a83      	ldr	r2, [pc, #524]	@ (8003e5c <exti_assign_channel+0xb74>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d106      	bne.n	8003c62 <exti_assign_channel+0x97a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8003c54:	4b82      	ldr	r3, [pc, #520]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4a81      	ldr	r2, [pc, #516]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6153      	str	r3, [r2, #20]
		break;
 8003c60:	e11b      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7e      	ldr	r2, [pc, #504]	@ (8003e64 <exti_assign_channel+0xb7c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d106      	bne.n	8003c7c <exti_assign_channel+0x994>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8003c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4a7b      	ldr	r2, [pc, #492]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c74:	f043 0307 	orr.w	r3, r3, #7
 8003c78:	6153      	str	r3, [r2, #20]
		break;
 8003c7a:	e10e      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003c7c:	bf00      	nop
		break;
 8003c7e:	e10c      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 13: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI13);
 8003c80:	4b77      	ldr	r3, [pc, #476]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	4a76      	ldr	r2, [pc, #472]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c8a:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	@ (8003e68 <exti_assign_channel+0xb80>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d104      	bne.n	8003ca2 <exti_assign_channel+0x9ba>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8003c98:	4b71      	ldr	r3, [pc, #452]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c9a:	4a71      	ldr	r2, [pc, #452]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8003ca0:	e0fb      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a70      	ldr	r2, [pc, #448]	@ (8003e6c <exti_assign_channel+0xb84>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d106      	bne.n	8003cbc <exti_assign_channel+0x9d4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8003cae:	4b6c      	ldr	r3, [pc, #432]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003cb4:	f043 0310 	orr.w	r3, r3, #16
 8003cb8:	6153      	str	r3, [r2, #20]
		break;
 8003cba:	e0ee      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e70 <exti_assign_channel+0xb88>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d106      	bne.n	8003cd6 <exti_assign_channel+0x9ee>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003cc8:	4b65      	ldr	r3, [pc, #404]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4a64      	ldr	r2, [pc, #400]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	6153      	str	r3, [r2, #20]
		break;
 8003cd4:	e0e1      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a65      	ldr	r2, [pc, #404]	@ (8003e74 <exti_assign_channel+0xb8c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d106      	bne.n	8003cf0 <exti_assign_channel+0xa08>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003ce8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003cec:	6153      	str	r3, [r2, #20]
		break;
 8003cee:	e0d4      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a59      	ldr	r2, [pc, #356]	@ (8003e5c <exti_assign_channel+0xb74>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d106      	bne.n	8003d0a <exti_assign_channel+0xa22>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003cfc:	4b58      	ldr	r3, [pc, #352]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	4a57      	ldr	r2, [pc, #348]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d06:	6153      	str	r3, [r2, #20]
		break;
 8003d08:	e0c7      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a54      	ldr	r2, [pc, #336]	@ (8003e64 <exti_assign_channel+0xb7c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d106      	bne.n	8003d24 <exti_assign_channel+0xa3c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8003d16:	4b52      	ldr	r3, [pc, #328]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4a51      	ldr	r2, [pc, #324]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d1c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003d20:	6153      	str	r3, [r2, #20]
		break;
 8003d22:	e0ba      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003d24:	bf00      	nop
		break;
 8003d26:	e0b8      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 14: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI14);
 8003d28:	4b4d      	ldr	r3, [pc, #308]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d32:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8003e68 <exti_assign_channel+0xb80>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d104      	bne.n	8003d4a <exti_assign_channel+0xa62>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003d40:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d42:	4a47      	ldr	r2, [pc, #284]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8003d48:	e0a7      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a46      	ldr	r2, [pc, #280]	@ (8003e6c <exti_assign_channel+0xb84>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d106      	bne.n	8003d64 <exti_assign_channel+0xa7c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8003d56:	4b42      	ldr	r3, [pc, #264]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4a41      	ldr	r2, [pc, #260]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6153      	str	r3, [r2, #20]
		break;
 8003d62:	e09a      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a41      	ldr	r2, [pc, #260]	@ (8003e70 <exti_assign_channel+0xb88>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d106      	bne.n	8003d7e <exti_assign_channel+0xa96>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003d70:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	4a3a      	ldr	r2, [pc, #232]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d7a:	6153      	str	r3, [r2, #20]
		break;
 8003d7c:	e08d      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3b      	ldr	r2, [pc, #236]	@ (8003e74 <exti_assign_channel+0xb8c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d106      	bne.n	8003d98 <exti_assign_channel+0xab0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8003d8a:	4b35      	ldr	r3, [pc, #212]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4a34      	ldr	r2, [pc, #208]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003d90:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003d94:	6153      	str	r3, [r2, #20]
		break;
 8003d96:	e080      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e5c <exti_assign_channel+0xb74>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d106      	bne.n	8003db2 <exti_assign_channel+0xaca>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003da4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dae:	6153      	str	r3, [r2, #20]
		break;
 8003db0:	e073      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e64 <exti_assign_channel+0xb7c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d106      	bne.n	8003dcc <exti_assign_channel+0xae4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003dbe:	4b28      	ldr	r3, [pc, #160]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4a27      	ldr	r2, [pc, #156]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003dc4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dc8:	6153      	str	r3, [r2, #20]
		break;
 8003dca:	e066      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003dcc:	bf00      	nop
		break;
 8003dce:	e064      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8003dd0:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003dd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dda:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <exti_assign_channel+0xb80>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d104      	bne.n	8003df2 <exti_assign_channel+0xb0a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003de8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003dea:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

		} else {
			__NOP();
		}
		break;
 8003df0:	e053      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e6c <exti_assign_channel+0xb84>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d106      	bne.n	8003e0c <exti_assign_channel+0xb24>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003dfe:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4a17      	ldr	r2, [pc, #92]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e08:	6153      	str	r3, [r2, #20]
		break;
 8003e0a:	e046      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a17      	ldr	r2, [pc, #92]	@ (8003e70 <exti_assign_channel+0xb88>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d106      	bne.n	8003e26 <exti_assign_channel+0xb3e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8003e18:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e22:	6153      	str	r3, [r2, #20]
		break;
 8003e24:	e039      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a11      	ldr	r2, [pc, #68]	@ (8003e74 <exti_assign_channel+0xb8c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d106      	bne.n	8003e40 <exti_assign_channel+0xb58>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e38:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8003e3c:	6153      	str	r3, [r2, #20]
		break;
 8003e3e:	e02c      	b.n	8003e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <exti_assign_channel+0xb74>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d115      	bne.n	8003e78 <exti_assign_channel+0xb90>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4a03      	ldr	r2, [pc, #12]	@ (8003e60 <exti_assign_channel+0xb78>)
 8003e52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e56:	6153      	str	r3, [r2, #20]
		break;
 8003e58:	e01f      	b.n	8003e9a <exti_assign_channel+0xbb2>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40013800 	.word	0x40013800
 8003e64:	40021c00 	.word	0x40021c00
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	40020400 	.word	0x40020400
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ea4 <exti_assign_channel+0xbbc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d106      	bne.n	8003e92 <exti_assign_channel+0xbaa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003e84:	4b08      	ldr	r3, [pc, #32]	@ (8003ea8 <exti_assign_channel+0xbc0>)
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4a07      	ldr	r2, [pc, #28]	@ (8003ea8 <exti_assign_channel+0xbc0>)
 8003e8a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8003e8e:	6153      	str	r3, [r2, #20]
		break;
 8003e90:	e003      	b.n	8003e9a <exti_assign_channel+0xbb2>
			__NOP();
 8003e92:	bf00      	nop
		break;
 8003e94:	e001      	b.n	8003e9a <exti_assign_channel+0xbb2>
	}

	default: {
		__NOP();
 8003e96:	bf00      	nop
		break;
 8003e98:	bf00      	nop
	}

	}
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40021c00 	.word	0x40021c00
 8003ea8:	40013800 	.word	0x40013800

08003eac <exti_select_edge>:
/*
 * Funcion para seleccionar adecuadamente el flanco que lanza la interrupcion
 * en el canal EXTI especifico.
 * */
static void exti_select_edge(EXTI_Config_t *extiConfig) {
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

	if (extiConfig->edgeType == EXTERNAL_INTERRUPT_FALLING_EDGE) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	791b      	ldrb	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f040 809b 	bne.w	8003ff4 <exti_select_edge+0x148>
		/* Falling Trigger selection register*/

		switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b0f      	cmp	r3, #15
 8003ec6:	f200 8093 	bhi.w	8003ff0 <exti_select_edge+0x144>
 8003eca:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed0 <exti_select_edge+0x24>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003f11 	.word	0x08003f11
 8003ed4:	08003f1f 	.word	0x08003f1f
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003f3b 	.word	0x08003f3b
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003f57 	.word	0x08003f57
 8003ee8:	08003f65 	.word	0x08003f65
 8003eec:	08003f73 	.word	0x08003f73
 8003ef0:	08003f81 	.word	0x08003f81
 8003ef4:	08003f8f 	.word	0x08003f8f
 8003ef8:	08003f9d 	.word	0x08003f9d
 8003efc:	08003fab 	.word	0x08003fab
 8003f00:	08003fb9 	.word	0x08003fb9
 8003f04:	08003fc7 	.word	0x08003fc7
 8003f08:	08003fd5 	.word	0x08003fd5
 8003f0c:	08003fe3 	.word	0x08003fe3
		case 0: {
			EXTI->FTSR |= (EXTI_FTSR_TR0);
 8003f10:	4b89      	ldr	r3, [pc, #548]	@ (8004138 <exti_select_edge+0x28c>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a88      	ldr	r2, [pc, #544]	@ (8004138 <exti_select_edge+0x28c>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	60d3      	str	r3, [r2, #12]
			break;
 8003f1c:	e106      	b.n	800412c <exti_select_edge+0x280>
		}
		case 1: {
			EXTI->FTSR |= (EXTI_FTSR_TR1);
 8003f1e:	4b86      	ldr	r3, [pc, #536]	@ (8004138 <exti_select_edge+0x28c>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a85      	ldr	r2, [pc, #532]	@ (8004138 <exti_select_edge+0x28c>)
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
			break;
 8003f2a:	e0ff      	b.n	800412c <exti_select_edge+0x280>
		}
		case 2: {
			EXTI->FTSR |= (EXTI_FTSR_TR2);
 8003f2c:	4b82      	ldr	r3, [pc, #520]	@ (8004138 <exti_select_edge+0x28c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a81      	ldr	r2, [pc, #516]	@ (8004138 <exti_select_edge+0x28c>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	60d3      	str	r3, [r2, #12]
			break;
 8003f38:	e0f8      	b.n	800412c <exti_select_edge+0x280>
		}
		case 3: {
			EXTI->FTSR |= (EXTI_FTSR_TR3);
 8003f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004138 <exti_select_edge+0x28c>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004138 <exti_select_edge+0x28c>)
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	60d3      	str	r3, [r2, #12]
			break;
 8003f46:	e0f1      	b.n	800412c <exti_select_edge+0x280>
		}
		case 4: {
			EXTI->FTSR |= (EXTI_FTSR_TR4);
 8003f48:	4b7b      	ldr	r3, [pc, #492]	@ (8004138 <exti_select_edge+0x28c>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004138 <exti_select_edge+0x28c>)
 8003f4e:	f043 0310 	orr.w	r3, r3, #16
 8003f52:	60d3      	str	r3, [r2, #12]
			break;
 8003f54:	e0ea      	b.n	800412c <exti_select_edge+0x280>
		}
		case 5: {
			EXTI->FTSR |= (EXTI_FTSR_TR5);
 8003f56:	4b78      	ldr	r3, [pc, #480]	@ (8004138 <exti_select_edge+0x28c>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a77      	ldr	r2, [pc, #476]	@ (8004138 <exti_select_edge+0x28c>)
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	60d3      	str	r3, [r2, #12]
			break;
 8003f62:	e0e3      	b.n	800412c <exti_select_edge+0x280>
		}
		case 6: {
			EXTI->FTSR |= (EXTI_FTSR_TR6);
 8003f64:	4b74      	ldr	r3, [pc, #464]	@ (8004138 <exti_select_edge+0x28c>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a73      	ldr	r2, [pc, #460]	@ (8004138 <exti_select_edge+0x28c>)
 8003f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f6e:	60d3      	str	r3, [r2, #12]
			break;
 8003f70:	e0dc      	b.n	800412c <exti_select_edge+0x280>
		}
		case 7: {
			EXTI->FTSR |= (EXTI_FTSR_TR7);
 8003f72:	4b71      	ldr	r3, [pc, #452]	@ (8004138 <exti_select_edge+0x28c>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a70      	ldr	r2, [pc, #448]	@ (8004138 <exti_select_edge+0x28c>)
 8003f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7c:	60d3      	str	r3, [r2, #12]
			break;
 8003f7e:	e0d5      	b.n	800412c <exti_select_edge+0x280>
		}
		case 8: {
			EXTI->FTSR |= (EXTI_FTSR_TR8);
 8003f80:	4b6d      	ldr	r3, [pc, #436]	@ (8004138 <exti_select_edge+0x28c>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a6c      	ldr	r2, [pc, #432]	@ (8004138 <exti_select_edge+0x28c>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f8a:	60d3      	str	r3, [r2, #12]
			break;
 8003f8c:	e0ce      	b.n	800412c <exti_select_edge+0x280>
		}
		case 9: {
			EXTI->FTSR |= (EXTI_FTSR_TR9);
 8003f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <exti_select_edge+0x28c>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a69      	ldr	r2, [pc, #420]	@ (8004138 <exti_select_edge+0x28c>)
 8003f94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f98:	60d3      	str	r3, [r2, #12]
			break;
 8003f9a:	e0c7      	b.n	800412c <exti_select_edge+0x280>
		}
		case 10: {
			EXTI->FTSR |= (EXTI_FTSR_TR10);
 8003f9c:	4b66      	ldr	r3, [pc, #408]	@ (8004138 <exti_select_edge+0x28c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a65      	ldr	r2, [pc, #404]	@ (8004138 <exti_select_edge+0x28c>)
 8003fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fa6:	60d3      	str	r3, [r2, #12]
			break;
 8003fa8:	e0c0      	b.n	800412c <exti_select_edge+0x280>
		}
		case 11: {
			EXTI->FTSR |= (EXTI_FTSR_TR11);
 8003faa:	4b63      	ldr	r3, [pc, #396]	@ (8004138 <exti_select_edge+0x28c>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4a62      	ldr	r2, [pc, #392]	@ (8004138 <exti_select_edge+0x28c>)
 8003fb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fb4:	60d3      	str	r3, [r2, #12]
			break;
 8003fb6:	e0b9      	b.n	800412c <exti_select_edge+0x280>
		}
		case 12: {
			EXTI->FTSR |= (EXTI_FTSR_TR12);
 8003fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8004138 <exti_select_edge+0x28c>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a5e      	ldr	r2, [pc, #376]	@ (8004138 <exti_select_edge+0x28c>)
 8003fbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fc2:	60d3      	str	r3, [r2, #12]
			break;
 8003fc4:	e0b2      	b.n	800412c <exti_select_edge+0x280>
		}
		case 13: {
			EXTI->FTSR |= (EXTI_FTSR_TR13);
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004138 <exti_select_edge+0x28c>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4a5b      	ldr	r2, [pc, #364]	@ (8004138 <exti_select_edge+0x28c>)
 8003fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fd0:	60d3      	str	r3, [r2, #12]
			break;
 8003fd2:	e0ab      	b.n	800412c <exti_select_edge+0x280>
		}
		case 14: {
			EXTI->FTSR |= (EXTI_FTSR_TR14);
 8003fd4:	4b58      	ldr	r3, [pc, #352]	@ (8004138 <exti_select_edge+0x28c>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a57      	ldr	r2, [pc, #348]	@ (8004138 <exti_select_edge+0x28c>)
 8003fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fde:	60d3      	str	r3, [r2, #12]
			break;
 8003fe0:	e0a4      	b.n	800412c <exti_select_edge+0x280>
		}
		case 15: {
			EXTI->FTSR |= (EXTI_FTSR_TR15);
 8003fe2:	4b55      	ldr	r3, [pc, #340]	@ (8004138 <exti_select_edge+0x28c>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4a54      	ldr	r2, [pc, #336]	@ (8004138 <exti_select_edge+0x28c>)
 8003fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fec:	60d3      	str	r3, [r2, #12]
			break;
 8003fee:	e09d      	b.n	800412c <exti_select_edge+0x280>
		}
		default: {
			__NOP();
 8003ff0:	bf00      	nop
			break;
 8003ff2:	e09b      	b.n	800412c <exti_select_edge+0x280>
		}
		}
	} else {

		switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	791b      	ldrb	r3, [r3, #4]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	f200 8094 	bhi.w	8004128 <exti_select_edge+0x27c>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <exti_select_edge+0x15c>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004049 	.word	0x08004049
 800400c:	08004057 	.word	0x08004057
 8004010:	08004065 	.word	0x08004065
 8004014:	08004073 	.word	0x08004073
 8004018:	08004081 	.word	0x08004081
 800401c:	0800408f 	.word	0x0800408f
 8004020:	0800409d 	.word	0x0800409d
 8004024:	080040ab 	.word	0x080040ab
 8004028:	080040b9 	.word	0x080040b9
 800402c:	080040c7 	.word	0x080040c7
 8004030:	080040d5 	.word	0x080040d5
 8004034:	080040e3 	.word	0x080040e3
 8004038:	080040f1 	.word	0x080040f1
 800403c:	080040ff 	.word	0x080040ff
 8004040:	0800410d 	.word	0x0800410d
 8004044:	0800411b 	.word	0x0800411b
		case 0: {
			EXTI->RTSR |= (EXTI_RTSR_TR0);
 8004048:	4b3b      	ldr	r3, [pc, #236]	@ (8004138 <exti_select_edge+0x28c>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a3a      	ldr	r2, [pc, #232]	@ (8004138 <exti_select_edge+0x28c>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6093      	str	r3, [r2, #8]
			break;
 8004054:	e06a      	b.n	800412c <exti_select_edge+0x280>
		}
		case 1: {
			EXTI->RTSR |= (EXTI_RTSR_TR1);
 8004056:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <exti_select_edge+0x28c>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	4a37      	ldr	r2, [pc, #220]	@ (8004138 <exti_select_edge+0x28c>)
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	6093      	str	r3, [r2, #8]
			break;
 8004062:	e063      	b.n	800412c <exti_select_edge+0x280>
		}
		case 2: {
			EXTI->RTSR |= (EXTI_RTSR_TR2);
 8004064:	4b34      	ldr	r3, [pc, #208]	@ (8004138 <exti_select_edge+0x28c>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a33      	ldr	r2, [pc, #204]	@ (8004138 <exti_select_edge+0x28c>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	6093      	str	r3, [r2, #8]
			break;
 8004070:	e05c      	b.n	800412c <exti_select_edge+0x280>
		}
		case 3: {
			EXTI->RTSR |= (EXTI_RTSR_TR3);
 8004072:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <exti_select_edge+0x28c>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4a30      	ldr	r2, [pc, #192]	@ (8004138 <exti_select_edge+0x28c>)
 8004078:	f043 0308 	orr.w	r3, r3, #8
 800407c:	6093      	str	r3, [r2, #8]
			break;
 800407e:	e055      	b.n	800412c <exti_select_edge+0x280>
		}
		case 4: {
			EXTI->RTSR |= (EXTI_RTSR_TR4);
 8004080:	4b2d      	ldr	r3, [pc, #180]	@ (8004138 <exti_select_edge+0x28c>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a2c      	ldr	r2, [pc, #176]	@ (8004138 <exti_select_edge+0x28c>)
 8004086:	f043 0310 	orr.w	r3, r3, #16
 800408a:	6093      	str	r3, [r2, #8]
			break;
 800408c:	e04e      	b.n	800412c <exti_select_edge+0x280>
		}
		case 5: {
			EXTI->RTSR |= (EXTI_RTSR_TR5);
 800408e:	4b2a      	ldr	r3, [pc, #168]	@ (8004138 <exti_select_edge+0x28c>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <exti_select_edge+0x28c>)
 8004094:	f043 0320 	orr.w	r3, r3, #32
 8004098:	6093      	str	r3, [r2, #8]
			break;
 800409a:	e047      	b.n	800412c <exti_select_edge+0x280>
		}
		case 6: {
			EXTI->RTSR |= (EXTI_RTSR_TR6);
 800409c:	4b26      	ldr	r3, [pc, #152]	@ (8004138 <exti_select_edge+0x28c>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a25      	ldr	r2, [pc, #148]	@ (8004138 <exti_select_edge+0x28c>)
 80040a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040a6:	6093      	str	r3, [r2, #8]
			break;
 80040a8:	e040      	b.n	800412c <exti_select_edge+0x280>
		}
		case 7: {
			EXTI->RTSR |= (EXTI_RTSR_TR7);
 80040aa:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <exti_select_edge+0x28c>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4a22      	ldr	r2, [pc, #136]	@ (8004138 <exti_select_edge+0x28c>)
 80040b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b4:	6093      	str	r3, [r2, #8]
			break;
 80040b6:	e039      	b.n	800412c <exti_select_edge+0x280>
		}
		case 8: {
			EXTI->RTSR |= (EXTI_RTSR_TR8);
 80040b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004138 <exti_select_edge+0x28c>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004138 <exti_select_edge+0x28c>)
 80040be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c2:	6093      	str	r3, [r2, #8]
			break;
 80040c4:	e032      	b.n	800412c <exti_select_edge+0x280>
		}
		case 9: {
			EXTI->RTSR |= (EXTI_RTSR_TR9);
 80040c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004138 <exti_select_edge+0x28c>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <exti_select_edge+0x28c>)
 80040cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040d0:	6093      	str	r3, [r2, #8]
			break;
 80040d2:	e02b      	b.n	800412c <exti_select_edge+0x280>
		}
		case 10: {
			EXTI->RTSR |= (EXTI_RTSR_TR10);
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <exti_select_edge+0x28c>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a17      	ldr	r2, [pc, #92]	@ (8004138 <exti_select_edge+0x28c>)
 80040da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040de:	6093      	str	r3, [r2, #8]
			break;
 80040e0:	e024      	b.n	800412c <exti_select_edge+0x280>
		}
		case 11: {
			EXTI->RTSR |= (EXTI_RTSR_TR11);
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <exti_select_edge+0x28c>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a14      	ldr	r2, [pc, #80]	@ (8004138 <exti_select_edge+0x28c>)
 80040e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040ec:	6093      	str	r3, [r2, #8]
			break;
 80040ee:	e01d      	b.n	800412c <exti_select_edge+0x280>
		}
		case 12: {
			EXTI->RTSR |= (EXTI_RTSR_TR12);
 80040f0:	4b11      	ldr	r3, [pc, #68]	@ (8004138 <exti_select_edge+0x28c>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a10      	ldr	r2, [pc, #64]	@ (8004138 <exti_select_edge+0x28c>)
 80040f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040fa:	6093      	str	r3, [r2, #8]
			break;
 80040fc:	e016      	b.n	800412c <exti_select_edge+0x280>
		}
		case 13: {
			EXTI->RTSR |= (EXTI_RTSR_TR13);
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <exti_select_edge+0x28c>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4a0d      	ldr	r2, [pc, #52]	@ (8004138 <exti_select_edge+0x28c>)
 8004104:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004108:	6093      	str	r3, [r2, #8]
			break;
 800410a:	e00f      	b.n	800412c <exti_select_edge+0x280>
		}
		case 14: {
			EXTI->RTSR |= (EXTI_RTSR_TR14);
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <exti_select_edge+0x28c>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <exti_select_edge+0x28c>)
 8004112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004116:	6093      	str	r3, [r2, #8]
			break;
 8004118:	e008      	b.n	800412c <exti_select_edge+0x280>
		}
		case 15: {
			EXTI->RTSR |= (EXTI_RTSR_TR15);
 800411a:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <exti_select_edge+0x28c>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4a06      	ldr	r2, [pc, #24]	@ (8004138 <exti_select_edge+0x28c>)
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	6093      	str	r3, [r2, #8]
			break;
 8004126:	e001      	b.n	800412c <exti_select_edge+0x280>
		}
		default: {
			__NOP();
 8004128:	bf00      	nop
			break;
 800412a:	bf00      	nop
		}
		}
	}
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40013c00 	.word	0x40013c00

0800413c <exti_config_interrupt>:

/*
 * Funcion que configura las mascaras de interrupciones (registro de mascaras) y
 * ademas matricula cada una de las posibles interrupciones en el NVIC
 * */
static void exti_config_interrupt(EXTI_Config_t *extiConfig) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
	switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	2b0f      	cmp	r3, #15
 800414c:	f200 8094 	bhi.w	8004278 <exti_config_interrupt+0x13c>
 8004150:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <exti_config_interrupt+0x1c>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	08004199 	.word	0x08004199
 800415c:	080041a7 	.word	0x080041a7
 8004160:	080041b5 	.word	0x080041b5
 8004164:	080041c3 	.word	0x080041c3
 8004168:	080041d1 	.word	0x080041d1
 800416c:	080041df 	.word	0x080041df
 8004170:	080041ed 	.word	0x080041ed
 8004174:	080041fb 	.word	0x080041fb
 8004178:	08004209 	.word	0x08004209
 800417c:	08004217 	.word	0x08004217
 8004180:	08004225 	.word	0x08004225
 8004184:	08004233 	.word	0x08004233
 8004188:	08004241 	.word	0x08004241
 800418c:	0800424f 	.word	0x0800424f
 8004190:	0800425d 	.word	0x0800425d
 8004194:	0800426b 	.word	0x0800426b
	case 0: {
		EXTI->IMR |=  (EXTI_IMR_MR0);
 8004198:	4b6f      	ldr	r3, [pc, #444]	@ (8004358 <exti_config_interrupt+0x21c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6e      	ldr	r2, [pc, #440]	@ (8004358 <exti_config_interrupt+0x21c>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6013      	str	r3, [r2, #0]
		break;
 80041a4:	e06a      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 1: {
		EXTI->IMR |=  (EXTI_IMR_MR1);
 80041a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	6013      	str	r3, [r2, #0]
		break;
 80041b2:	e063      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 2: {
		EXTI->IMR |=  (EXTI_IMR_MR2);
 80041b4:	4b68      	ldr	r3, [pc, #416]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a67      	ldr	r2, [pc, #412]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6013      	str	r3, [r2, #0]
		break;
 80041c0:	e05c      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 3: {
		EXTI->IMR |=  (EXTI_IMR_MR3);
 80041c2:	4b65      	ldr	r3, [pc, #404]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a64      	ldr	r2, [pc, #400]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6013      	str	r3, [r2, #0]
		break;
 80041ce:	e055      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 4: {
		EXTI->IMR |=  (EXTI_IMR_MR4);
 80041d0:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a60      	ldr	r2, [pc, #384]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041d6:	f043 0310 	orr.w	r3, r3, #16
 80041da:	6013      	str	r3, [r2, #0]
		break;
 80041dc:	e04e      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 5: {
		EXTI->IMR |=  (EXTI_IMR_MR5);
 80041de:	4b5e      	ldr	r3, [pc, #376]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041e4:	f043 0320 	orr.w	r3, r3, #32
 80041e8:	6013      	str	r3, [r2, #0]
		break;
 80041ea:	e047      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 6: {
		EXTI->IMR |=  (EXTI_IMR_MR6);
 80041ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a59      	ldr	r2, [pc, #356]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f6:	6013      	str	r3, [r2, #0]
		break;
 80041f8:	e040      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 7: {
		EXTI->IMR |=  (EXTI_IMR_MR7);
 80041fa:	4b57      	ldr	r3, [pc, #348]	@ (8004358 <exti_config_interrupt+0x21c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a56      	ldr	r2, [pc, #344]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004204:	6013      	str	r3, [r2, #0]
		break;
 8004206:	e039      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 8: {
		EXTI->IMR |=  (EXTI_IMR_MR8);
 8004208:	4b53      	ldr	r3, [pc, #332]	@ (8004358 <exti_config_interrupt+0x21c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a52      	ldr	r2, [pc, #328]	@ (8004358 <exti_config_interrupt+0x21c>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004212:	6013      	str	r3, [r2, #0]
		break;
 8004214:	e032      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 9: {
		EXTI->IMR |=  (EXTI_IMR_MR9);
 8004216:	4b50      	ldr	r3, [pc, #320]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a4f      	ldr	r2, [pc, #316]	@ (8004358 <exti_config_interrupt+0x21c>)
 800421c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004220:	6013      	str	r3, [r2, #0]
		break;
 8004222:	e02b      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 10: {
		EXTI->IMR |=  (EXTI_IMR_MR10);
 8004224:	4b4c      	ldr	r3, [pc, #304]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a4b      	ldr	r2, [pc, #300]	@ (8004358 <exti_config_interrupt+0x21c>)
 800422a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800422e:	6013      	str	r3, [r2, #0]
		break;
 8004230:	e024      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 11: {
		EXTI->IMR |=  (EXTI_IMR_MR11);
 8004232:	4b49      	ldr	r3, [pc, #292]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a48      	ldr	r2, [pc, #288]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800423c:	6013      	str	r3, [r2, #0]
		break;
 800423e:	e01d      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 12: {
		EXTI->IMR |=  (EXTI_IMR_MR12);
 8004240:	4b45      	ldr	r3, [pc, #276]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a44      	ldr	r2, [pc, #272]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004246:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800424a:	6013      	str	r3, [r2, #0]
		break;
 800424c:	e016      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 13: {
		EXTI->IMR |=  (EXTI_IMR_MR13);
 800424e:	4b42      	ldr	r3, [pc, #264]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a41      	ldr	r2, [pc, #260]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004254:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004258:	6013      	str	r3, [r2, #0]
		break;
 800425a:	e00f      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 14: {
		EXTI->IMR |=  (EXTI_IMR_MR14);
 800425c:	4b3e      	ldr	r3, [pc, #248]	@ (8004358 <exti_config_interrupt+0x21c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a3d      	ldr	r2, [pc, #244]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004266:	6013      	str	r3, [r2, #0]
		break;
 8004268:	e008      	b.n	800427c <exti_config_interrupt+0x140>
	}
	case 15: {
		EXTI->IMR |=  (EXTI_IMR_MR15);
 800426a:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <exti_config_interrupt+0x21c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3a      	ldr	r2, [pc, #232]	@ (8004358 <exti_config_interrupt+0x21c>)
 8004270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004274:	6013      	str	r3, [r2, #0]
		break;
 8004276:	e001      	b.n	800427c <exti_config_interrupt+0x140>
	}
	default: {
		__NOP();
 8004278:	bf00      	nop
		break;
 800427a:	bf00      	nop
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d862      	bhi.n	800434c <exti_config_interrupt+0x210>
 8004286:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <exti_config_interrupt+0x150>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042d5 	.word	0x080042d5
 8004294:	080042dd 	.word	0x080042dd
 8004298:	080042e5 	.word	0x080042e5
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	080042f5 	.word	0x080042f5
 80042a4:	080042fd 	.word	0x080042fd
 80042a8:	08004305 	.word	0x08004305
 80042ac:	0800430d 	.word	0x0800430d
 80042b0:	08004315 	.word	0x08004315
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	08004325 	.word	0x08004325
 80042bc:	0800432d 	.word	0x0800432d
 80042c0:	08004335 	.word	0x08004335
 80042c4:	0800433d 	.word	0x0800433d
 80042c8:	08004345 	.word	0x08004345
	case 0: {
		__NVIC_EnableIRQ(EXTI0_IRQn);
 80042cc:	2006      	movs	r0, #6
 80042ce:	f7fe ffc5 	bl	800325c <__NVIC_EnableIRQ>
		break;
 80042d2:	e03c      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 1: {
		__NVIC_EnableIRQ(EXTI1_IRQn);
 80042d4:	2007      	movs	r0, #7
 80042d6:	f7fe ffc1 	bl	800325c <__NVIC_EnableIRQ>
		break;
 80042da:	e038      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 2: {
		__NVIC_EnableIRQ(EXTI2_IRQn);
 80042dc:	2008      	movs	r0, #8
 80042de:	f7fe ffbd 	bl	800325c <__NVIC_EnableIRQ>
		break;
 80042e2:	e034      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 3: {
		__NVIC_EnableIRQ(EXTI3_IRQn);
 80042e4:	2009      	movs	r0, #9
 80042e6:	f7fe ffb9 	bl	800325c <__NVIC_EnableIRQ>
		break;
 80042ea:	e030      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 4: {
		__NVIC_EnableIRQ(EXTI4_IRQn);
 80042ec:	200a      	movs	r0, #10
 80042ee:	f7fe ffb5 	bl	800325c <__NVIC_EnableIRQ>
		break;
 80042f2:	e02c      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 5: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80042f4:	2017      	movs	r0, #23
 80042f6:	f7fe ffb1 	bl	800325c <__NVIC_EnableIRQ>
		break;
 80042fa:	e028      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 6: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80042fc:	2017      	movs	r0, #23
 80042fe:	f7fe ffad 	bl	800325c <__NVIC_EnableIRQ>
		break;
 8004302:	e024      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 7: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004304:	2017      	movs	r0, #23
 8004306:	f7fe ffa9 	bl	800325c <__NVIC_EnableIRQ>
		break;
 800430a:	e020      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 8: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800430c:	2017      	movs	r0, #23
 800430e:	f7fe ffa5 	bl	800325c <__NVIC_EnableIRQ>
		break;
 8004312:	e01c      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 9: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004314:	2017      	movs	r0, #23
 8004316:	f7fe ffa1 	bl	800325c <__NVIC_EnableIRQ>
		break;
 800431a:	e018      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 10: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800431c:	2028      	movs	r0, #40	@ 0x28
 800431e:	f7fe ff9d 	bl	800325c <__NVIC_EnableIRQ>
		break;
 8004322:	e014      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 11: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004324:	2028      	movs	r0, #40	@ 0x28
 8004326:	f7fe ff99 	bl	800325c <__NVIC_EnableIRQ>
		break;
 800432a:	e010      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 12: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800432c:	2028      	movs	r0, #40	@ 0x28
 800432e:	f7fe ff95 	bl	800325c <__NVIC_EnableIRQ>
		break;
 8004332:	e00c      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 13: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004334:	2028      	movs	r0, #40	@ 0x28
 8004336:	f7fe ff91 	bl	800325c <__NVIC_EnableIRQ>
		break;
 800433a:	e008      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 14: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800433c:	2028      	movs	r0, #40	@ 0x28
 800433e:	f7fe ff8d 	bl	800325c <__NVIC_EnableIRQ>
		break;
 8004342:	e004      	b.n	800434e <exti_config_interrupt+0x212>
	}
	case 15: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004344:	2028      	movs	r0, #40	@ 0x28
 8004346:	f7fe ff89 	bl	800325c <__NVIC_EnableIRQ>
		break;
 800434a:	e000      	b.n	800434e <exti_config_interrupt+0x212>
	}
	default: {
		break;
 800434c:	bf00      	nop
	}

	}
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40013c00 	.word	0x40013c00

0800435c <callback_ExtInt0>:

/**/
__attribute__ ((weak)) void callback_ExtInt0(void) {
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	__NOP();
 8004360:	bf00      	nop
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <callback_ExtInt1>:
__attribute__ ((weak)) void callback_ExtInt1(void) {
 800436a:	b480      	push	{r7}
 800436c:	af00      	add	r7, sp, #0
	__NOP();
 800436e:	bf00      	nop
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <callback_ExtInt2>:
__attribute__ ((weak)) void callback_ExtInt2(void) {
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
	__NOP();
 800437c:	bf00      	nop
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <callback_ExtInt3>:
__attribute__ ((weak)) void callback_ExtInt3(void) {
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0
	__NOP();
 800438a:	bf00      	nop
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <callback_ExtInt4>:
__attribute__ ((weak)) void callback_ExtInt4(void) {
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
	__NOP();
 8004398:	bf00      	nop
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <callback_ExtInt6>:
__attribute__ ((weak)) void callback_ExtInt5(void) {
	__NOP();
}
__attribute__ ((weak)) void callback_ExtInt6(void) {
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
	__NOP();
 80043a6:	bf00      	nop
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <callback_ExtInt7>:
__attribute__ ((weak)) void callback_ExtInt7(void) {
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
	__NOP();
 80043b4:	bf00      	nop
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <callback_ExtInt8>:
__attribute__ ((weak)) void callback_ExtInt8(void) {
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0
	__NOP();
 80043c2:	bf00      	nop
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <callback_ExtInt9>:
__attribute__ ((weak)) void callback_ExtInt9(void) {
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
	__NOP();
 80043d0:	bf00      	nop
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <callback_ExtInt10>:
__attribute__ ((weak)) void callback_ExtInt10(void) {
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
	__NOP();
 80043de:	bf00      	nop
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <callback_ExtInt11>:
__attribute__ ((weak)) void callback_ExtInt11(void) {
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	__NOP();
 80043ec:	bf00      	nop
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <callback_ExtInt12>:
__attribute__ ((weak)) void callback_ExtInt12(void) {
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
	__NOP();
 80043fa:	bf00      	nop
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <callback_ExtInt14>:
__attribute__ ((weak)) void callback_ExtInt13(void) {
	__NOP();
}
__attribute__ ((weak)) void callback_ExtInt14(void) {
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
	__NOP();
 8004408:	bf00      	nop
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <callback_ExtInt15>:
__attribute__ ((weak)) void callback_ExtInt15(void) {
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0
	__NOP();
 8004416:	bf00      	nop
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <EXTI0_IRQHandler>:


/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void) {
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR0) {
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <EXTI0_IRQHandler+0x24>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8004430:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <EXTI0_IRQHandler+0x24>)
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4a03      	ldr	r2, [pc, #12]	@ (8004444 <EXTI0_IRQHandler+0x24>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt0();
 800443c:	f7ff ff8e 	bl	800435c <callback_ExtInt0>
	}
}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40013c00 	.word	0x40013c00

08004448 <EXTI1_IRQHandler>:


/* ISR de la interrupción canal 1*/
void EXTI1_IRQHandler(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_1 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR1) {
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <EXTI1_IRQHandler+0x24>)
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <EXTI1_IRQHandler+0x24>)
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	4a03      	ldr	r2, [pc, #12]	@ (800446c <EXTI1_IRQHandler+0x24>)
 800445e:	f043 0302 	orr.w	r3, r3, #2
 8004462:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt1();
 8004464:	f7ff ff81 	bl	800436a <callback_ExtInt1>
	}
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40013c00 	.word	0x40013c00

08004470 <EXTI2_IRQHandler>:
/* ISR de la interrupción canal 2*/
void EXTI2_IRQHandler(void) {
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_2 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR2) {
 8004474:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <EXTI2_IRQHandler+0x24>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8004480:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <EXTI2_IRQHandler+0x24>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	4a03      	ldr	r2, [pc, #12]	@ (8004494 <EXTI2_IRQHandler+0x24>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt2();
 800448c:	f7ff ff74 	bl	8004378 <callback_ExtInt2>
	}
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40013c00 	.word	0x40013c00

08004498 <EXTI3_IRQHandler>:
/* ISR de la interrupción canal 3*/
void EXTI3_IRQHandler(void) {
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_3 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR3) {
 800449c:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <EXTI3_IRQHandler+0x24>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <EXTI3_IRQHandler+0x24>)
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	4a03      	ldr	r2, [pc, #12]	@ (80044bc <EXTI3_IRQHandler+0x24>)
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt3();
 80044b4:	f7ff ff67 	bl	8004386 <callback_ExtInt3>
	}
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40013c00 	.word	0x40013c00

080044c0 <EXTI4_IRQHandler>:
/* ISR de la interrupción canal 4*/
void EXTI4_IRQHandler(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_4 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR4) {
 80044c4:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <EXTI4_IRQHandler+0x24>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 80044d0:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <EXTI4_IRQHandler+0x24>)
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	4a03      	ldr	r2, [pc, #12]	@ (80044e4 <EXTI4_IRQHandler+0x24>)
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt4();
 80044dc:	f7ff ff5a 	bl	8004394 <callback_ExtInt4>
	}
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	/* Agregar todos los casos*/

	if (EXTI->PR & EXTI_PR_PR5) {
 80044ec:	4b25      	ldr	r3, [pc, #148]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR5;
 80044f8:	4b22      	ldr	r3, [pc, #136]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	4a21      	ldr	r2, [pc, #132]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 80044fe:	f043 0320 	orr.w	r3, r3, #32
 8004502:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt5();
 8004504:	f7fd fcb4 	bl	8001e70 <callback_ExtInt5>
		EXTI->PR |= EXTI_PR_PR9;

		// llamamos al callback
		callback_ExtInt9();
	}
}
 8004508:	e03a      	b.n	8004580 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR6) {
 800450a:	4b1e      	ldr	r3, [pc, #120]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4a1a      	ldr	r2, [pc, #104]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 800451c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004520:	6153      	str	r3, [r2, #20]
		callback_ExtInt6();
 8004522:	f7ff ff3e 	bl	80043a2 <callback_ExtInt6>
}
 8004526:	e02b      	b.n	8004580 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR7) {
 8004528:	4b16      	ldr	r3, [pc, #88]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8004534:	4b13      	ldr	r3, [pc, #76]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	4a12      	ldr	r2, [pc, #72]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 800453a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453e:	6153      	str	r3, [r2, #20]
		callback_ExtInt7();
 8004540:	f7ff ff36 	bl	80043b0 <callback_ExtInt7>
}
 8004544:	e01c      	b.n	8004580 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR8) {
 8004546:	4b0f      	ldr	r3, [pc, #60]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8004552:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4a0b      	ldr	r2, [pc, #44]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455c:	6153      	str	r3, [r2, #20]
		callback_ExtInt8();
 800455e:	f7ff ff2e 	bl	80043be <callback_ExtInt8>
}
 8004562:	e00d      	b.n	8004580 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR9) {
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 8004570:	4b04      	ldr	r3, [pc, #16]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	4a03      	ldr	r2, [pc, #12]	@ (8004584 <EXTI9_5_IRQHandler+0x9c>)
 8004576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800457a:	6153      	str	r3, [r2, #20]
		callback_ExtInt9();
 800457c:	f7ff ff26 	bl	80043cc <callback_ExtInt9>
}
 8004580:	bf00      	nop
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40013c00 	.word	0x40013c00

08004588 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void) {
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0

	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15

	if (EXTI->PR & EXTI_PR_PR10) {
 800458c:	4b2d      	ldr	r3, [pc, #180]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8004598:	4b2a      	ldr	r3, [pc, #168]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4a29      	ldr	r2, [pc, #164]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 800459e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045a2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_ExtInt10();
 80045a4:	f7ff ff19 	bl	80043da <callback_ExtInt10>
		EXTI->PR |= EXTI_PR_PR15;

		// llamamos al callback
		callback_ExtInt15();
	}
}
 80045a8:	e049      	b.n	800463e <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR11) {
 80045aa:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80045b6:	4b23      	ldr	r3, [pc, #140]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80045c0:	6153      	str	r3, [r2, #20]
		callback_ExtInt11();
 80045c2:	f7ff ff11 	bl	80043e8 <callback_ExtInt11>
}
 80045c6:	e03a      	b.n	800463e <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR12) {
 80045c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045de:	6153      	str	r3, [r2, #20]
		callback_ExtInt12();
 80045e0:	f7ff ff09 	bl	80043f6 <callback_ExtInt12>
}
 80045e4:	e02b      	b.n	800463e <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR13) {
 80045e6:	4b17      	ldr	r3, [pc, #92]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4a13      	ldr	r2, [pc, #76]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 80045f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045fc:	6153      	str	r3, [r2, #20]
		callback_ExtInt13();
 80045fe:	f7fd fc23 	bl	8001e48 <callback_ExtInt13>
}
 8004602:	e01c      	b.n	800463e <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR14) {
 8004604:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	4a0b      	ldr	r2, [pc, #44]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 8004616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800461a:	6153      	str	r3, [r2, #20]
		callback_ExtInt14();
 800461c:	f7ff fef2 	bl	8004404 <callback_ExtInt14>
}
 8004620:	e00d      	b.n	800463e <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR15) {
 8004622:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800462e:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	4a04      	ldr	r2, [pc, #16]	@ (8004644 <EXTI15_10_IRQHandler+0xbc>)
 8004634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004638:	6153      	str	r3, [r2, #20]
		callback_ExtInt15();
 800463a:	f7ff feea 	bl	8004412 <callback_ExtInt15>
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40013c00 	.word	0x40013c00

08004648 <gpio_Config>:
 * orden estricto para poder que el sistema permita configurar el periferico X.
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal del reloj del periferico)
 */
void gpio_Config (GPIO_Handler_t *pGPIOHandler){
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

	/* Verificamos que el pin seleccionado es correcto */
	assert_param(IS_GPIO_PIN(pGPIOHandler->pinConfig.GPIO_PinNumber));

	// 1) Activar el periferico
	gpio_enable_clock_peripheral(pGPIOHandler);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f813 	bl	800467c <gpio_enable_clock_peripheral>

	// Despues de activado, podemos empezar a configurar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	gpio_config_mode(pGPIOHandler);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f86e 	bl	8004738 <gpio_config_mode>

	// 3) Configurando elregistro GPIOx_OTYPER
	gpio_config_output_type(pGPIOHandler);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f896 	bl	800478e <gpio_config_output_type>

	// 4) Configurando ahora la velocidad
	gpio_config_output_speed(pGPIOHandler);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8bc 	bl	80047e0 <gpio_config_output_speed>

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	gpio_config_pullup_pulldown(pGPIOHandler);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8e4 	bl	8004836 <gpio_config_pullup_pulldown>

	// 6) Configuracion de las funciones alternativas... se vera luego, mas adelante en el curso
	gpio_config_alternate_function(pGPIOHandler);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f90c 	bl	800488c <gpio_config_alternate_function>

} // Fin del GPIO_config
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <gpio_enable_clock_peripheral>:

/*
 * Enable clock signal for specific GPIOx port
 */
void gpio_enable_clock_peripheral (GPIO_Handler_t *pGPIOHandler){
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

	// Verificamos que el puerto configurado si es permitido
	assert_param(IS_GPIO_ALL_INSTANCE(pGPIOHandler -> pGPIOx));

	// Verificamos para GPIOA
		if(pGPIOHandler->pGPIOx == GPIOA){
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a24      	ldr	r2, [pc, #144]	@ (800471c <gpio_enable_clock_peripheral+0xa0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d106      	bne.n	800469c <gpio_enable_clock_peripheral+0x20>
			// Escribimos 1 (SET) en la posicion correspondiente en GPIOA
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800468e:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6313      	str	r3, [r2, #48]	@ 0x30
		// Verificamos para GPIOH
		else if(pGPIOHandler ->pGPIOx == GPIOH){
			// Escribimos 1 (SET) en la posicion correspondiente en GPIOH
			RCC ->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
		}
}
 800469a:	e03a      	b.n	8004712 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler ->pGPIOx == GPIOB){
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a20      	ldr	r2, [pc, #128]	@ (8004724 <gpio_enable_clock_peripheral+0xa8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d106      	bne.n	80046b4 <gpio_enable_clock_peripheral+0x38>
			RCC ->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80046a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80046b2:	e02e      	b.n	8004712 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler ->pGPIOx == GPIOC){
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <gpio_enable_clock_peripheral+0xac>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d106      	bne.n	80046cc <gpio_enable_clock_peripheral+0x50>
			RCC ->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80046be:	4b18      	ldr	r3, [pc, #96]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	4a17      	ldr	r2, [pc, #92]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80046ca:	e022      	b.n	8004712 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler ->pGPIOx == GPIOD){
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a16      	ldr	r2, [pc, #88]	@ (800472c <gpio_enable_clock_peripheral+0xb0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d106      	bne.n	80046e4 <gpio_enable_clock_peripheral+0x68>
			RCC ->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	4a11      	ldr	r2, [pc, #68]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80046e2:	e016      	b.n	8004712 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler ->pGPIOx == GPIOE){
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a11      	ldr	r2, [pc, #68]	@ (8004730 <gpio_enable_clock_peripheral+0xb4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d106      	bne.n	80046fc <gpio_enable_clock_peripheral+0x80>
			RCC ->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 80046f4:	f043 0310 	orr.w	r3, r3, #16
 80046f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80046fa:	e00a      	b.n	8004712 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler ->pGPIOx == GPIOH){
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0c      	ldr	r2, [pc, #48]	@ (8004734 <gpio_enable_clock_peripheral+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d105      	bne.n	8004712 <gpio_enable_clock_peripheral+0x96>
			RCC ->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	4a05      	ldr	r2, [pc, #20]	@ (8004720 <gpio_enable_clock_peripheral+0xa4>)
 800470c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004710:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40020000 	.word	0x40020000
 8004720:	40023800 	.word	0x40023800
 8004724:	40020400 	.word	0x40020400
 8004728:	40020800 	.word	0x40020800
 800472c:	40020c00 	.word	0x40020c00
 8004730:	40021000 	.word	0x40021000
 8004734:	40021c00 	.word	0x40021c00

08004738 <gpio_config_mode>:
 * - Input
 * - Output
 * - Analog
 * - Alternate function
 */
void gpio_config_mode (GPIO_Handler_t *pGPIOHandler){
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
	/* Verificamos que si el modo que se ha seleccionado es permitido */
	assert_param(IS_GPIO_MODE(pGPIOHandler ->pinConfig.GPIO_PinMode));

	// Aca estamos leyendo la config, moviendo "PinNumber" veces a la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler ->pinConfig.GPIO_PinMode << 2 * pGPIOHandler ->pinConfig.GPIO_PinNumber);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	795b      	ldrb	r3, [r3, #5]
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	// Para lo cual aplicamos una mascara y una operacion bitwise AND
	pGPIOHandler ->pGPIOx ->MODER &= ~(0b11 << 2 * pGPIOHandler ->pinConfig.GPIO_PinNumber);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	791b      	ldrb	r3, [r3, #4]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2103      	movs	r1, #3
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	4619      	mov	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

	// Cargamos auxConfig en el registro MODER
	pGPIOHandler ->pGPIOx ->MODER |= auxConfig;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <gpio_config_output_type>:
/*
 * Configurates which type of output the PinX will use:
 *  -Push-pull
 *  -openDrain
 */
void gpio_config_output_type (GPIO_Handler_t * pGPIOHandler){
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]

	/* Verificamos que el tipo de salida corresponda a los que se pueden utilizar */
	assert_param(IS_GPIO_OUTPUT_TYPE(pGPIOHandler ->pinConfig.GPIO_PinOutputType));

	// De nuevo, leemos y movemos el valor de un numero "PinNumber" de veces ¿error?
	auxConfig = (pGPIOHandler ->pinConfig.GPIO_PinOutputType <<  pGPIOHandler ->pinConfig.GPIO_PinNumber);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7a1b      	ldrb	r3, [r3, #8]
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	791b      	ldrb	r3, [r3, #4]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	60fb      	str	r3, [r7, #12]

	//limpiamos antes de cargar
	pGPIOHandler ->pGPIOx ->OTYPER &= ~(SET << pGPIOHandler ->pinConfig.GPIO_PinNumber);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	791b      	ldrb	r3, [r3, #4]
 80047b4:	4619      	mov	r1, r3
 80047b6:	2301      	movs	r3, #1
 80047b8:	408b      	lsls	r3, r1
 80047ba:	43db      	mvns	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	400a      	ands	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx ->OTYPER |= auxConfig;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <gpio_config_output_speed>:
 * - Low
 * - Medium
 * - Fast
 * - High Speed
 */
void gpio_config_output_speed (GPIO_Handler_t * pGPIOHandler){
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]

	/**/
	assert_param(IS_GPIO_OSPEED(pGPIOHandler ->pinConfig.GPIO_PinOutputSpeed));

	auxConfig = (pGPIOHandler ->pinConfig.GPIO_PinOutputSpeed <<  2*pGPIOHandler ->pinConfig.GPIO_PinNumber);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	799b      	ldrb	r3, [r3, #6]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	791b      	ldrb	r3, [r3, #4]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	60fb      	str	r3, [r7, #12]

	//limpiamos la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx ->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler ->pinConfig.GPIO_PinNumber);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	791b      	ldrb	r3, [r3, #4]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	400a      	ands	r2, r1
 800481a:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx ->OSPEEDR |= auxConfig;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <gpio_config_pullup_pulldown>:


/*
 * Turns ON/OFF the pull-up and pull-down resistor for each PinX in selected GPIO port
 */
void gpio_config_pullup_pulldown(GPIO_Handler_t *pGPIOHandler){
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]

		/*verificamos si la configuracion cargada para las resistencias es correcta*/
		assert_param(IS_GPIO_PUPDR(pGPIOHandler ->pinConfig.GPIO_PinPuPdControl));

		auxConfig = (pGPIOHandler ->pinConfig.GPIO_PinPuPdControl <<  2*pGPIOHandler ->pinConfig.GPIO_PinNumber);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	79db      	ldrb	r3, [r3, #7]
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	791b      	ldrb	r3, [r3, #4]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	60fb      	str	r3, [r7, #12]

		//limpiamos la posicion antes de cargar la nueva configuracion
		pGPIOHandler ->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler ->pinConfig.GPIO_PinNumber);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2103      	movs	r1, #3
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	4619      	mov	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	400a      	ands	r2, r1
 8004870:	60da      	str	r2, [r3, #12]

		// cargamos el resultado sobre el registro adecuado
		pGPIOHandler ->pGPIOx->PUPDR |= auxConfig;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68d9      	ldr	r1, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	430a      	orrs	r2, r1
 8004880:	60da      	str	r2, [r3, #12]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <gpio_config_alternate_function>:

/*
 * Allows to configure other functions (more specialized) on the selected PinX.
 */
void gpio_config_alternate_function (GPIO_Handler_t *pGPIOHandler){
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

	uint32_t auxPosition = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandler ->pinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	795b      	ldrb	r3, [r3, #5]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d142      	bne.n	8004926 <gpio_config_alternate_function+0x9a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler ->pinConfig.GPIO_PinNumber < 8 ){
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	791b      	ldrb	r3, [r3, #4]
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	d81f      	bhi.n	80048e8 <gpio_config_alternate_function+0x5c>
			// Estamos en registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler ->pinConfig.GPIO_PinNumber;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	60fb      	str	r3, [r7, #12]

			// Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler ->pGPIOx ->AFR[0] &= ~(0b1111 << auxPosition);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	210f      	movs	r1, #15
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	400a      	ands	r2, r1
 80048c8:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler ->pGPIOx ->AFR[0] |= (pGPIOHandler ->pinConfig.GPIO_PinAltFunMode << auxPosition);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7a5b      	ldrb	r3, [r3, #9]
 80048d4:	4619      	mov	r1, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	4619      	mov	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	621a      	str	r2, [r3, #32]
			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler ->pGPIOx ->AFR[1] |= (pGPIOHandler ->pinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}
 80048e6:	e01e      	b.n	8004926 <gpio_config_alternate_function+0x9a>
			auxPosition = 4 * (pGPIOHandler ->pinConfig.GPIO_PinNumber -8);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	791b      	ldrb	r3, [r3, #4]
 80048ec:	3b08      	subs	r3, #8
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	60fb      	str	r3, [r7, #12]
			pGPIOHandler ->pGPIOx ->AFR[1] &= (0b1111 << auxPosition);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f8:	210f      	movs	r1, #15
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	4619      	mov	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	400a      	ands	r2, r1
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandler ->pGPIOx ->AFR[1] |= (pGPIOHandler ->pinConfig.GPIO_PinAltFunMode << auxPosition);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	7a5b      	ldrb	r3, [r3, #9]
 8004914:	4619      	mov	r1, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	4619      	mov	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <gpio_WritePin>:

/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignado
 * el valor entregadoe en la variable newState
 */
void gpio_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
	/*verificamos si la accion que deseamos realizar es permitida */
	assert_param(IS_GPIO_PIN_ACTION(newState));

	// limpiamos la posicion que deseamos
	// pPinHandler ->GPIOx -> ODR &= ~(SET << pPinHandler ->pinConfig.GPIO_PinNumber);
	if (newState == SET){
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10d      	bne.n	800495e <gpio_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler ->pinConfig.GPIO_PinNumber);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	4619      	mov	r1, r3
 800494e:	2301      	movs	r3, #1
 8004950:	408b      	lsls	r3, r1
 8004952:	4619      	mov	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	619a      	str	r2, [r3, #24]
	}
	else {
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler ->pinConfig.GPIO_PinNumber + 16));
	}
}
 800495c:	e00d      	b.n	800497a <gpio_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler ->pinConfig.GPIO_PinNumber + 16));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	3310      	adds	r3, #16
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	4619      	mov	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	619a      	str	r2, [r3, #24]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <gpio_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico.
 */
uint32_t gpio_ReadPin (GPIO_Handler_t *pPinHandler){
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
		// Creamos una variable auxiliar la cual luego retomaremos
		uint32_t pinValue = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

		/* PinValue es una variable a la que se le asigna el IDR (Input Data Register, 32 bits, 16 reservados)
		 * y luego lo shiftea PinNumber veces, es decir, si escogemos el pin5, lo shiftea 5 veces.
		 *
		 */
		pinValue = (pPinHandler ->pGPIOx -> IDR >> pPinHandler->pinConfig.GPIO_PinNumber);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	7912      	ldrb	r2, [r2, #4]
 800499a:	40d3      	lsrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
		/* Luego de moverlo, aplicamos una mascara porque nos importa el bit 0, que es el que nos devuelve un 1 o un 0
		 * lo que nos indicaria si el pin esta recibiendo informacion, para obtener el bit 0 se aplica
		 * la operacion AND (&) */


		pinValue &= 0b1 ;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
		/* teniendo presente que la variable pinValue contiene el IDR y su lectura sabemos que
		estamos leyendo el valor del pinX, y nos retornara un 0 o un 1 logico.
		 si nos retorna un 1 quiere decir que si esta recibiendo informacion,
		de lo contrario no lo esta.. */

		return pinValue;
 80049a6:	68fb      	ldr	r3, [r7, #12]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <gpio_TooglePin>:

/**/
void gpio_TooglePin (GPIO_Handler_t *pPinHandler){
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
	/* se usan condicionales para cambiar  el valor del pin si la funcion GPIO_ReadPin retorna un 0 entonces se
	 *cambiara ese valor por un 1 con la funcion GPIO_WritePin y el valor SET, mientras que con el else pasara lo
	 *contrario
	 */

	if (gpio_ReadPin(pPinHandler) == 0){
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff ffe2 	bl	8004984 <gpio_ReadPin>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <gpio_TooglePin+0x1e>
			gpio_WritePin(pPinHandler, SET);
 80049c6:	2101      	movs	r1, #1
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ffb1 	bl	8004930 <gpio_WritePin>

	}
	else{
		(gpio_WritePin(pPinHandler, RESET));
	}
	}
 80049ce:	e003      	b.n	80049d8 <gpio_TooglePin+0x26>
		(gpio_WritePin(pPinHandler, RESET));
 80049d0:	2100      	movs	r1, #0
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ffac 	bl	8004930 <gpio_WritePin>
	}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <__NVIC_EnableIRQ>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	db0b      	blt.n	8004a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	4906      	ldr	r1, [pc, #24]	@ (8004a14 <__NVIC_EnableIRQ+0x34>)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2001      	movs	r0, #1
 8004a02:	fa00 f202 	lsl.w	r2, r0, r2
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <__NVIC_DisableIRQ>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	db12      	blt.n	8004a50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	490a      	ldr	r1, [pc, #40]	@ (8004a5c <__NVIC_DisableIRQ+0x44>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2001      	movs	r0, #1
 8004a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3e:	3320      	adds	r3, #32
 8004a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a44:	f3bf 8f4f 	dsb	sy
}
 8004a48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a4a:	f3bf 8f6f 	isb	sy
}
 8004a4e:	bf00      	nop
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	e000e100 	.word	0xe000e100

08004a60 <timer_Config>:
 *
 * Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 * el sistema global de interrupciones, activar la IQR especifica y luego volver a encender el
 * sistema.
 */
void timer_Config(Timer_Handler_t *pTimerHandler){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
    //Guardamos una referencia al periférico que estmoas utilizando...
    ptrTimerUsed = pTimerHandler->pTIMx;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa8 <timer_Config+0x48>)
 8004a6e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a70:	b672      	cpsid	i
}
 8004a72:	bf00      	nop

    // 0. Desactivamos la interrupciones globales mientras configuramos configuramos el sistema.
    __disable_irq();
    // 1. Activar la señal de reloj del periférico requerido.
    timer_enable_clock_peripheral(pTimerHandler);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f819 	bl	8004aac <timer_enable_clock_peripheral>

    // 2. Configuramos el Pre-scaler.
    timer_set_prescaler(pTimerHandler);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f882 	bl	8004b84 <timer_set_prescaler>

    // 3. Configuramos si UP_COUNT O DOWN_COUNT (mode).
    timer_set_mode(pTimerHandler);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f89d 	bl	8004bc0 <timer_set_mode>

    // 4. Configuramos el Auto-reload.
    timer_set_period(pTimerHandler);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f88b 	bl	8004ba2 <timer_set_period>

    // 5. Configuramos la interrupcion.
    timer_config_interrupt(pTimerHandler);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f8b5 	bl	8004bfc <timer_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 8004a92:	b662      	cpsie	i
}
 8004a94:	bf00      	nop

    // x. Volvemos a activar las interrupciones del sistema.
    __enable_irq();

    // El timer inicia apagado.
    timer_SetState(pTimerHandler, TIMER_OFF);
 8004a96:	2100      	movs	r1, #0
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f959 	bl	8004d50 <timer_SetState>
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000470 	.word	0x20000470

08004aac <timer_enable_clock_peripheral>:

/*
 *
 */
void timer_enable_clock_peripheral(Timer_Handler_t *pTimerHandler){
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

    // Verificamos que es un timer permitido

    assert_param(IS_TIM_INSTANCE(pTierHandler->pTIMx));

    if(pTimerHandler->pTIMx == TIM2){
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abc:	d106      	bne.n	8004acc <timer_enable_clock_peripheral+0x20>
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004abe:	4b2a      	ldr	r3, [pc, #168]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	4a29      	ldr	r2, [pc, #164]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6413      	str	r3, [r2, #64]	@ 0x40
            RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
      }
    else{
        __NOP();
    }
}
 8004aca:	e048      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
    else if(pTimerHandler->pTIMx == TIM3){
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a26      	ldr	r2, [pc, #152]	@ (8004b6c <timer_enable_clock_peripheral+0xc0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d106      	bne.n	8004ae4 <timer_enable_clock_peripheral+0x38>
        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004ad6:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	4a23      	ldr	r2, [pc, #140]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8004ae2:	e03c      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
    else if(pTimerHandler->pTIMx == TIM4){
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <timer_enable_clock_peripheral+0xc4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d106      	bne.n	8004afc <timer_enable_clock_peripheral+0x50>
          RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004aee:	4b1e      	ldr	r3, [pc, #120]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8004afa:	e030      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
    else if(pTimerHandler->pTIMx == TIM5){
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	@ (8004b74 <timer_enable_clock_peripheral+0xc8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d106      	bne.n	8004b14 <timer_enable_clock_peripheral+0x68>
          RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004b06:	4b18      	ldr	r3, [pc, #96]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8004b12:	e024      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
    else if(pTimerHandler->pTIMx == TIM9){
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <timer_enable_clock_peripheral+0xcc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d106      	bne.n	8004b2c <timer_enable_clock_peripheral+0x80>
            RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	4a11      	ldr	r2, [pc, #68]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b28:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004b2a:	e018      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
    else if(pTimerHandler->pTIMx == TIM10){
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <timer_enable_clock_peripheral+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d106      	bne.n	8004b44 <timer_enable_clock_peripheral+0x98>
            RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8004b36:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b40:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004b42:	e00c      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
    else if(pTimerHandler->pTIMx == TIM11){
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0d      	ldr	r2, [pc, #52]	@ (8004b80 <timer_enable_clock_peripheral+0xd4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d106      	bne.n	8004b5c <timer_enable_clock_peripheral+0xb0>
            RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8004b4e:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	4a05      	ldr	r2, [pc, #20]	@ (8004b68 <timer_enable_clock_peripheral+0xbc>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b58:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004b5a:	e000      	b.n	8004b5e <timer_enable_clock_peripheral+0xb2>
        __NOP();
 8004b5c:	bf00      	nop
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800

08004b84 <timer_set_prescaler>:

/**
 * El prescaler nos configura la velocidad a la que se incremente el registro
 * del CNT del Timer.
 */
void timer_set_prescaler(Timer_Handler_t *pTimerHandler){
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

    //Verificamos que el valor del prescaler es valido
    assert_param(IS_TIMER_PRESC(pTimerHandler->TIMx_Config.TIMx_Prescaler));

    //Configuramos el valor del prescaler.
    pTimerHandler->pTIMx->PSC = pTimerHandler->TIMx_Config.TIMx_Prescaler - 1; // (16000000-1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	88db      	ldrh	r3, [r3, #6]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <timer_set_period>:
Esta función configura el limite hasta donde el Timer para generar un
evento "update" (cuando esta contando de forma ascendente),o configura
el valor desde donde se comienza a contar, cuando el sistema funciona de forma
ddescendente.
*/
void timer_set_period(Timer_Handler_t *pTimerHandler){
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
    assert_param(IS_TIMER_PERIOD(pTimerHandler->TIMx_Config.TIMx_Prescaler));

    // Acá hace falta algo...

    //Configuramos el valor del autoreload
    pTimerHandler->pTIMx->ARR = pTimerHandler->TIMx_Config.TIMx_Period - 1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <timer_set_mode>:
 /**
  * Upconter or DownCounter
  */


void timer_set_mode(Timer_Handler_t *pTimerHandler){
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

    //Verificamos que elmodo de funcionamiento es correcto.
    assert_param(IS_TIMER_MODE(pTimerHandler->TIMx_Config.TIMx_mode));

    //Verificamos cual es el modo que se desea configurar.
    if(pTimerHandler->TIMx_Config.TIMx_mode == TIMER_UP_COUNTER){
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	791b      	ldrb	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d108      	bne.n	8004be2 <timer_set_mode+0x22>
        //Configuramos en modo Upcounter DIR = 0
        pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_DIR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0210 	bic.w	r2, r2, #16
 8004bde:	601a      	str	r2, [r3, #0]
    }
    else{
        pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
    }
}
 8004be0:	e007      	b.n	8004bf2 <timer_set_mode+0x32>
        pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0210 	orr.w	r2, r2, #16
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <timer_config_interrupt>:
  /**
   *
   */
void timer_config_interrupt(Timer_Handler_t *pTimerHandler){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

    //Verificamos el posible valor configurado
    assert_param(IS_TIMER_INTERRUP(pTimerHandler->TIMx_Config.TIMx_InterruptEnabled));

    if(pTimerHandler->TIMx_Config.TIMx_InterruptEnable == TIMER_INT_ENABLE){
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	7b1b      	ldrb	r3, [r3, #12]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d148      	bne.n	8004c9e <timer_config_interrupt+0xa2>
        // Activamos la interrupción debida al Timerx Utilizado
        pTimerHandler->pTIMx->DIER |= TIM_DIER_UIE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	60da      	str	r2, [r3, #12]


        //Activamos el canal del sistema NVIC para que lea la interrupción
        if(pTimerHandler->pTIMx == TIM2){
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c24:	d103      	bne.n	8004c2e <timer_config_interrupt+0x32>
            NVIC_EnableIRQ(TIM2_IRQn);
 8004c26:	201c      	movs	r0, #28
 8004c28:	f7ff feda 	bl	80049e0 <__NVIC_EnableIRQ>
		   }
            else{
                __NOP();
            }
        }
}
 8004c2c:	e07f      	b.n	8004d2e <timer_config_interrupt+0x132>
        else if(pTimerHandler->pTIMx == TIM3){
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a41      	ldr	r2, [pc, #260]	@ (8004d38 <timer_config_interrupt+0x13c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <timer_config_interrupt+0x44>
            NVIC_EnableIRQ(TIM3_IRQn);
 8004c38:	201d      	movs	r0, #29
 8004c3a:	f7ff fed1 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004c3e:	e076      	b.n	8004d2e <timer_config_interrupt+0x132>
        else if(pTimerHandler->pTIMx == TIM4){
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3d      	ldr	r2, [pc, #244]	@ (8004d3c <timer_config_interrupt+0x140>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d103      	bne.n	8004c52 <timer_config_interrupt+0x56>
                  NVIC_EnableIRQ(TIM4_IRQn);
 8004c4a:	201e      	movs	r0, #30
 8004c4c:	f7ff fec8 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004c50:	e06d      	b.n	8004d2e <timer_config_interrupt+0x132>
        else if(pTimerHandler->pTIMx == TIM5){
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a3a      	ldr	r2, [pc, #232]	@ (8004d40 <timer_config_interrupt+0x144>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <timer_config_interrupt+0x68>
            NVIC_EnableIRQ(TIM5_IRQn);
 8004c5c:	2032      	movs	r0, #50	@ 0x32
 8004c5e:	f7ff febf 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004c62:	e064      	b.n	8004d2e <timer_config_interrupt+0x132>
        else if(pTimerHandler->pTIMx == TIM9){
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a36      	ldr	r2, [pc, #216]	@ (8004d44 <timer_config_interrupt+0x148>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d103      	bne.n	8004c76 <timer_config_interrupt+0x7a>
            NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004c6e:	2018      	movs	r0, #24
 8004c70:	f7ff feb6 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004c74:	e05b      	b.n	8004d2e <timer_config_interrupt+0x132>
        else if(pTimerHandler->pTIMx == TIM10){
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a33      	ldr	r2, [pc, #204]	@ (8004d48 <timer_config_interrupt+0x14c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d103      	bne.n	8004c88 <timer_config_interrupt+0x8c>
            NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004c80:	2019      	movs	r0, #25
 8004c82:	f7ff fead 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004c86:	e052      	b.n	8004d2e <timer_config_interrupt+0x132>
        else if(pTimerHandler->pTIMx == TIM11){
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d4c <timer_config_interrupt+0x150>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d103      	bne.n	8004c9a <timer_config_interrupt+0x9e>
            NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004c92:	201a      	movs	r0, #26
 8004c94:	f7ff fea4 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004c98:	e049      	b.n	8004d2e <timer_config_interrupt+0x132>
            __NOP();
 8004c9a:	bf00      	nop
}
 8004c9c:	e047      	b.n	8004d2e <timer_config_interrupt+0x132>
            pTimerHandler->pTIMx->DIER &= ~TIM_DIER_UIE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	60da      	str	r2, [r3, #12]
            if(pTimerHandler->pTIMx == TIM2){
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb6:	d103      	bne.n	8004cc0 <timer_config_interrupt+0xc4>
                NVIC_DisableIRQ(TIM2_IRQn);
 8004cb8:	201c      	movs	r0, #28
 8004cba:	f7ff fead 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004cbe:	e036      	b.n	8004d2e <timer_config_interrupt+0x132>
            else if(pTimerHandler->pTIMx == TIM3){
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d38 <timer_config_interrupt+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d103      	bne.n	8004cd2 <timer_config_interrupt+0xd6>
                NVIC_DisableIRQ(TIM3_IRQn);
 8004cca:	201d      	movs	r0, #29
 8004ccc:	f7ff fea4 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004cd0:	e02d      	b.n	8004d2e <timer_config_interrupt+0x132>
            else if(pTimerHandler->pTIMx == TIM4){
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a19      	ldr	r2, [pc, #100]	@ (8004d3c <timer_config_interrupt+0x140>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d103      	bne.n	8004ce4 <timer_config_interrupt+0xe8>
                          NVIC_DisableIRQ(TIM4_IRQn);
 8004cdc:	201e      	movs	r0, #30
 8004cde:	f7ff fe9b 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004ce2:	e024      	b.n	8004d2e <timer_config_interrupt+0x132>
            else if(pTimerHandler->pTIMx == TIM5){
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <timer_config_interrupt+0x144>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d103      	bne.n	8004cf6 <timer_config_interrupt+0xfa>
                NVIC_DisableIRQ(TIM5_IRQn);
 8004cee:	2032      	movs	r0, #50	@ 0x32
 8004cf0:	f7ff fe92 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004cf4:	e01b      	b.n	8004d2e <timer_config_interrupt+0x132>
            else if(pTimerHandler->pTIMx == TIM9){
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <timer_config_interrupt+0x148>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <timer_config_interrupt+0x10c>
            	NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 8004d00:	2018      	movs	r0, #24
 8004d02:	f7ff fe89 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004d06:	e012      	b.n	8004d2e <timer_config_interrupt+0x132>
		   else if(pTimerHandler->pTIMx == TIM10){
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <timer_config_interrupt+0x14c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d103      	bne.n	8004d1a <timer_config_interrupt+0x11e>
			   NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 8004d12:	2019      	movs	r0, #25
 8004d14:	f7ff fe80 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004d18:	e009      	b.n	8004d2e <timer_config_interrupt+0x132>
		   else if(pTimerHandler->pTIMx == TIM11){
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d4c <timer_config_interrupt+0x150>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d103      	bne.n	8004d2c <timer_config_interrupt+0x130>
			   NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004d24:	201a      	movs	r0, #26
 8004d26:	f7ff fe77 	bl	8004a18 <__NVIC_DisableIRQ>
}
 8004d2a:	e000      	b.n	8004d2e <timer_config_interrupt+0x132>
                __NOP();
 8004d2c:	bf00      	nop
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <timer_SetState>:

/**
 *
 */
void timer_SetState(Timer_Handler_t *pTimerHandler, uint8_t newState){
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]

    //Verificamos que el estado ingresado es adecuado
    assert_param(IS_TIMER_STATE(newState));

    // 4. Reiniciamos el registro counter.
    pTimerHandler->pTIMx->CNT = 0;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2200      	movs	r2, #0
 8004d62:	625a      	str	r2, [r3, #36]	@ 0x24


    if(newState == TIMER_ON){
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d108      	bne.n	8004d7c <timer_SetState+0x2c>
        // 5a. Activamos el Timer (el CNT debe comenzar a contar.
        pTimerHandler->pTIMx->CR1 |= TIM_CR1_CEN;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
    else{
        // 5b. Desactivamos el Timer (el CNT debe detenerse)
        pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
    }

}
 8004d7a:	e007      	b.n	8004d8c <timer_SetState+0x3c>
        pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <Timer4_Callback>:
    __NOP();
}
__attribute__((weak)) void Timer3_Callback(void){
    __NOP();
}
__attribute__((weak)) void Timer4_Callback(void){
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
    __NOP();
 8004d9a:	bf00      	nop
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <Timer9_Callback>:
__attribute__((weak)) void Timer5_Callback(void){
    __NOP();
}
__attribute__((weak)) void Timer9_Callback(void){
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
    __NOP();
 8004da8:	bf00      	nop
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <Timer10_Callback>:
__attribute__((weak)) void Timer10_Callback(void){
 8004db2:	b480      	push	{r7}
 8004db4:	af00      	add	r7, sp, #0
    __NOP();
 8004db6:	bf00      	nop
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <Timer11_Callback>:
__attribute__((weak)) void Timer11_Callback(void){
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
    __NOP();
 8004dc4:	bf00      	nop
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <TIM2_IRQHandler>:

/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM2_IRQHandler(void){
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM2->SR &= ~TIM_SR_UIF;
 8004dd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer2_Callback();
 8004de2:	f7fd f805 	bl	8001df0 <Timer2_Callback>

}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM3->SR &= ~TIM_SR_UIF;
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <TIM3_IRQHandler+0x18>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	4a03      	ldr	r2, [pc, #12]	@ (8004e04 <TIM3_IRQHandler+0x18>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer3_Callback();
 8004dfc:	f7fd f804 	bl	8001e08 <Timer3_Callback>

}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40000400 	.word	0x40000400

08004e08 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM4->SR &= ~TIM_SR_UIF;
 8004e0c:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <TIM4_IRQHandler+0x18>)
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	4a03      	ldr	r2, [pc, #12]	@ (8004e20 <TIM4_IRQHandler+0x18>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer4_Callback();
 8004e18:	f7ff ffbd 	bl	8004d96 <Timer4_Callback>

}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40000800 	.word	0x40000800

08004e24 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM5->SR &= ~TIM_SR_UIF;
 8004e28:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <TIM5_IRQHandler+0x18>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	4a03      	ldr	r2, [pc, #12]	@ (8004e3c <TIM5_IRQHandler+0x18>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer5_Callback();
 8004e34:	f7fc fff4 	bl	8001e20 <Timer5_Callback>

}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40000c00 	.word	0x40000c00

08004e40 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void){
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM9->SR &= ~TIM_SR_UIF;
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	4a03      	ldr	r2, [pc, #12]	@ (8004e58 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer9_Callback();
 8004e50:	f7ff ffa8 	bl	8004da4 <Timer9_Callback>

}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40014000 	.word	0x40014000

08004e5c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void){
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM10->SR &= ~TIM_SR_UIF;
 8004e60:	4b04      	ldr	r3, [pc, #16]	@ (8004e74 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	4a03      	ldr	r2, [pc, #12]	@ (8004e74 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer10_Callback();
 8004e6c:	f7ff ffa1 	bl	8004db2 <Timer10_Callback>

}
 8004e70:	bf00      	nop
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40014400 	.word	0x40014400

08004e78 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void){
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
    //Limpiamos la bandera que indica que la interrupción se ha generado.
    TIM11->SR &= ~TIM_SR_UIF;
 8004e7c:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4a03      	ldr	r2, [pc, #12]	@ (8004e90 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	6113      	str	r3, [r2, #16]

    //Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
    Timer11_Callback();
 8004e88:	f7ff ff9a 	bl	8004dc0 <Timer11_Callback>

}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40014800 	.word	0x40014800

08004e94 <__NVIC_EnableIRQ>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db0b      	blt.n	8004ebe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	f003 021f 	and.w	r2, r3, #31
 8004eac:	4906      	ldr	r1, [pc, #24]	@ (8004ec8 <__NVIC_EnableIRQ+0x34>)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	e000e100 	.word	0xe000e100

08004ecc <__NVIC_SetPriority>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6039      	str	r1, [r7, #0]
 8004ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	db0a      	blt.n	8004ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	490c      	ldr	r1, [pc, #48]	@ (8004f18 <__NVIC_SetPriority+0x4c>)
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	0112      	lsls	r2, r2, #4
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	440b      	add	r3, r1
 8004ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ef4:	e00a      	b.n	8004f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4908      	ldr	r1, [pc, #32]	@ (8004f1c <__NVIC_SetPriority+0x50>)
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	3b04      	subs	r3, #4
 8004f04:	0112      	lsls	r2, r2, #4
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	440b      	add	r3, r1
 8004f0a:	761a      	strb	r2, [r3, #24]
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000e100 	.word	0xe000e100
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <usart_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void usart_Config(USART_Handler_t *ptrUsartHandler){
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f28:	b672      	cpsid	i
}
 8004f2a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periférico */
	usart_enable_clock_peripheral(ptrUsartHandler);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f827 	bl	8004f80 <usart_enable_clock_peripheral>
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	611a      	str	r2, [r3, #16]

	// Limpiamos el registro DR
	ptrUsartHandler->ptrUSARTx->DR = 0;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	605a      	str	r2, [r3, #4]

	// 2.2 Configuracion del Parity:
	usart_config_parity(ptrUsartHandler);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f84c 	bl	8004fe8 <usart_config_parity>

	// 2.3 Configuramos el tamaño del dato
	usart_config_datasize(ptrUsartHandler);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f87c 	bl	800504e <usart_config_datasize>

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	usart_config_stopbits(ptrUsartHandler);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8a4 	bl	80050a4 <usart_config_stopbits>

	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	usart_config_baudrate(ptrUsartHandler);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f8e7 	bl	8005130 <usart_config_baudrate>

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	usart_config_mode(ptrUsartHandler);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f920 	bl	80051a8 <usart_config_mode>

	// 2.8 Verificamos la configuración de las interrupciones
	usart_config_interrupt(ptrUsartHandler);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f973 	bl	8005254 <usart_config_interrupt>

	// 2.7 Activamos el modulo serial.
	usart_enable_peripheral(ptrUsartHandler);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9e4 	bl	800533c <usart_enable_peripheral>
  __ASM volatile ("cpsie i" : : : "memory");
 8004f74:	b662      	cpsie	i
}
 8004f76:	bf00      	nop

	/* x. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <usart_enable_clock_peripheral>:


/**/
static void usart_enable_clock_peripheral(USART_Handler_t *ptrUsartHandler){
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART2 */
	if(ptrUsartHandler->ptrUSARTx == USART2){
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a12      	ldr	r2, [pc, #72]	@ (8004fd8 <usart_enable_clock_peripheral+0x58>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d106      	bne.n	8004fa0 <usart_enable_clock_peripheral+0x20>

		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004f92:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <usart_enable_clock_peripheral+0x5c>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	4a11      	ldr	r2, [pc, #68]	@ (8004fdc <usart_enable_clock_peripheral+0x5c>)
 8004f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f9c:	6413      	str	r3, [r2, #64]	@ 0x40
	 /* 1.3 Configuramos el USART6 */

		else if (ptrUsartHandler->ptrUSARTx == USART6){
				RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
		}
}
 8004f9e:	e016      	b.n	8004fce <usart_enable_clock_peripheral+0x4e>
		else if (ptrUsartHandler->ptrUSARTx == USART1){
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe0 <usart_enable_clock_peripheral+0x60>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d106      	bne.n	8004fb8 <usart_enable_clock_peripheral+0x38>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <usart_enable_clock_peripheral+0x5c>)
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	4a0b      	ldr	r2, [pc, #44]	@ (8004fdc <usart_enable_clock_peripheral+0x5c>)
 8004fb0:	f043 0310 	orr.w	r3, r3, #16
 8004fb4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004fb6:	e00a      	b.n	8004fce <usart_enable_clock_peripheral+0x4e>
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a09      	ldr	r2, [pc, #36]	@ (8004fe4 <usart_enable_clock_peripheral+0x64>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d105      	bne.n	8004fce <usart_enable_clock_peripheral+0x4e>
				RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <usart_enable_clock_peripheral+0x5c>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	4a05      	ldr	r2, [pc, #20]	@ (8004fdc <usart_enable_clock_peripheral+0x5c>)
 8004fc8:	f043 0320 	orr.w	r3, r3, #32
 8004fcc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	40004400 	.word	0x40004400
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	40011000 	.word	0x40011000
 8004fe4:	40011400 	.word	0x40011400

08004fe8 <usart_config_parity>:

/**
 *
 */
static void usart_config_parity(USART_Handler_t *ptrUsartHandler){
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.parity != USART_PARITY_NONE){
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	79db      	ldrb	r3, [r3, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01d      	beq.n	8005034 <usart_config_parity+0x4c>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005006:	60da      	str	r2, [r3, #12]

		// Verificamos si se ha seleccionado ODD or EVEN
		// importante la virgulilla para hacer el uso correcto del registro, y no borrar la info que tenemos.
		if(ptrUsartHandler->USART_Config.parity == USART_PARITY_EVEN){
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	79db      	ldrb	r3, [r3, #7]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d108      	bne.n	8005022 <usart_config_parity+0x3a>
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800501e:	60da      	str	r2, [r3, #12]
	}	else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;


	}
}
 8005020:	e010      	b.n	8005044 <usart_config_parity+0x5c>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005030:	60da      	str	r2, [r3, #12]
}
 8005032:	e007      	b.n	8005044 <usart_config_parity+0x5c>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005042:	60da      	str	r2, [r3, #12]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <usart_config_datasize>:
/**
 * Esta funcion debe estar relacionada con el parity.
 * Si NO hay parity,el tamaño debe ser 8bit.
 * SI HAY parity, el tamaño debe ser 9 bit.
 */
static void usart_config_datasize(USART_Handler_t *ptrUsartHandler){
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
	// Verificamos cual es el tamaño de dato que deseamos
	if(ptrUsartHandler->USART_Config.datasize == USART_DATASIZE_8BIT){
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	799b      	ldrb	r3, [r3, #6]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d115      	bne.n	800508a <usart_config_datasize+0x3c>

		// Verificamos si se esta trabajando o no con paridad
		if(ptrUsartHandler->USART_Config.parity == USART_PARITY_NONE){
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	79db      	ldrb	r3, [r3, #7]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <usart_config_datasize+0x2a>
			// Deseamos trabajar con datos de 8 bits
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005074:	60da      	str	r2, [r3, #12]

	}else{
		// Deseamos trabajar con datos de 9 bits
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
}
}
 8005076:	e010      	b.n	800509a <usart_config_datasize+0x4c>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005086:	60da      	str	r2, [r3, #12]
}
 8005088:	e007      	b.n	800509a <usart_config_datasize+0x4c>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005098:	60da      	str	r2, [r3, #12]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <usart_config_stopbits>:

/**
 *
 */
static void usart_config_stopbits(USART_Handler_t *ptrUsartHandler){
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	switch(ptrUsartHandler->USART_Config.stopbits){
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7a1b      	ldrb	r3, [r3, #8]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d82f      	bhi.n	8005114 <usart_config_stopbits+0x70>
 80050b4:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <usart_config_stopbits+0x18>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080050df 	.word	0x080050df
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	08005103 	.word	0x08005103
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80050da:	611a      	str	r2, [r3, #16]
		break;
 80050dc:	e023      	b.n	8005126 <usart_config_stopbits+0x82>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP_0;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050ec:	611a      	str	r2, [r3, #16]
		break;
 80050ee:	e01a      	b.n	8005126 <usart_config_stopbits+0x82>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP_1;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050fe:	611a      	str	r2, [r3, #16]

		break;
 8005100:	e011      	b.n	8005126 <usart_config_stopbits+0x82>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 8005110:	611a      	str	r2, [r3, #16]

		break;
 8005112:	e008      	b.n	8005126 <usart_config_stopbits+0x82>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005122:	611a      	str	r2, [r3, #16]
		break;
 8005124:	bf00      	nop
	}
	}
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr

08005130 <usart_config_baudrate>:

/**
 * Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
 */
static void usart_config_baudrate(USART_Handler_t *ptrUsartHandler){
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	// Caso para configurar cuando se trabaja con el Cristal Interno
	switch(ptrUsartHandler->USART_Config.baudrate){
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	795b      	ldrb	r3, [r3, #5]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d829      	bhi.n	8005194 <usart_config_baudrate+0x64>
 8005140:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <usart_config_baudrate+0x18>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800515d 	.word	0x0800515d
 800514c:	08005169 	.word	0x08005169
 8005150:	08005175 	.word	0x08005175
 8005154:	08005181 	.word	0x08005181
 8005158:	0800518b 	.word	0x0800518b
		{
		// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f240 6283 	movw	r2, #1667	@ 0x683
 8005164:	609a      	str	r2, [r3, #8]
		break;
 8005166:	e01a      	b.n	800519e <usart_config_baudrate+0x6e>
		}
		case USART_BAUDRATE_19200:
		{
		// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.1875 = 1
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f240 3241 	movw	r2, #833	@ 0x341
 8005170:	609a      	str	r2, [r3, #8]

		break;
 8005172:	e014      	b.n	800519e <usart_config_baudrate+0x6e>
		}
		//se hizo en el cuaderno por flojera.
		case USART_BAUDRATE_38400:{
			ptrUsartHandler->ptrUSARTx->BRR = 0x01A1;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800517c:	609a      	str	r2, [r3, #8]
		break;
 800517e:	e00e      	b.n	800519e <usart_config_baudrate+0x6e>
		{
         // El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x8B
		// Configurando el Baudrate generator para una velocidad de 115200bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	228b      	movs	r2, #139	@ 0x8b
 8005186:	609a      	str	r2, [r3, #8]

			break;
 8005188:	e009      	b.n	800519e <usart_config_baudrate+0x6e>
			// Configurando el Baudrate generator para una velocidad de 230400bps

			//valor a cargar 4.3125
			//Mantiza = 4, Fraccion = 0.3125 --> 16 * 0.3125 = 5
			//valor = 0x45
			ptrUsartHandler->ptrUSARTx->BRR = 0x045;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2245      	movs	r2, #69	@ 0x45
 8005190:	609a      	str	r2, [r3, #8]

			break;
 8005192:	e004      	b.n	800519e <usart_config_baudrate+0x6e>
		}

		default:
			// Configurando el Baudrate generator para una velocidad de 115200bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0008B;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	228b      	movs	r2, #139	@ 0x8b
 800519a:	609a      	str	r2, [r3, #8]
			break;
 800519c:	bf00      	nop
		}

}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <usart_config_mode>:

/**
 *
 */
static void usart_config_mode(USART_Handler_t *ptrUsartHandler){
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	switch(ptrUsartHandler->USART_Config.mode){
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	791b      	ldrb	r3, [r3, #4]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d847      	bhi.n	8005248 <usart_config_mode+0xa0>
 80051b8:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <usart_config_mode+0x18>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	080051d1 	.word	0x080051d1
 80051c4:	080051e3 	.word	0x080051e3
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	08005217 	.word	0x08005217
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0208 	orr.w	r2, r2, #8
 80051de:	60da      	str	r2, [r3, #12]

		break;
 80051e0:	e032      	b.n	8005248 <usart_config_mode+0xa0>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0204 	orr.w	r2, r2, #4
 80051f0:	60da      	str	r2, [r3, #12]

		break;
 80051f2:	e029      	b.n	8005248 <usart_config_mode+0xa0>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0208 	orr.w	r2, r2, #8
 8005202:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0204 	orr.w	r2, r2, #4
 8005212:	60da      	str	r2, [r3, #12]


		break;
 8005214:	e018      	b.n	8005248 <usart_config_mode+0xa0>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales

		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005224:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0208 	bic.w	r2, r2, #8
 8005234:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0204 	bic.w	r2, r2, #4
 8005244:	60da      	str	r2, [r3, #12]
		break;
 8005246:	bf00      	nop
	}
}
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop

08005254 <usart_config_interrupt>:


/**
 *
 */
static void usart_config_interrupt(USART_Handler_t *ptrUsartHandler){
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	// 2.8a Interrupción por recepción
		if(ptrUsartHandler->USART_Config.enableIntRX == USART_RX_INTERRUP_ENABLE){
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7a5b      	ldrb	r3, [r3, #9]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d12e      	bne.n	80052c2 <usart_config_interrupt+0x6e>
			// Como está activada, debemos configurar la interrupción por recepción
			/* Debemos activar la interrupción RX en la configuración del USART */
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0220 	orr.w	r2, r2, #32
 8005272:	60da      	str	r2, [r3, #12]


			/* Debemos matricular la interrupción en el NVIC */
			/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
			if(ptrUsartHandler->ptrUSARTx == USART1){
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2d      	ldr	r2, [pc, #180]	@ (8005330 <usart_config_interrupt+0xdc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d107      	bne.n	800528e <usart_config_interrupt+0x3a>
				__NVIC_EnableIRQ(USART1_IRQn);
 800527e:	2025      	movs	r0, #37	@ 0x25
 8005280:	f7ff fe08 	bl	8004e94 <__NVIC_EnableIRQ>
				__NVIC_SetPriority(USART1_IRQn, 2);
 8005284:	2102      	movs	r1, #2
 8005286:	2025      	movs	r0, #37	@ 0x25
 8005288:	f7ff fe20 	bl	8004ecc <__NVIC_SetPriority>
						else if(ptrUsartHandler->ptrUSARTx == USART6){
							__NVIC_EnableIRQ(USART6_IRQn);
							__NVIC_SetPriority(USART6_IRQn, 2);			}

		}
}
 800528c:	e04b      	b.n	8005326 <usart_config_interrupt+0xd2>
			else if(ptrUsartHandler->ptrUSARTx == USART2){
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a28      	ldr	r2, [pc, #160]	@ (8005334 <usart_config_interrupt+0xe0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d107      	bne.n	80052a8 <usart_config_interrupt+0x54>
				__NVIC_EnableIRQ(USART2_IRQn);
 8005298:	2026      	movs	r0, #38	@ 0x26
 800529a:	f7ff fdfb 	bl	8004e94 <__NVIC_EnableIRQ>
				__NVIC_SetPriority(USART2_IRQn, 2);
 800529e:	2102      	movs	r1, #2
 80052a0:	2026      	movs	r0, #38	@ 0x26
 80052a2:	f7ff fe13 	bl	8004ecc <__NVIC_SetPriority>
}
 80052a6:	e03e      	b.n	8005326 <usart_config_interrupt+0xd2>
			else if(ptrUsartHandler->ptrUSARTx == USART6){
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a22      	ldr	r2, [pc, #136]	@ (8005338 <usart_config_interrupt+0xe4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d139      	bne.n	8005326 <usart_config_interrupt+0xd2>
				__NVIC_EnableIRQ(USART6_IRQn);
 80052b2:	2047      	movs	r0, #71	@ 0x47
 80052b4:	f7ff fdee 	bl	8004e94 <__NVIC_EnableIRQ>
				__NVIC_SetPriority(USART6_IRQn, 2);			}
 80052b8:	2102      	movs	r1, #2
 80052ba:	2047      	movs	r0, #71	@ 0x47
 80052bc:	f7ff fe06 	bl	8004ecc <__NVIC_SetPriority>
}
 80052c0:	e031      	b.n	8005326 <usart_config_interrupt+0xd2>
		else if(ptrUsartHandler->USART_Config.enableIntTX == USART_TX_INTERRUP_ENABLE){
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7a9b      	ldrb	r3, [r3, #10]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d12d      	bne.n	8005326 <usart_config_interrupt+0xd2>
						ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052d8:	60da      	str	r2, [r3, #12]
						if(ptrUsartHandler->ptrUSARTx == USART1){
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a14      	ldr	r2, [pc, #80]	@ (8005330 <usart_config_interrupt+0xdc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d107      	bne.n	80052f4 <usart_config_interrupt+0xa0>
							__NVIC_EnableIRQ(USART1_IRQn);
 80052e4:	2025      	movs	r0, #37	@ 0x25
 80052e6:	f7ff fdd5 	bl	8004e94 <__NVIC_EnableIRQ>
							__NVIC_SetPriority(USART1_IRQn, 2);
 80052ea:	2102      	movs	r1, #2
 80052ec:	2025      	movs	r0, #37	@ 0x25
 80052ee:	f7ff fded 	bl	8004ecc <__NVIC_SetPriority>
}
 80052f2:	e018      	b.n	8005326 <usart_config_interrupt+0xd2>
						else if(ptrUsartHandler->ptrUSARTx == USART2){
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005334 <usart_config_interrupt+0xe0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d107      	bne.n	800530e <usart_config_interrupt+0xba>
							__NVIC_EnableIRQ(USART2_IRQn);
 80052fe:	2026      	movs	r0, #38	@ 0x26
 8005300:	f7ff fdc8 	bl	8004e94 <__NVIC_EnableIRQ>
							__NVIC_SetPriority(USART2_IRQn, 2);
 8005304:	2102      	movs	r1, #2
 8005306:	2026      	movs	r0, #38	@ 0x26
 8005308:	f7ff fde0 	bl	8004ecc <__NVIC_SetPriority>
}
 800530c:	e00b      	b.n	8005326 <usart_config_interrupt+0xd2>
						else if(ptrUsartHandler->ptrUSARTx == USART6){
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a09      	ldr	r2, [pc, #36]	@ (8005338 <usart_config_interrupt+0xe4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d106      	bne.n	8005326 <usart_config_interrupt+0xd2>
							__NVIC_EnableIRQ(USART6_IRQn);
 8005318:	2047      	movs	r0, #71	@ 0x47
 800531a:	f7ff fdbb 	bl	8004e94 <__NVIC_EnableIRQ>
							__NVIC_SetPriority(USART6_IRQn, 2);			}
 800531e:	2102      	movs	r1, #2
 8005320:	2047      	movs	r0, #71	@ 0x47
 8005322:	f7ff fdd3 	bl	8004ecc <__NVIC_SetPriority>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40011000 	.word	0x40011000
 8005334:	40004400 	.word	0x40004400
 8005338:	40011400 	.word	0x40011400

0800533c <usart_enable_peripheral>:


/**
 *
 */
static void usart_enable_peripheral(USART_Handler_t *ptrUsartHandler){
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	if(ptrUsartHandler->USART_Config.mode != USART_MODE_DISABLE){
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	791b      	ldrb	r3, [r3, #4]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d007      	beq.n	800535c <usart_enable_peripheral+0x20>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800535a:	60da      	str	r2, [r3, #12]
	}
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <usart_WriteChar>:

/*
 * función para escribir un solo char
 */
int usart_WriteChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8005370:	e000      	b.n	8005374 <usart_WriteChar+0xe>
		__NOP();
 8005372:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f7      	beq.n	8005372 <usart_WriteChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	605a      	str	r2, [r3, #4]

	return dataToSend;
 800538a:	683b      	ldr	r3, [r7, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <usart_writeMsg>:

/*
 *
 */
void usart_writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend ){
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]

	uint8_t recorrer = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
	while(msgToSend[recorrer] != 0){
 80053a4:	e00a      	b.n	80053bc <usart_writeMsg+0x26>
		usart_WriteChar(ptrUsartHandler, msgToSend[recorrer]);
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	4413      	add	r3, r2
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ffd8 	bl	8005366 <usart_WriteChar>
		recorrer ++;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	3301      	adds	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
	while(msgToSend[recorrer] != 0){
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ee      	bne.n	80053a6 <usart_writeMsg+0x10>
	}

}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <usart_getRxData>:

uint8_t usart_getRxData(void){
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
	return auxRxData;
 80053d8:	4b02      	ldr	r3, [pc, #8]	@ (80053e4 <usart_getRxData+0x10>)
 80053da:	781b      	ldrb	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	20000474 	.word	0x20000474

080053e8 <USART2_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART2_IRQHandler(void){
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80053ec:	4b07      	ldr	r3, [pc, #28]	@ (800540c <USART2_IRQHandler+0x24>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <USART2_IRQHandler+0x1e>
		auxRxData = USART2->DR;
 80053f8:	4b04      	ldr	r3, [pc, #16]	@ (800540c <USART2_IRQHandler+0x24>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <USART2_IRQHandler+0x28>)
 8005400:	701a      	strb	r2, [r3, #0]
		usart2_RxCallback();
 8005402:	f7fc fd53 	bl	8001eac <usart2_RxCallback>
	}
}
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40004400 	.word	0x40004400
 8005410:	20000474 	.word	0x20000474

08005414 <USART6_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART6_IRQHandler(void){
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
	if(USART6->SR & USART_SR_RXNE){
 8005418:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <USART6_IRQHandler+0x24>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <USART6_IRQHandler+0x1e>
			auxRxData = USART6->DR;
 8005424:	4b04      	ldr	r3, [pc, #16]	@ (8005438 <USART6_IRQHandler+0x24>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4b04      	ldr	r3, [pc, #16]	@ (800543c <USART6_IRQHandler+0x28>)
 800542c:	701a      	strb	r2, [r3, #0]
			usart6_RxCallback();
 800542e:	f000 f824 	bl	800547a <usart6_RxCallback>
		}
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40011400 	.word	0x40011400
 800543c:	20000474 	.word	0x20000474

08005440 <USART1_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART1_IRQHandler(void){
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
	if(USART1->SR & USART_SR_RXNE){
 8005444:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <USART1_IRQHandler+0x24>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <USART1_IRQHandler+0x1e>
			auxRxData = USART1->DR;
 8005450:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <USART1_IRQHandler+0x24>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <USART1_IRQHandler+0x28>)
 8005458:	701a      	strb	r2, [r3, #0]
			usart1_RxCallback();
 800545a:	f000 f807 	bl	800546c <usart1_RxCallback>
		}
}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40011000 	.word	0x40011000
 8005468:	20000474 	.word	0x20000474

0800546c <usart1_RxCallback>:


__attribute__((weak)) void usart1_RxCallback(void){
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimer_Callback could be implemented in the main file
	   */
	__NOP();
 8005470:	bf00      	nop
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <usart6_RxCallback>:
	            the BasicTimer_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6_RxCallback(void){
 800547a:	b480      	push	{r7}
 800547c:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimer_Callback could be implemented in the main file
	   */
	__NOP();
 800547e:	bf00      	nop
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <__cvt>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	b088      	sub	sp, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	461d      	mov	r5, r3
 8005492:	4614      	mov	r4, r2
 8005494:	bfbc      	itt	lt
 8005496:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800549a:	4614      	movlt	r4, r2
 800549c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800549e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80054a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80054a4:	bfb6      	itet	lt
 80054a6:	461d      	movlt	r5, r3
 80054a8:	2300      	movge	r3, #0
 80054aa:	232d      	movlt	r3, #45	@ 0x2d
 80054ac:	7013      	strb	r3, [r2, #0]
 80054ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054b0:	f023 0820 	bic.w	r8, r3, #32
 80054b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054b8:	d005      	beq.n	80054c6 <__cvt+0x3e>
 80054ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054be:	d100      	bne.n	80054c2 <__cvt+0x3a>
 80054c0:	3601      	adds	r6, #1
 80054c2:	2302      	movs	r3, #2
 80054c4:	e000      	b.n	80054c8 <__cvt+0x40>
 80054c6:	2303      	movs	r3, #3
 80054c8:	aa07      	add	r2, sp, #28
 80054ca:	9204      	str	r2, [sp, #16]
 80054cc:	aa06      	add	r2, sp, #24
 80054ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054d2:	e9cd 3600 	strd	r3, r6, [sp]
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	f001 f86d 	bl	80065b8 <_dtoa_r>
 80054de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054e2:	4607      	mov	r7, r0
 80054e4:	d119      	bne.n	800551a <__cvt+0x92>
 80054e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054e8:	07db      	lsls	r3, r3, #31
 80054ea:	d50e      	bpl.n	800550a <__cvt+0x82>
 80054ec:	eb00 0906 	add.w	r9, r0, r6
 80054f0:	2200      	movs	r2, #0
 80054f2:	2300      	movs	r3, #0
 80054f4:	4620      	mov	r0, r4
 80054f6:	4629      	mov	r1, r5
 80054f8:	f7fb faee 	bl	8000ad8 <__aeabi_dcmpeq>
 80054fc:	b108      	cbz	r0, 8005502 <__cvt+0x7a>
 80054fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005502:	2230      	movs	r2, #48	@ 0x30
 8005504:	9b07      	ldr	r3, [sp, #28]
 8005506:	454b      	cmp	r3, r9
 8005508:	d31e      	bcc.n	8005548 <__cvt+0xc0>
 800550a:	9b07      	ldr	r3, [sp, #28]
 800550c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800550e:	1bdb      	subs	r3, r3, r7
 8005510:	4638      	mov	r0, r7
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	b008      	add	sp, #32
 8005516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800551e:	eb00 0906 	add.w	r9, r0, r6
 8005522:	d1e5      	bne.n	80054f0 <__cvt+0x68>
 8005524:	7803      	ldrb	r3, [r0, #0]
 8005526:	2b30      	cmp	r3, #48	@ 0x30
 8005528:	d10a      	bne.n	8005540 <__cvt+0xb8>
 800552a:	2200      	movs	r2, #0
 800552c:	2300      	movs	r3, #0
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fb fad1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005536:	b918      	cbnz	r0, 8005540 <__cvt+0xb8>
 8005538:	f1c6 0601 	rsb	r6, r6, #1
 800553c:	f8ca 6000 	str.w	r6, [sl]
 8005540:	f8da 3000 	ldr.w	r3, [sl]
 8005544:	4499      	add	r9, r3
 8005546:	e7d3      	b.n	80054f0 <__cvt+0x68>
 8005548:	1c59      	adds	r1, r3, #1
 800554a:	9107      	str	r1, [sp, #28]
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e7d9      	b.n	8005504 <__cvt+0x7c>

08005550 <__exponent>:
 8005550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005552:	2900      	cmp	r1, #0
 8005554:	bfba      	itte	lt
 8005556:	4249      	neglt	r1, r1
 8005558:	232d      	movlt	r3, #45	@ 0x2d
 800555a:	232b      	movge	r3, #43	@ 0x2b
 800555c:	2909      	cmp	r1, #9
 800555e:	7002      	strb	r2, [r0, #0]
 8005560:	7043      	strb	r3, [r0, #1]
 8005562:	dd29      	ble.n	80055b8 <__exponent+0x68>
 8005564:	f10d 0307 	add.w	r3, sp, #7
 8005568:	461d      	mov	r5, r3
 800556a:	270a      	movs	r7, #10
 800556c:	461a      	mov	r2, r3
 800556e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005572:	fb07 1416 	mls	r4, r7, r6, r1
 8005576:	3430      	adds	r4, #48	@ 0x30
 8005578:	f802 4c01 	strb.w	r4, [r2, #-1]
 800557c:	460c      	mov	r4, r1
 800557e:	2c63      	cmp	r4, #99	@ 0x63
 8005580:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005584:	4631      	mov	r1, r6
 8005586:	dcf1      	bgt.n	800556c <__exponent+0x1c>
 8005588:	3130      	adds	r1, #48	@ 0x30
 800558a:	1e94      	subs	r4, r2, #2
 800558c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005590:	1c41      	adds	r1, r0, #1
 8005592:	4623      	mov	r3, r4
 8005594:	42ab      	cmp	r3, r5
 8005596:	d30a      	bcc.n	80055ae <__exponent+0x5e>
 8005598:	f10d 0309 	add.w	r3, sp, #9
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	42ac      	cmp	r4, r5
 80055a0:	bf88      	it	hi
 80055a2:	2300      	movhi	r3, #0
 80055a4:	3302      	adds	r3, #2
 80055a6:	4403      	add	r3, r0
 80055a8:	1a18      	subs	r0, r3, r0
 80055aa:	b003      	add	sp, #12
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055b6:	e7ed      	b.n	8005594 <__exponent+0x44>
 80055b8:	2330      	movs	r3, #48	@ 0x30
 80055ba:	3130      	adds	r1, #48	@ 0x30
 80055bc:	7083      	strb	r3, [r0, #2]
 80055be:	70c1      	strb	r1, [r0, #3]
 80055c0:	1d03      	adds	r3, r0, #4
 80055c2:	e7f1      	b.n	80055a8 <__exponent+0x58>

080055c4 <_printf_float>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	b091      	sub	sp, #68	@ 0x44
 80055ca:	460c      	mov	r4, r1
 80055cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80055d0:	4616      	mov	r6, r2
 80055d2:	461f      	mov	r7, r3
 80055d4:	4605      	mov	r5, r0
 80055d6:	f000 feeb 	bl	80063b0 <_localeconv_r>
 80055da:	6803      	ldr	r3, [r0, #0]
 80055dc:	9308      	str	r3, [sp, #32]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fa fe4e 	bl	8000280 <strlen>
 80055e4:	2300      	movs	r3, #0
 80055e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80055e8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80055ee:	3307      	adds	r3, #7
 80055f0:	f023 0307 	bic.w	r3, r3, #7
 80055f4:	f103 0208 	add.w	r2, r3, #8
 80055f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005600:	f8c8 2000 	str.w	r2, [r8]
 8005604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005608:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800560c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800560e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005612:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005616:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800561a:	4b9d      	ldr	r3, [pc, #628]	@ (8005890 <_printf_float+0x2cc>)
 800561c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005620:	f7fb fa8c 	bl	8000b3c <__aeabi_dcmpun>
 8005624:	bb70      	cbnz	r0, 8005684 <_printf_float+0xc0>
 8005626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800562a:	4b99      	ldr	r3, [pc, #612]	@ (8005890 <_printf_float+0x2cc>)
 800562c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005630:	f7fb fa66 	bl	8000b00 <__aeabi_dcmple>
 8005634:	bb30      	cbnz	r0, 8005684 <_printf_float+0xc0>
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	4640      	mov	r0, r8
 800563c:	4649      	mov	r1, r9
 800563e:	f7fb fa55 	bl	8000aec <__aeabi_dcmplt>
 8005642:	b110      	cbz	r0, 800564a <_printf_float+0x86>
 8005644:	232d      	movs	r3, #45	@ 0x2d
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800564a:	4a92      	ldr	r2, [pc, #584]	@ (8005894 <_printf_float+0x2d0>)
 800564c:	4b92      	ldr	r3, [pc, #584]	@ (8005898 <_printf_float+0x2d4>)
 800564e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005652:	bf94      	ite	ls
 8005654:	4690      	movls	r8, r2
 8005656:	4698      	movhi	r8, r3
 8005658:	2303      	movs	r3, #3
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	f02b 0304 	bic.w	r3, fp, #4
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	f04f 0900 	mov.w	r9, #0
 8005666:	9700      	str	r7, [sp, #0]
 8005668:	4633      	mov	r3, r6
 800566a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800566c:	4621      	mov	r1, r4
 800566e:	4628      	mov	r0, r5
 8005670:	f000 f9d4 	bl	8005a1c <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	f040 808f 	bne.w	8005798 <_printf_float+0x1d4>
 800567a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800567e:	b011      	add	sp, #68	@ 0x44
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fb fa56 	bl	8000b3c <__aeabi_dcmpun>
 8005690:	b140      	cbz	r0, 80056a4 <_printf_float+0xe0>
 8005692:	464b      	mov	r3, r9
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfbc      	itt	lt
 8005698:	232d      	movlt	r3, #45	@ 0x2d
 800569a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800569e:	4a7f      	ldr	r2, [pc, #508]	@ (800589c <_printf_float+0x2d8>)
 80056a0:	4b7f      	ldr	r3, [pc, #508]	@ (80058a0 <_printf_float+0x2dc>)
 80056a2:	e7d4      	b.n	800564e <_printf_float+0x8a>
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80056ac:	d13f      	bne.n	800572e <_printf_float+0x16a>
 80056ae:	2306      	movs	r3, #6
 80056b0:	6063      	str	r3, [r4, #4]
 80056b2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80056b6:	2200      	movs	r2, #0
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	9206      	str	r2, [sp, #24]
 80056bc:	aa0e      	add	r2, sp, #56	@ 0x38
 80056be:	e9cd a204 	strd	sl, r2, [sp, #16]
 80056c2:	aa0d      	add	r2, sp, #52	@ 0x34
 80056c4:	9203      	str	r2, [sp, #12]
 80056c6:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80056ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	4642      	mov	r2, r8
 80056d4:	464b      	mov	r3, r9
 80056d6:	4628      	mov	r0, r5
 80056d8:	910a      	str	r1, [sp, #40]	@ 0x28
 80056da:	f7ff fed5 	bl	8005488 <__cvt>
 80056de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056e0:	2947      	cmp	r1, #71	@ 0x47
 80056e2:	4680      	mov	r8, r0
 80056e4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80056e6:	d128      	bne.n	800573a <_printf_float+0x176>
 80056e8:	1cc8      	adds	r0, r1, #3
 80056ea:	db02      	blt.n	80056f2 <_printf_float+0x12e>
 80056ec:	6863      	ldr	r3, [r4, #4]
 80056ee:	4299      	cmp	r1, r3
 80056f0:	dd40      	ble.n	8005774 <_printf_float+0x1b0>
 80056f2:	f1aa 0a02 	sub.w	sl, sl, #2
 80056f6:	fa5f fa8a 	uxtb.w	sl, sl
 80056fa:	3901      	subs	r1, #1
 80056fc:	4652      	mov	r2, sl
 80056fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005702:	910d      	str	r1, [sp, #52]	@ 0x34
 8005704:	f7ff ff24 	bl	8005550 <__exponent>
 8005708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800570a:	1813      	adds	r3, r2, r0
 800570c:	2a01      	cmp	r2, #1
 800570e:	4681      	mov	r9, r0
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	dc02      	bgt.n	800571a <_printf_float+0x156>
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	07d2      	lsls	r2, r2, #31
 8005718:	d501      	bpl.n	800571e <_printf_float+0x15a>
 800571a:	3301      	adds	r3, #1
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005722:	2b00      	cmp	r3, #0
 8005724:	d09f      	beq.n	8005666 <_printf_float+0xa2>
 8005726:	232d      	movs	r3, #45	@ 0x2d
 8005728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800572c:	e79b      	b.n	8005666 <_printf_float+0xa2>
 800572e:	2947      	cmp	r1, #71	@ 0x47
 8005730:	d1bf      	bne.n	80056b2 <_printf_float+0xee>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1bd      	bne.n	80056b2 <_printf_float+0xee>
 8005736:	2301      	movs	r3, #1
 8005738:	e7ba      	b.n	80056b0 <_printf_float+0xec>
 800573a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800573e:	d9dc      	bls.n	80056fa <_printf_float+0x136>
 8005740:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005744:	d118      	bne.n	8005778 <_printf_float+0x1b4>
 8005746:	2900      	cmp	r1, #0
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	dd0b      	ble.n	8005764 <_printf_float+0x1a0>
 800574c:	6121      	str	r1, [r4, #16]
 800574e:	b913      	cbnz	r3, 8005756 <_printf_float+0x192>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	07d0      	lsls	r0, r2, #31
 8005754:	d502      	bpl.n	800575c <_printf_float+0x198>
 8005756:	3301      	adds	r3, #1
 8005758:	440b      	add	r3, r1
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800575e:	f04f 0900 	mov.w	r9, #0
 8005762:	e7dc      	b.n	800571e <_printf_float+0x15a>
 8005764:	b913      	cbnz	r3, 800576c <_printf_float+0x1a8>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	07d2      	lsls	r2, r2, #31
 800576a:	d501      	bpl.n	8005770 <_printf_float+0x1ac>
 800576c:	3302      	adds	r3, #2
 800576e:	e7f4      	b.n	800575a <_printf_float+0x196>
 8005770:	2301      	movs	r3, #1
 8005772:	e7f2      	b.n	800575a <_printf_float+0x196>
 8005774:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800577a:	4299      	cmp	r1, r3
 800577c:	db05      	blt.n	800578a <_printf_float+0x1c6>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	6121      	str	r1, [r4, #16]
 8005782:	07d8      	lsls	r0, r3, #31
 8005784:	d5ea      	bpl.n	800575c <_printf_float+0x198>
 8005786:	1c4b      	adds	r3, r1, #1
 8005788:	e7e7      	b.n	800575a <_printf_float+0x196>
 800578a:	2900      	cmp	r1, #0
 800578c:	bfd4      	ite	le
 800578e:	f1c1 0202 	rsble	r2, r1, #2
 8005792:	2201      	movgt	r2, #1
 8005794:	4413      	add	r3, r2
 8005796:	e7e0      	b.n	800575a <_printf_float+0x196>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	055a      	lsls	r2, r3, #21
 800579c:	d407      	bmi.n	80057ae <_printf_float+0x1ea>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	4642      	mov	r2, r8
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	d12b      	bne.n	8005804 <_printf_float+0x240>
 80057ac:	e765      	b.n	800567a <_printf_float+0xb6>
 80057ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057b2:	f240 80dd 	bls.w	8005970 <_printf_float+0x3ac>
 80057b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057ba:	2200      	movs	r2, #0
 80057bc:	2300      	movs	r3, #0
 80057be:	f7fb f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d033      	beq.n	800582e <_printf_float+0x26a>
 80057c6:	4a37      	ldr	r2, [pc, #220]	@ (80058a4 <_printf_float+0x2e0>)
 80057c8:	2301      	movs	r3, #1
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f af52 	beq.w	800567a <_printf_float+0xb6>
 80057d6:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80057da:	4543      	cmp	r3, r8
 80057dc:	db02      	blt.n	80057e4 <_printf_float+0x220>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	07d8      	lsls	r0, r3, #31
 80057e2:	d50f      	bpl.n	8005804 <_printf_float+0x240>
 80057e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f af43 	beq.w	800567a <_printf_float+0xb6>
 80057f4:	f04f 0900 	mov.w	r9, #0
 80057f8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80057fc:	f104 0a1a 	add.w	sl, r4, #26
 8005800:	45c8      	cmp	r8, r9
 8005802:	dc09      	bgt.n	8005818 <_printf_float+0x254>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	f100 8103 	bmi.w	8005a12 <_printf_float+0x44e>
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005810:	4298      	cmp	r0, r3
 8005812:	bfb8      	it	lt
 8005814:	4618      	movlt	r0, r3
 8005816:	e732      	b.n	800567e <_printf_float+0xba>
 8005818:	2301      	movs	r3, #1
 800581a:	4652      	mov	r2, sl
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f af29 	beq.w	800567a <_printf_float+0xb6>
 8005828:	f109 0901 	add.w	r9, r9, #1
 800582c:	e7e8      	b.n	8005800 <_printf_float+0x23c>
 800582e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005830:	2b00      	cmp	r3, #0
 8005832:	dc39      	bgt.n	80058a8 <_printf_float+0x2e4>
 8005834:	4a1b      	ldr	r2, [pc, #108]	@ (80058a4 <_printf_float+0x2e0>)
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af1b 	beq.w	800567a <_printf_float+0xb6>
 8005844:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005848:	ea59 0303 	orrs.w	r3, r9, r3
 800584c:	d102      	bne.n	8005854 <_printf_float+0x290>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	07d9      	lsls	r1, r3, #31
 8005852:	d5d7      	bpl.n	8005804 <_printf_float+0x240>
 8005854:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af0b 	beq.w	800567a <_printf_float+0xb6>
 8005864:	f04f 0a00 	mov.w	sl, #0
 8005868:	f104 0b1a 	add.w	fp, r4, #26
 800586c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800586e:	425b      	negs	r3, r3
 8005870:	4553      	cmp	r3, sl
 8005872:	dc01      	bgt.n	8005878 <_printf_float+0x2b4>
 8005874:	464b      	mov	r3, r9
 8005876:	e793      	b.n	80057a0 <_printf_float+0x1dc>
 8005878:	2301      	movs	r3, #1
 800587a:	465a      	mov	r2, fp
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f aef9 	beq.w	800567a <_printf_float+0xb6>
 8005888:	f10a 0a01 	add.w	sl, sl, #1
 800588c:	e7ee      	b.n	800586c <_printf_float+0x2a8>
 800588e:	bf00      	nop
 8005890:	7fefffff 	.word	0x7fefffff
 8005894:	08009b7f 	.word	0x08009b7f
 8005898:	08009b83 	.word	0x08009b83
 800589c:	08009b87 	.word	0x08009b87
 80058a0:	08009b8b 	.word	0x08009b8b
 80058a4:	08009b8f 	.word	0x08009b8f
 80058a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058aa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058ae:	4553      	cmp	r3, sl
 80058b0:	bfa8      	it	ge
 80058b2:	4653      	movge	r3, sl
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	4699      	mov	r9, r3
 80058b8:	dc36      	bgt.n	8005928 <_printf_float+0x364>
 80058ba:	f04f 0b00 	mov.w	fp, #0
 80058be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c2:	f104 021a 	add.w	r2, r4, #26
 80058c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ca:	eba3 0309 	sub.w	r3, r3, r9
 80058ce:	455b      	cmp	r3, fp
 80058d0:	dc31      	bgt.n	8005936 <_printf_float+0x372>
 80058d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058d4:	459a      	cmp	sl, r3
 80058d6:	dc3a      	bgt.n	800594e <_printf_float+0x38a>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07da      	lsls	r2, r3, #31
 80058dc:	d437      	bmi.n	800594e <_printf_float+0x38a>
 80058de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058e0:	ebaa 0903 	sub.w	r9, sl, r3
 80058e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058e6:	ebaa 0303 	sub.w	r3, sl, r3
 80058ea:	4599      	cmp	r9, r3
 80058ec:	bfa8      	it	ge
 80058ee:	4699      	movge	r9, r3
 80058f0:	f1b9 0f00 	cmp.w	r9, #0
 80058f4:	dc33      	bgt.n	800595e <_printf_float+0x39a>
 80058f6:	f04f 0800 	mov.w	r8, #0
 80058fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fe:	f104 0b1a 	add.w	fp, r4, #26
 8005902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005904:	ebaa 0303 	sub.w	r3, sl, r3
 8005908:	eba3 0309 	sub.w	r3, r3, r9
 800590c:	4543      	cmp	r3, r8
 800590e:	f77f af79 	ble.w	8005804 <_printf_float+0x240>
 8005912:	2301      	movs	r3, #1
 8005914:	465a      	mov	r2, fp
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f aeac 	beq.w	800567a <_printf_float+0xb6>
 8005922:	f108 0801 	add.w	r8, r8, #1
 8005926:	e7ec      	b.n	8005902 <_printf_float+0x33e>
 8005928:	4642      	mov	r2, r8
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	d1c2      	bne.n	80058ba <_printf_float+0x2f6>
 8005934:	e6a1      	b.n	800567a <_printf_float+0xb6>
 8005936:	2301      	movs	r3, #1
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	920a      	str	r2, [sp, #40]	@ 0x28
 800593e:	47b8      	blx	r7
 8005940:	3001      	adds	r0, #1
 8005942:	f43f ae9a 	beq.w	800567a <_printf_float+0xb6>
 8005946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005948:	f10b 0b01 	add.w	fp, fp, #1
 800594c:	e7bb      	b.n	80058c6 <_printf_float+0x302>
 800594e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	d1c0      	bne.n	80058de <_printf_float+0x31a>
 800595c:	e68d      	b.n	800567a <_printf_float+0xb6>
 800595e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005960:	464b      	mov	r3, r9
 8005962:	4442      	add	r2, r8
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	d1c3      	bne.n	80058f6 <_printf_float+0x332>
 800596e:	e684      	b.n	800567a <_printf_float+0xb6>
 8005970:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005974:	f1ba 0f01 	cmp.w	sl, #1
 8005978:	dc01      	bgt.n	800597e <_printf_float+0x3ba>
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d536      	bpl.n	80059ec <_printf_float+0x428>
 800597e:	2301      	movs	r3, #1
 8005980:	4642      	mov	r2, r8
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae76 	beq.w	800567a <_printf_float+0xb6>
 800598e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	47b8      	blx	r7
 8005998:	3001      	adds	r0, #1
 800599a:	f43f ae6e 	beq.w	800567a <_printf_float+0xb6>
 800599e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059a2:	2200      	movs	r2, #0
 80059a4:	2300      	movs	r3, #0
 80059a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80059aa:	f7fb f895 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ae:	b9c0      	cbnz	r0, 80059e2 <_printf_float+0x41e>
 80059b0:	4653      	mov	r3, sl
 80059b2:	f108 0201 	add.w	r2, r8, #1
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d10c      	bne.n	80059da <_printf_float+0x416>
 80059c0:	e65b      	b.n	800567a <_printf_float+0xb6>
 80059c2:	2301      	movs	r3, #1
 80059c4:	465a      	mov	r2, fp
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae54 	beq.w	800567a <_printf_float+0xb6>
 80059d2:	f108 0801 	add.w	r8, r8, #1
 80059d6:	45d0      	cmp	r8, sl
 80059d8:	dbf3      	blt.n	80059c2 <_printf_float+0x3fe>
 80059da:	464b      	mov	r3, r9
 80059dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059e0:	e6df      	b.n	80057a2 <_printf_float+0x1de>
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	f104 0b1a 	add.w	fp, r4, #26
 80059ea:	e7f4      	b.n	80059d6 <_printf_float+0x412>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4642      	mov	r2, r8
 80059f0:	e7e1      	b.n	80059b6 <_printf_float+0x3f2>
 80059f2:	2301      	movs	r3, #1
 80059f4:	464a      	mov	r2, r9
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f ae3c 	beq.w	800567a <_printf_float+0xb6>
 8005a02:	f108 0801 	add.w	r8, r8, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	4543      	cmp	r3, r8
 8005a0e:	dcf0      	bgt.n	80059f2 <_printf_float+0x42e>
 8005a10:	e6fc      	b.n	800580c <_printf_float+0x248>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	f104 0919 	add.w	r9, r4, #25
 8005a1a:	e7f4      	b.n	8005a06 <_printf_float+0x442>

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4616      	mov	r6, r2
 8005a22:	4698      	mov	r8, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a38:	4607      	mov	r7, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_printf_common+0x26>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	0699      	lsls	r1, r3, #26
 8005a46:	bf42      	ittt	mi
 8005a48:	6833      	ldrmi	r3, [r6, #0]
 8005a4a:	3302      	addmi	r3, #2
 8005a4c:	6033      	strmi	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d106      	bne.n	8005a64 <_printf_common+0x48>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	6832      	ldr	r2, [r6, #0]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dc26      	bgt.n	8005ab2 <_printf_common+0x96>
 8005a64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	3b00      	subs	r3, #0
 8005a6c:	bf18      	it	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	0692      	lsls	r2, r2, #26
 8005a72:	d42b      	bmi.n	8005acc <_printf_common+0xb0>
 8005a74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c8      	blx	r9
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d01e      	beq.n	8005ac0 <_printf_common+0xa4>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	6922      	ldr	r2, [r4, #16]
 8005a86:	f003 0306 	and.w	r3, r3, #6
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	bf02      	ittt	eq
 8005a8e:	68e5      	ldreq	r5, [r4, #12]
 8005a90:	6833      	ldreq	r3, [r6, #0]
 8005a92:	1aed      	subeq	r5, r5, r3
 8005a94:	68a3      	ldr	r3, [r4, #8]
 8005a96:	bf0c      	ite	eq
 8005a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a9c:	2500      	movne	r5, #0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfc4      	itt	gt
 8005aa2:	1a9b      	subgt	r3, r3, r2
 8005aa4:	18ed      	addgt	r5, r5, r3
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	341a      	adds	r4, #26
 8005aaa:	42b5      	cmp	r5, r6
 8005aac:	d11a      	bne.n	8005ae4 <_printf_common+0xc8>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e008      	b.n	8005ac4 <_printf_common+0xa8>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c8      	blx	r9
 8005abc:	3001      	adds	r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_printf_common+0xac>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7c6      	b.n	8005a5a <_printf_common+0x3e>
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	2030      	movs	r0, #48	@ 0x30
 8005ad2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	e7c7      	b.n	8005a74 <_printf_common+0x58>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4641      	mov	r1, r8
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c8      	blx	r9
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0e6      	beq.n	8005ac0 <_printf_common+0xa4>
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7d9      	b.n	8005aaa <_printf_common+0x8e>
	...

08005af8 <_printf_i>:
 8005af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	7e0f      	ldrb	r7, [r1, #24]
 8005afe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b00:	2f78      	cmp	r7, #120	@ 0x78
 8005b02:	4691      	mov	r9, r2
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b0e:	d807      	bhi.n	8005b20 <_printf_i+0x28>
 8005b10:	2f62      	cmp	r7, #98	@ 0x62
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x32>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	f000 80d2 	beq.w	8005cbe <_printf_i+0x1c6>
 8005b1a:	2f58      	cmp	r7, #88	@ 0x58
 8005b1c:	f000 80b9 	beq.w	8005c92 <_printf_i+0x19a>
 8005b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b28:	e03a      	b.n	8005ba0 <_printf_i+0xa8>
 8005b2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b2e:	2b15      	cmp	r3, #21
 8005b30:	d8f6      	bhi.n	8005b20 <_printf_i+0x28>
 8005b32:	a101      	add	r1, pc, #4	@ (adr r1, 8005b38 <_printf_i+0x40>)
 8005b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005b21 	.word	0x08005b21
 8005b44:	08005b21 	.word	0x08005b21
 8005b48:	08005b21 	.word	0x08005b21
 8005b4c:	08005b21 	.word	0x08005b21
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005b21 	.word	0x08005b21
 8005b58:	08005b21 	.word	0x08005b21
 8005b5c:	08005b21 	.word	0x08005b21
 8005b60:	08005b21 	.word	0x08005b21
 8005b64:	08005ca5 	.word	0x08005ca5
 8005b68:	08005bcf 	.word	0x08005bcf
 8005b6c:	08005c5f 	.word	0x08005c5f
 8005b70:	08005b21 	.word	0x08005b21
 8005b74:	08005b21 	.word	0x08005b21
 8005b78:	08005cc7 	.word	0x08005cc7
 8005b7c:	08005b21 	.word	0x08005b21
 8005b80:	08005bcf 	.word	0x08005bcf
 8005b84:	08005b21 	.word	0x08005b21
 8005b88:	08005b21 	.word	0x08005b21
 8005b8c:	08005c67 	.word	0x08005c67
 8005b90:	6833      	ldr	r3, [r6, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6032      	str	r2, [r6, #0]
 8005b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e09d      	b.n	8005ce0 <_printf_i+0x1e8>
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	1d19      	adds	r1, r3, #4
 8005baa:	6031      	str	r1, [r6, #0]
 8005bac:	0606      	lsls	r6, r0, #24
 8005bae:	d501      	bpl.n	8005bb4 <_printf_i+0xbc>
 8005bb0:	681d      	ldr	r5, [r3, #0]
 8005bb2:	e003      	b.n	8005bbc <_printf_i+0xc4>
 8005bb4:	0645      	lsls	r5, r0, #25
 8005bb6:	d5fb      	bpl.n	8005bb0 <_printf_i+0xb8>
 8005bb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	da03      	bge.n	8005bc8 <_printf_i+0xd0>
 8005bc0:	232d      	movs	r3, #45	@ 0x2d
 8005bc2:	426d      	negs	r5, r5
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bc8:	4859      	ldr	r0, [pc, #356]	@ (8005d30 <_printf_i+0x238>)
 8005bca:	230a      	movs	r3, #10
 8005bcc:	e011      	b.n	8005bf2 <_printf_i+0xfa>
 8005bce:	6821      	ldr	r1, [r4, #0]
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	0608      	lsls	r0, r1, #24
 8005bd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bd8:	d402      	bmi.n	8005be0 <_printf_i+0xe8>
 8005bda:	0649      	lsls	r1, r1, #25
 8005bdc:	bf48      	it	mi
 8005bde:	b2ad      	uxthmi	r5, r5
 8005be0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005be2:	4853      	ldr	r0, [pc, #332]	@ (8005d30 <_printf_i+0x238>)
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	bf14      	ite	ne
 8005be8:	230a      	movne	r3, #10
 8005bea:	2308      	moveq	r3, #8
 8005bec:	2100      	movs	r1, #0
 8005bee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bf2:	6866      	ldr	r6, [r4, #4]
 8005bf4:	60a6      	str	r6, [r4, #8]
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	bfa2      	ittt	ge
 8005bfa:	6821      	ldrge	r1, [r4, #0]
 8005bfc:	f021 0104 	bicge.w	r1, r1, #4
 8005c00:	6021      	strge	r1, [r4, #0]
 8005c02:	b90d      	cbnz	r5, 8005c08 <_printf_i+0x110>
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	d04b      	beq.n	8005ca0 <_printf_i+0x1a8>
 8005c08:	4616      	mov	r6, r2
 8005c0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c12:	5dc7      	ldrb	r7, [r0, r7]
 8005c14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c18:	462f      	mov	r7, r5
 8005c1a:	42bb      	cmp	r3, r7
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	d9f4      	bls.n	8005c0a <_printf_i+0x112>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d10b      	bne.n	8005c3c <_printf_i+0x144>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	07df      	lsls	r7, r3, #31
 8005c28:	d508      	bpl.n	8005c3c <_printf_i+0x144>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6861      	ldr	r1, [r4, #4]
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	bfde      	ittt	le
 8005c32:	2330      	movle	r3, #48	@ 0x30
 8005c34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005c3c:	1b92      	subs	r2, r2, r6
 8005c3e:	6122      	str	r2, [r4, #16]
 8005c40:	f8cd a000 	str.w	sl, [sp]
 8005c44:	464b      	mov	r3, r9
 8005c46:	aa03      	add	r2, sp, #12
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7ff fee6 	bl	8005a1c <_printf_common>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d14a      	bne.n	8005cea <_printf_i+0x1f2>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c58:	b004      	add	sp, #16
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	4833      	ldr	r0, [pc, #204]	@ (8005d34 <_printf_i+0x23c>)
 8005c68:	2778      	movs	r7, #120	@ 0x78
 8005c6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	6831      	ldr	r1, [r6, #0]
 8005c72:	061f      	lsls	r7, r3, #24
 8005c74:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c78:	d402      	bmi.n	8005c80 <_printf_i+0x188>
 8005c7a:	065f      	lsls	r7, r3, #25
 8005c7c:	bf48      	it	mi
 8005c7e:	b2ad      	uxthmi	r5, r5
 8005c80:	6031      	str	r1, [r6, #0]
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	bf44      	itt	mi
 8005c86:	f043 0320 	orrmi.w	r3, r3, #32
 8005c8a:	6023      	strmi	r3, [r4, #0]
 8005c8c:	b11d      	cbz	r5, 8005c96 <_printf_i+0x19e>
 8005c8e:	2310      	movs	r3, #16
 8005c90:	e7ac      	b.n	8005bec <_printf_i+0xf4>
 8005c92:	4827      	ldr	r0, [pc, #156]	@ (8005d30 <_printf_i+0x238>)
 8005c94:	e7e9      	b.n	8005c6a <_printf_i+0x172>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	f023 0320 	bic.w	r3, r3, #32
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	e7f6      	b.n	8005c8e <_printf_i+0x196>
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	e7bd      	b.n	8005c20 <_printf_i+0x128>
 8005ca4:	6833      	ldr	r3, [r6, #0]
 8005ca6:	6825      	ldr	r5, [r4, #0]
 8005ca8:	6961      	ldr	r1, [r4, #20]
 8005caa:	1d18      	adds	r0, r3, #4
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	062e      	lsls	r6, r5, #24
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_i+0x1c0>
 8005cb4:	6019      	str	r1, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <_printf_i+0x1c6>
 8005cb8:	0668      	lsls	r0, r5, #25
 8005cba:	d5fb      	bpl.n	8005cb4 <_printf_i+0x1bc>
 8005cbc:	8019      	strh	r1, [r3, #0]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	4616      	mov	r6, r2
 8005cc4:	e7bc      	b.n	8005c40 <_printf_i+0x148>
 8005cc6:	6833      	ldr	r3, [r6, #0]
 8005cc8:	1d1a      	adds	r2, r3, #4
 8005cca:	6032      	str	r2, [r6, #0]
 8005ccc:	681e      	ldr	r6, [r3, #0]
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7fa fa84 	bl	80001e0 <memchr>
 8005cd8:	b108      	cbz	r0, 8005cde <_printf_i+0x1e6>
 8005cda:	1b80      	subs	r0, r0, r6
 8005cdc:	6060      	str	r0, [r4, #4]
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ce8:	e7aa      	b.n	8005c40 <_printf_i+0x148>
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	4632      	mov	r2, r6
 8005cee:	4649      	mov	r1, r9
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	47d0      	blx	sl
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d0ad      	beq.n	8005c54 <_printf_i+0x15c>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	079b      	lsls	r3, r3, #30
 8005cfc:	d413      	bmi.n	8005d26 <_printf_i+0x22e>
 8005cfe:	68e0      	ldr	r0, [r4, #12]
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	4298      	cmp	r0, r3
 8005d04:	bfb8      	it	lt
 8005d06:	4618      	movlt	r0, r3
 8005d08:	e7a6      	b.n	8005c58 <_printf_i+0x160>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4640      	mov	r0, r8
 8005d12:	47d0      	blx	sl
 8005d14:	3001      	adds	r0, #1
 8005d16:	d09d      	beq.n	8005c54 <_printf_i+0x15c>
 8005d18:	3501      	adds	r5, #1
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	9903      	ldr	r1, [sp, #12]
 8005d1e:	1a5b      	subs	r3, r3, r1
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	dcf2      	bgt.n	8005d0a <_printf_i+0x212>
 8005d24:	e7eb      	b.n	8005cfe <_printf_i+0x206>
 8005d26:	2500      	movs	r5, #0
 8005d28:	f104 0619 	add.w	r6, r4, #25
 8005d2c:	e7f5      	b.n	8005d1a <_printf_i+0x222>
 8005d2e:	bf00      	nop
 8005d30:	08009b91 	.word	0x08009b91
 8005d34:	08009ba2 	.word	0x08009ba2

08005d38 <_scanf_float>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	4617      	mov	r7, r2
 8005d40:	9303      	str	r3, [sp, #12]
 8005d42:	688b      	ldr	r3, [r1, #8]
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005d4a:	bf81      	itttt	hi
 8005d4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005d50:	eb03 0b05 	addhi.w	fp, r3, r5
 8005d54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005d58:	608b      	strhi	r3, [r1, #8]
 8005d5a:	680b      	ldr	r3, [r1, #0]
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	f04f 0500 	mov.w	r5, #0
 8005d62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005d66:	f842 3b1c 	str.w	r3, [r2], #28
 8005d6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d6e:	4680      	mov	r8, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	bf98      	it	ls
 8005d74:	f04f 0b00 	movls.w	fp, #0
 8005d78:	9201      	str	r2, [sp, #4]
 8005d7a:	4616      	mov	r6, r2
 8005d7c:	46aa      	mov	sl, r5
 8005d7e:	46a9      	mov	r9, r5
 8005d80:	9502      	str	r5, [sp, #8]
 8005d82:	68a2      	ldr	r2, [r4, #8]
 8005d84:	b152      	cbz	r2, 8005d9c <_scanf_float+0x64>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8005d8c:	d864      	bhi.n	8005e58 <_scanf_float+0x120>
 8005d8e:	2b40      	cmp	r3, #64	@ 0x40
 8005d90:	d83c      	bhi.n	8005e0c <_scanf_float+0xd4>
 8005d92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005d96:	b2c8      	uxtb	r0, r1
 8005d98:	280e      	cmp	r0, #14
 8005d9a:	d93a      	bls.n	8005e12 <_scanf_float+0xda>
 8005d9c:	f1b9 0f00 	cmp.w	r9, #0
 8005da0:	d003      	beq.n	8005daa <_scanf_float+0x72>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005dae:	f1ba 0f01 	cmp.w	sl, #1
 8005db2:	f200 8117 	bhi.w	8005fe4 <_scanf_float+0x2ac>
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	429e      	cmp	r6, r3
 8005dba:	f200 8108 	bhi.w	8005fce <_scanf_float+0x296>
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	b007      	add	sp, #28
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005dca:	2a0d      	cmp	r2, #13
 8005dcc:	d8e6      	bhi.n	8005d9c <_scanf_float+0x64>
 8005dce:	a101      	add	r1, pc, #4	@ (adr r1, 8005dd4 <_scanf_float+0x9c>)
 8005dd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005dd4:	08005f1b 	.word	0x08005f1b
 8005dd8:	08005d9d 	.word	0x08005d9d
 8005ddc:	08005d9d 	.word	0x08005d9d
 8005de0:	08005d9d 	.word	0x08005d9d
 8005de4:	08005f7b 	.word	0x08005f7b
 8005de8:	08005f53 	.word	0x08005f53
 8005dec:	08005d9d 	.word	0x08005d9d
 8005df0:	08005d9d 	.word	0x08005d9d
 8005df4:	08005f29 	.word	0x08005f29
 8005df8:	08005d9d 	.word	0x08005d9d
 8005dfc:	08005d9d 	.word	0x08005d9d
 8005e00:	08005d9d 	.word	0x08005d9d
 8005e04:	08005d9d 	.word	0x08005d9d
 8005e08:	08005ee1 	.word	0x08005ee1
 8005e0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005e10:	e7db      	b.n	8005dca <_scanf_float+0x92>
 8005e12:	290e      	cmp	r1, #14
 8005e14:	d8c2      	bhi.n	8005d9c <_scanf_float+0x64>
 8005e16:	a001      	add	r0, pc, #4	@ (adr r0, 8005e1c <_scanf_float+0xe4>)
 8005e18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e1c:	08005ed1 	.word	0x08005ed1
 8005e20:	08005d9d 	.word	0x08005d9d
 8005e24:	08005ed1 	.word	0x08005ed1
 8005e28:	08005f67 	.word	0x08005f67
 8005e2c:	08005d9d 	.word	0x08005d9d
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005eb7 	.word	0x08005eb7
 8005e38:	08005eb7 	.word	0x08005eb7
 8005e3c:	08005eb7 	.word	0x08005eb7
 8005e40:	08005eb7 	.word	0x08005eb7
 8005e44:	08005eb7 	.word	0x08005eb7
 8005e48:	08005eb7 	.word	0x08005eb7
 8005e4c:	08005eb7 	.word	0x08005eb7
 8005e50:	08005eb7 	.word	0x08005eb7
 8005e54:	08005eb7 	.word	0x08005eb7
 8005e58:	2b6e      	cmp	r3, #110	@ 0x6e
 8005e5a:	d809      	bhi.n	8005e70 <_scanf_float+0x138>
 8005e5c:	2b60      	cmp	r3, #96	@ 0x60
 8005e5e:	d8b2      	bhi.n	8005dc6 <_scanf_float+0x8e>
 8005e60:	2b54      	cmp	r3, #84	@ 0x54
 8005e62:	d07b      	beq.n	8005f5c <_scanf_float+0x224>
 8005e64:	2b59      	cmp	r3, #89	@ 0x59
 8005e66:	d199      	bne.n	8005d9c <_scanf_float+0x64>
 8005e68:	2d07      	cmp	r5, #7
 8005e6a:	d197      	bne.n	8005d9c <_scanf_float+0x64>
 8005e6c:	2508      	movs	r5, #8
 8005e6e:	e02c      	b.n	8005eca <_scanf_float+0x192>
 8005e70:	2b74      	cmp	r3, #116	@ 0x74
 8005e72:	d073      	beq.n	8005f5c <_scanf_float+0x224>
 8005e74:	2b79      	cmp	r3, #121	@ 0x79
 8005e76:	e7f6      	b.n	8005e66 <_scanf_float+0x12e>
 8005e78:	6821      	ldr	r1, [r4, #0]
 8005e7a:	05c8      	lsls	r0, r1, #23
 8005e7c:	d51b      	bpl.n	8005eb6 <_scanf_float+0x17e>
 8005e7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005e82:	6021      	str	r1, [r4, #0]
 8005e84:	f109 0901 	add.w	r9, r9, #1
 8005e88:	f1bb 0f00 	cmp.w	fp, #0
 8005e8c:	d003      	beq.n	8005e96 <_scanf_float+0x15e>
 8005e8e:	3201      	adds	r2, #1
 8005e90:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005e94:	60a2      	str	r2, [r4, #8]
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	60a3      	str	r3, [r4, #8]
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	f340 8087 	ble.w	8005fbc <_scanf_float+0x284>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	e765      	b.n	8005d82 <_scanf_float+0x4a>
 8005eb6:	eb1a 0105 	adds.w	r1, sl, r5
 8005eba:	f47f af6f 	bne.w	8005d9c <_scanf_float+0x64>
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005ec4:	6022      	str	r2, [r4, #0]
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	468a      	mov	sl, r1
 8005eca:	f806 3b01 	strb.w	r3, [r6], #1
 8005ece:	e7e2      	b.n	8005e96 <_scanf_float+0x15e>
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	0610      	lsls	r0, r2, #24
 8005ed4:	f57f af62 	bpl.w	8005d9c <_scanf_float+0x64>
 8005ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	e7f4      	b.n	8005eca <_scanf_float+0x192>
 8005ee0:	f1ba 0f00 	cmp.w	sl, #0
 8005ee4:	d10e      	bne.n	8005f04 <_scanf_float+0x1cc>
 8005ee6:	f1b9 0f00 	cmp.w	r9, #0
 8005eea:	d10e      	bne.n	8005f0a <_scanf_float+0x1d2>
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ef2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005ef6:	d108      	bne.n	8005f0a <_scanf_float+0x1d2>
 8005ef8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	f04f 0a01 	mov.w	sl, #1
 8005f02:	e7e2      	b.n	8005eca <_scanf_float+0x192>
 8005f04:	f1ba 0f02 	cmp.w	sl, #2
 8005f08:	d055      	beq.n	8005fb6 <_scanf_float+0x27e>
 8005f0a:	2d01      	cmp	r5, #1
 8005f0c:	d002      	beq.n	8005f14 <_scanf_float+0x1dc>
 8005f0e:	2d04      	cmp	r5, #4
 8005f10:	f47f af44 	bne.w	8005d9c <_scanf_float+0x64>
 8005f14:	3501      	adds	r5, #1
 8005f16:	b2ed      	uxtb	r5, r5
 8005f18:	e7d7      	b.n	8005eca <_scanf_float+0x192>
 8005f1a:	f1ba 0f01 	cmp.w	sl, #1
 8005f1e:	f47f af3d 	bne.w	8005d9c <_scanf_float+0x64>
 8005f22:	f04f 0a02 	mov.w	sl, #2
 8005f26:	e7d0      	b.n	8005eca <_scanf_float+0x192>
 8005f28:	b97d      	cbnz	r5, 8005f4a <_scanf_float+0x212>
 8005f2a:	f1b9 0f00 	cmp.w	r9, #0
 8005f2e:	f47f af38 	bne.w	8005da2 <_scanf_float+0x6a>
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005f38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005f3c:	f040 8103 	bne.w	8006146 <_scanf_float+0x40e>
 8005f40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	2501      	movs	r5, #1
 8005f48:	e7bf      	b.n	8005eca <_scanf_float+0x192>
 8005f4a:	2d03      	cmp	r5, #3
 8005f4c:	d0e2      	beq.n	8005f14 <_scanf_float+0x1dc>
 8005f4e:	2d05      	cmp	r5, #5
 8005f50:	e7de      	b.n	8005f10 <_scanf_float+0x1d8>
 8005f52:	2d02      	cmp	r5, #2
 8005f54:	f47f af22 	bne.w	8005d9c <_scanf_float+0x64>
 8005f58:	2503      	movs	r5, #3
 8005f5a:	e7b6      	b.n	8005eca <_scanf_float+0x192>
 8005f5c:	2d06      	cmp	r5, #6
 8005f5e:	f47f af1d 	bne.w	8005d9c <_scanf_float+0x64>
 8005f62:	2507      	movs	r5, #7
 8005f64:	e7b1      	b.n	8005eca <_scanf_float+0x192>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	0591      	lsls	r1, r2, #22
 8005f6a:	f57f af17 	bpl.w	8005d9c <_scanf_float+0x64>
 8005f6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f78:	e7a7      	b.n	8005eca <_scanf_float+0x192>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005f80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005f84:	d006      	beq.n	8005f94 <_scanf_float+0x25c>
 8005f86:	0550      	lsls	r0, r2, #21
 8005f88:	f57f af08 	bpl.w	8005d9c <_scanf_float+0x64>
 8005f8c:	f1b9 0f00 	cmp.w	r9, #0
 8005f90:	f000 80d9 	beq.w	8006146 <_scanf_float+0x40e>
 8005f94:	0591      	lsls	r1, r2, #22
 8005f96:	bf58      	it	pl
 8005f98:	9902      	ldrpl	r1, [sp, #8]
 8005f9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f9e:	bf58      	it	pl
 8005fa0:	eba9 0101 	subpl.w	r1, r9, r1
 8005fa4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005fa8:	bf58      	it	pl
 8005faa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005fae:	6022      	str	r2, [r4, #0]
 8005fb0:	f04f 0900 	mov.w	r9, #0
 8005fb4:	e789      	b.n	8005eca <_scanf_float+0x192>
 8005fb6:	f04f 0a03 	mov.w	sl, #3
 8005fba:	e786      	b.n	8005eca <_scanf_float+0x192>
 8005fbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4798      	blx	r3
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f43f aedb 	beq.w	8005d82 <_scanf_float+0x4a>
 8005fcc:	e6e6      	b.n	8005d9c <_scanf_float+0x64>
 8005fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4640      	mov	r0, r8
 8005fda:	4798      	blx	r3
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	e6e8      	b.n	8005db6 <_scanf_float+0x7e>
 8005fe4:	1e6b      	subs	r3, r5, #1
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d824      	bhi.n	8006034 <_scanf_float+0x2fc>
 8005fea:	2d02      	cmp	r5, #2
 8005fec:	d836      	bhi.n	800605c <_scanf_float+0x324>
 8005fee:	9b01      	ldr	r3, [sp, #4]
 8005ff0:	429e      	cmp	r6, r3
 8005ff2:	f67f aee4 	bls.w	8005dbe <_scanf_float+0x86>
 8005ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ffe:	463a      	mov	r2, r7
 8006000:	4640      	mov	r0, r8
 8006002:	4798      	blx	r3
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	3b01      	subs	r3, #1
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	e7f0      	b.n	8005fee <_scanf_float+0x2b6>
 800600c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006010:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006014:	463a      	mov	r2, r7
 8006016:	4640      	mov	r0, r8
 8006018:	4798      	blx	r3
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	3b01      	subs	r3, #1
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006024:	fa5f fa8a 	uxtb.w	sl, sl
 8006028:	f1ba 0f02 	cmp.w	sl, #2
 800602c:	d1ee      	bne.n	800600c <_scanf_float+0x2d4>
 800602e:	3d03      	subs	r5, #3
 8006030:	b2ed      	uxtb	r5, r5
 8006032:	1b76      	subs	r6, r6, r5
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	05da      	lsls	r2, r3, #23
 8006038:	d530      	bpl.n	800609c <_scanf_float+0x364>
 800603a:	055b      	lsls	r3, r3, #21
 800603c:	d511      	bpl.n	8006062 <_scanf_float+0x32a>
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	429e      	cmp	r6, r3
 8006042:	f67f aebc 	bls.w	8005dbe <_scanf_float+0x86>
 8006046:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800604a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800604e:	463a      	mov	r2, r7
 8006050:	4640      	mov	r0, r8
 8006052:	4798      	blx	r3
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	3b01      	subs	r3, #1
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	e7f0      	b.n	800603e <_scanf_float+0x306>
 800605c:	46aa      	mov	sl, r5
 800605e:	46b3      	mov	fp, r6
 8006060:	e7de      	b.n	8006020 <_scanf_float+0x2e8>
 8006062:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	2965      	cmp	r1, #101	@ 0x65
 800606a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800606e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	d00c      	beq.n	8006090 <_scanf_float+0x358>
 8006076:	2945      	cmp	r1, #69	@ 0x45
 8006078:	d00a      	beq.n	8006090 <_scanf_float+0x358>
 800607a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800607e:	463a      	mov	r2, r7
 8006080:	4640      	mov	r0, r8
 8006082:	4798      	blx	r3
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800608a:	3b01      	subs	r3, #1
 800608c:	1eb5      	subs	r5, r6, #2
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006094:	463a      	mov	r2, r7
 8006096:	4640      	mov	r0, r8
 8006098:	4798      	blx	r3
 800609a:	462e      	mov	r6, r5
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	f012 0210 	ands.w	r2, r2, #16
 80060a2:	d001      	beq.n	80060a8 <_scanf_float+0x370>
 80060a4:	2000      	movs	r0, #0
 80060a6:	e68b      	b.n	8005dc0 <_scanf_float+0x88>
 80060a8:	7032      	strb	r2, [r6, #0]
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b4:	d11c      	bne.n	80060f0 <_scanf_float+0x3b8>
 80060b6:	9b02      	ldr	r3, [sp, #8]
 80060b8:	454b      	cmp	r3, r9
 80060ba:	eba3 0209 	sub.w	r2, r3, r9
 80060be:	d123      	bne.n	8006108 <_scanf_float+0x3d0>
 80060c0:	2200      	movs	r2, #0
 80060c2:	9901      	ldr	r1, [sp, #4]
 80060c4:	4640      	mov	r0, r8
 80060c6:	f002 fbdf 	bl	8008888 <_strtod_r>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	6825      	ldr	r5, [r4, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f015 0f02 	tst.w	r5, #2
 80060d4:	4606      	mov	r6, r0
 80060d6:	460f      	mov	r7, r1
 80060d8:	f103 0204 	add.w	r2, r3, #4
 80060dc:	d01f      	beq.n	800611e <_scanf_float+0x3e6>
 80060de:	9903      	ldr	r1, [sp, #12]
 80060e0:	600a      	str	r2, [r1, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	e9c3 6700 	strd	r6, r7, [r3]
 80060e8:	68e3      	ldr	r3, [r4, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60e3      	str	r3, [r4, #12]
 80060ee:	e7d9      	b.n	80060a4 <_scanf_float+0x36c>
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0e4      	beq.n	80060c0 <_scanf_float+0x388>
 80060f6:	9905      	ldr	r1, [sp, #20]
 80060f8:	230a      	movs	r3, #10
 80060fa:	3101      	adds	r1, #1
 80060fc:	4640      	mov	r0, r8
 80060fe:	f002 fc43 	bl	8008988 <_strtol_r>
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	9e05      	ldr	r6, [sp, #20]
 8006106:	1ac2      	subs	r2, r0, r3
 8006108:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800610c:	429e      	cmp	r6, r3
 800610e:	bf28      	it	cs
 8006110:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006114:	490d      	ldr	r1, [pc, #52]	@ (800614c <_scanf_float+0x414>)
 8006116:	4630      	mov	r0, r6
 8006118:	f000 f8de 	bl	80062d8 <siprintf>
 800611c:	e7d0      	b.n	80060c0 <_scanf_float+0x388>
 800611e:	076d      	lsls	r5, r5, #29
 8006120:	d4dd      	bmi.n	80060de <_scanf_float+0x3a6>
 8006122:	9d03      	ldr	r5, [sp, #12]
 8006124:	602a      	str	r2, [r5, #0]
 8006126:	681d      	ldr	r5, [r3, #0]
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	f7fa fd06 	bl	8000b3c <__aeabi_dcmpun>
 8006130:	b120      	cbz	r0, 800613c <_scanf_float+0x404>
 8006132:	4807      	ldr	r0, [pc, #28]	@ (8006150 <_scanf_float+0x418>)
 8006134:	f000 f9b4 	bl	80064a0 <nanf>
 8006138:	6028      	str	r0, [r5, #0]
 800613a:	e7d5      	b.n	80060e8 <_scanf_float+0x3b0>
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa fd5a 	bl	8000bf8 <__aeabi_d2f>
 8006144:	e7f8      	b.n	8006138 <_scanf_float+0x400>
 8006146:	f04f 0900 	mov.w	r9, #0
 800614a:	e62e      	b.n	8005daa <_scanf_float+0x72>
 800614c:	08009bb3 	.word	0x08009bb3
 8006150:	08009f4d 	.word	0x08009f4d

08006154 <std>:
 8006154:	2300      	movs	r3, #0
 8006156:	b510      	push	{r4, lr}
 8006158:	4604      	mov	r4, r0
 800615a:	e9c0 3300 	strd	r3, r3, [r0]
 800615e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006162:	6083      	str	r3, [r0, #8]
 8006164:	8181      	strh	r1, [r0, #12]
 8006166:	6643      	str	r3, [r0, #100]	@ 0x64
 8006168:	81c2      	strh	r2, [r0, #14]
 800616a:	6183      	str	r3, [r0, #24]
 800616c:	4619      	mov	r1, r3
 800616e:	2208      	movs	r2, #8
 8006170:	305c      	adds	r0, #92	@ 0x5c
 8006172:	f000 f914 	bl	800639e <memset>
 8006176:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <std+0x58>)
 8006178:	6263      	str	r3, [r4, #36]	@ 0x24
 800617a:	4b0d      	ldr	r3, [pc, #52]	@ (80061b0 <std+0x5c>)
 800617c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <std+0x60>)
 8006180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006182:	4b0d      	ldr	r3, [pc, #52]	@ (80061b8 <std+0x64>)
 8006184:	6323      	str	r3, [r4, #48]	@ 0x30
 8006186:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <std+0x68>)
 8006188:	6224      	str	r4, [r4, #32]
 800618a:	429c      	cmp	r4, r3
 800618c:	d006      	beq.n	800619c <std+0x48>
 800618e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006192:	4294      	cmp	r4, r2
 8006194:	d002      	beq.n	800619c <std+0x48>
 8006196:	33d0      	adds	r3, #208	@ 0xd0
 8006198:	429c      	cmp	r4, r3
 800619a:	d105      	bne.n	80061a8 <std+0x54>
 800619c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80061a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a4:	f000 b978 	b.w	8006498 <__retarget_lock_init_recursive>
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	08006319 	.word	0x08006319
 80061b0:	0800633b 	.word	0x0800633b
 80061b4:	08006373 	.word	0x08006373
 80061b8:	08006397 	.word	0x08006397
 80061bc:	20000478 	.word	0x20000478

080061c0 <stdio_exit_handler>:
 80061c0:	4a02      	ldr	r2, [pc, #8]	@ (80061cc <stdio_exit_handler+0xc>)
 80061c2:	4903      	ldr	r1, [pc, #12]	@ (80061d0 <stdio_exit_handler+0x10>)
 80061c4:	4803      	ldr	r0, [pc, #12]	@ (80061d4 <stdio_exit_handler+0x14>)
 80061c6:	f000 b869 	b.w	800629c <_fwalk_sglue>
 80061ca:	bf00      	nop
 80061cc:	20000000 	.word	0x20000000
 80061d0:	08008d3d 	.word	0x08008d3d
 80061d4:	20000010 	.word	0x20000010

080061d8 <cleanup_stdio>:
 80061d8:	6841      	ldr	r1, [r0, #4]
 80061da:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <cleanup_stdio+0x34>)
 80061dc:	4299      	cmp	r1, r3
 80061de:	b510      	push	{r4, lr}
 80061e0:	4604      	mov	r4, r0
 80061e2:	d001      	beq.n	80061e8 <cleanup_stdio+0x10>
 80061e4:	f002 fdaa 	bl	8008d3c <_fflush_r>
 80061e8:	68a1      	ldr	r1, [r4, #8]
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <cleanup_stdio+0x38>)
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <cleanup_stdio+0x1e>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f002 fda3 	bl	8008d3c <_fflush_r>
 80061f6:	68e1      	ldr	r1, [r4, #12]
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <cleanup_stdio+0x3c>)
 80061fa:	4299      	cmp	r1, r3
 80061fc:	d004      	beq.n	8006208 <cleanup_stdio+0x30>
 80061fe:	4620      	mov	r0, r4
 8006200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006204:	f002 bd9a 	b.w	8008d3c <_fflush_r>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	20000478 	.word	0x20000478
 8006210:	200004e0 	.word	0x200004e0
 8006214:	20000548 	.word	0x20000548

08006218 <global_stdio_init.part.0>:
 8006218:	b510      	push	{r4, lr}
 800621a:	4b0b      	ldr	r3, [pc, #44]	@ (8006248 <global_stdio_init.part.0+0x30>)
 800621c:	4c0b      	ldr	r4, [pc, #44]	@ (800624c <global_stdio_init.part.0+0x34>)
 800621e:	4a0c      	ldr	r2, [pc, #48]	@ (8006250 <global_stdio_init.part.0+0x38>)
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	4620      	mov	r0, r4
 8006224:	2200      	movs	r2, #0
 8006226:	2104      	movs	r1, #4
 8006228:	f7ff ff94 	bl	8006154 <std>
 800622c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006230:	2201      	movs	r2, #1
 8006232:	2109      	movs	r1, #9
 8006234:	f7ff ff8e 	bl	8006154 <std>
 8006238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800623c:	2202      	movs	r2, #2
 800623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006242:	2112      	movs	r1, #18
 8006244:	f7ff bf86 	b.w	8006154 <std>
 8006248:	200005b0 	.word	0x200005b0
 800624c:	20000478 	.word	0x20000478
 8006250:	080061c1 	.word	0x080061c1

08006254 <__sfp_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	@ (800625c <__sfp_lock_acquire+0x8>)
 8006256:	f000 b920 	b.w	800649a <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	200005b9 	.word	0x200005b9

08006260 <__sfp_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	@ (8006268 <__sfp_lock_release+0x8>)
 8006262:	f000 b91b 	b.w	800649c <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	200005b9 	.word	0x200005b9

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sfp_lock_acquire>
 8006274:	6a23      	ldr	r3, [r4, #32]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sfp_lock_release>
 8006280:	4b04      	ldr	r3, [pc, #16]	@ (8006294 <__sinit+0x28>)
 8006282:	6223      	str	r3, [r4, #32]
 8006284:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <__sinit+0x2c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f5      	bne.n	8006278 <__sinit+0xc>
 800628c:	f7ff ffc4 	bl	8006218 <global_stdio_init.part.0>
 8006290:	e7f2      	b.n	8006278 <__sinit+0xc>
 8006292:	bf00      	nop
 8006294:	080061d9 	.word	0x080061d9
 8006298:	200005b0 	.word	0x200005b0

0800629c <_fwalk_sglue>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	4607      	mov	r7, r0
 80062a2:	4688      	mov	r8, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	2600      	movs	r6, #0
 80062a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062ac:	f1b9 0901 	subs.w	r9, r9, #1
 80062b0:	d505      	bpl.n	80062be <_fwalk_sglue+0x22>
 80062b2:	6824      	ldr	r4, [r4, #0]
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	d1f7      	bne.n	80062a8 <_fwalk_sglue+0xc>
 80062b8:	4630      	mov	r0, r6
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d907      	bls.n	80062d4 <_fwalk_sglue+0x38>
 80062c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d003      	beq.n	80062d4 <_fwalk_sglue+0x38>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c0      	blx	r8
 80062d2:	4306      	orrs	r6, r0
 80062d4:	3568      	adds	r5, #104	@ 0x68
 80062d6:	e7e9      	b.n	80062ac <_fwalk_sglue+0x10>

080062d8 <siprintf>:
 80062d8:	b40e      	push	{r1, r2, r3}
 80062da:	b500      	push	{lr}
 80062dc:	b09c      	sub	sp, #112	@ 0x70
 80062de:	ab1d      	add	r3, sp, #116	@ 0x74
 80062e0:	9002      	str	r0, [sp, #8]
 80062e2:	9006      	str	r0, [sp, #24]
 80062e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062e8:	4809      	ldr	r0, [pc, #36]	@ (8006310 <siprintf+0x38>)
 80062ea:	9107      	str	r1, [sp, #28]
 80062ec:	9104      	str	r1, [sp, #16]
 80062ee:	4909      	ldr	r1, [pc, #36]	@ (8006314 <siprintf+0x3c>)
 80062f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f4:	9105      	str	r1, [sp, #20]
 80062f6:	6800      	ldr	r0, [r0, #0]
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	a902      	add	r1, sp, #8
 80062fc:	f002 fba2 	bl	8008a44 <_svfiprintf_r>
 8006300:	9b02      	ldr	r3, [sp, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	b01c      	add	sp, #112	@ 0x70
 8006308:	f85d eb04 	ldr.w	lr, [sp], #4
 800630c:	b003      	add	sp, #12
 800630e:	4770      	bx	lr
 8006310:	2000000c 	.word	0x2000000c
 8006314:	ffff0208 	.word	0xffff0208

08006318 <__sread>:
 8006318:	b510      	push	{r4, lr}
 800631a:	460c      	mov	r4, r1
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	f000 f86c 	bl	80063fc <_read_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	bfab      	itete	ge
 8006328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800632a:	89a3      	ldrhlt	r3, [r4, #12]
 800632c:	181b      	addge	r3, r3, r0
 800632e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006332:	bfac      	ite	ge
 8006334:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006336:	81a3      	strhlt	r3, [r4, #12]
 8006338:	bd10      	pop	{r4, pc}

0800633a <__swrite>:
 800633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	461f      	mov	r7, r3
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	05db      	lsls	r3, r3, #23
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	4616      	mov	r6, r2
 800634a:	d505      	bpl.n	8006358 <__swrite+0x1e>
 800634c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006350:	2302      	movs	r3, #2
 8006352:	2200      	movs	r2, #0
 8006354:	f000 f840 	bl	80063d8 <_lseek_r>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800635e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	4628      	mov	r0, r5
 800636a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	f000 b857 	b.w	8006420 <_write_r>

08006372 <__sseek>:
 8006372:	b510      	push	{r4, lr}
 8006374:	460c      	mov	r4, r1
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 f82d 	bl	80063d8 <_lseek_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	bf15      	itete	ne
 8006384:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800638a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800638e:	81a3      	strheq	r3, [r4, #12]
 8006390:	bf18      	it	ne
 8006392:	81a3      	strhne	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__sclose>:
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 b80d 	b.w	80063b8 <_close_r>

0800639e <memset>:
 800639e:	4402      	add	r2, r0
 80063a0:	4603      	mov	r3, r0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d100      	bne.n	80063a8 <memset+0xa>
 80063a6:	4770      	bx	lr
 80063a8:	f803 1b01 	strb.w	r1, [r3], #1
 80063ac:	e7f9      	b.n	80063a2 <memset+0x4>
	...

080063b0 <_localeconv_r>:
 80063b0:	4800      	ldr	r0, [pc, #0]	@ (80063b4 <_localeconv_r+0x4>)
 80063b2:	4770      	bx	lr
 80063b4:	2000014c 	.word	0x2000014c

080063b8 <_close_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d06      	ldr	r5, [pc, #24]	@ (80063d4 <_close_r+0x1c>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	f7fb fddf 	bl	8001f86 <_close>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_close_r+0x1a>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_close_r+0x1a>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	200005b4 	.word	0x200005b4

080063d8 <_lseek_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d07      	ldr	r5, [pc, #28]	@ (80063f8 <_lseek_r+0x20>)
 80063dc:	4604      	mov	r4, r0
 80063de:	4608      	mov	r0, r1
 80063e0:	4611      	mov	r1, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	602a      	str	r2, [r5, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f7fb fdf1 	bl	8001fce <_lseek>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_lseek_r+0x1e>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_lseek_r+0x1e>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	200005b4 	.word	0x200005b4

080063fc <_read_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d07      	ldr	r5, [pc, #28]	@ (800641c <_read_r+0x20>)
 8006400:	4604      	mov	r4, r0
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	2200      	movs	r2, #0
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	f7fb fd82 	bl	8001f14 <_read>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_read_r+0x1e>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_read_r+0x1e>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	200005b4 	.word	0x200005b4

08006420 <_write_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d07      	ldr	r5, [pc, #28]	@ (8006440 <_write_r+0x20>)
 8006424:	4604      	mov	r4, r0
 8006426:	4608      	mov	r0, r1
 8006428:	4611      	mov	r1, r2
 800642a:	2200      	movs	r2, #0
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f7fb fd8d 	bl	8001f4e <_write>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_write_r+0x1e>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_write_r+0x1e>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200005b4 	.word	0x200005b4

08006444 <__errno>:
 8006444:	4b01      	ldr	r3, [pc, #4]	@ (800644c <__errno+0x8>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4d0d      	ldr	r5, [pc, #52]	@ (8006488 <__libc_init_array+0x38>)
 8006454:	4c0d      	ldr	r4, [pc, #52]	@ (800648c <__libc_init_array+0x3c>)
 8006456:	1b64      	subs	r4, r4, r5
 8006458:	10a4      	asrs	r4, r4, #2
 800645a:	2600      	movs	r6, #0
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	4d0b      	ldr	r5, [pc, #44]	@ (8006490 <__libc_init_array+0x40>)
 8006462:	4c0c      	ldr	r4, [pc, #48]	@ (8006494 <__libc_init_array+0x44>)
 8006464:	f003 fb56 	bl	8009b14 <_init>
 8006468:	1b64      	subs	r4, r4, r5
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	2600      	movs	r6, #0
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f855 3b04 	ldr.w	r3, [r5], #4
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	08009fb8 	.word	0x08009fb8
 800648c:	08009fb8 	.word	0x08009fb8
 8006490:	08009fb8 	.word	0x08009fb8
 8006494:	08009fbc 	.word	0x08009fbc

08006498 <__retarget_lock_init_recursive>:
 8006498:	4770      	bx	lr

0800649a <__retarget_lock_acquire_recursive>:
 800649a:	4770      	bx	lr

0800649c <__retarget_lock_release_recursive>:
 800649c:	4770      	bx	lr
	...

080064a0 <nanf>:
 80064a0:	4800      	ldr	r0, [pc, #0]	@ (80064a4 <nanf+0x4>)
 80064a2:	4770      	bx	lr
 80064a4:	7fc00000 	.word	0x7fc00000

080064a8 <quorem>:
 80064a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	6903      	ldr	r3, [r0, #16]
 80064ae:	690c      	ldr	r4, [r1, #16]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	4607      	mov	r7, r0
 80064b4:	db7e      	blt.n	80065b4 <quorem+0x10c>
 80064b6:	3c01      	subs	r4, #1
 80064b8:	f101 0814 	add.w	r8, r1, #20
 80064bc:	00a3      	lsls	r3, r4, #2
 80064be:	f100 0514 	add.w	r5, r0, #20
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d2:	3301      	adds	r3, #1
 80064d4:	429a      	cmp	r2, r3
 80064d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064da:	fbb2 f6f3 	udiv	r6, r2, r3
 80064de:	d32e      	bcc.n	800653e <quorem+0x96>
 80064e0:	f04f 0a00 	mov.w	sl, #0
 80064e4:	46c4      	mov	ip, r8
 80064e6:	46ae      	mov	lr, r5
 80064e8:	46d3      	mov	fp, sl
 80064ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064ee:	b298      	uxth	r0, r3
 80064f0:	fb06 a000 	mla	r0, r6, r0, sl
 80064f4:	0c02      	lsrs	r2, r0, #16
 80064f6:	0c1b      	lsrs	r3, r3, #16
 80064f8:	fb06 2303 	mla	r3, r6, r3, r2
 80064fc:	f8de 2000 	ldr.w	r2, [lr]
 8006500:	b280      	uxth	r0, r0
 8006502:	b292      	uxth	r2, r2
 8006504:	1a12      	subs	r2, r2, r0
 8006506:	445a      	add	r2, fp
 8006508:	f8de 0000 	ldr.w	r0, [lr]
 800650c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006510:	b29b      	uxth	r3, r3
 8006512:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006516:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800651a:	b292      	uxth	r2, r2
 800651c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006520:	45e1      	cmp	r9, ip
 8006522:	f84e 2b04 	str.w	r2, [lr], #4
 8006526:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800652a:	d2de      	bcs.n	80064ea <quorem+0x42>
 800652c:	9b00      	ldr	r3, [sp, #0]
 800652e:	58eb      	ldr	r3, [r5, r3]
 8006530:	b92b      	cbnz	r3, 800653e <quorem+0x96>
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	3b04      	subs	r3, #4
 8006536:	429d      	cmp	r5, r3
 8006538:	461a      	mov	r2, r3
 800653a:	d32f      	bcc.n	800659c <quorem+0xf4>
 800653c:	613c      	str	r4, [r7, #16]
 800653e:	4638      	mov	r0, r7
 8006540:	f001 f9c6 	bl	80078d0 <__mcmp>
 8006544:	2800      	cmp	r0, #0
 8006546:	db25      	blt.n	8006594 <quorem+0xec>
 8006548:	4629      	mov	r1, r5
 800654a:	2000      	movs	r0, #0
 800654c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006550:	f8d1 c000 	ldr.w	ip, [r1]
 8006554:	fa1f fe82 	uxth.w	lr, r2
 8006558:	fa1f f38c 	uxth.w	r3, ip
 800655c:	eba3 030e 	sub.w	r3, r3, lr
 8006560:	4403      	add	r3, r0
 8006562:	0c12      	lsrs	r2, r2, #16
 8006564:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006568:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006572:	45c1      	cmp	r9, r8
 8006574:	f841 3b04 	str.w	r3, [r1], #4
 8006578:	ea4f 4022 	mov.w	r0, r2, asr #16
 800657c:	d2e6      	bcs.n	800654c <quorem+0xa4>
 800657e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006586:	b922      	cbnz	r2, 8006592 <quorem+0xea>
 8006588:	3b04      	subs	r3, #4
 800658a:	429d      	cmp	r5, r3
 800658c:	461a      	mov	r2, r3
 800658e:	d30b      	bcc.n	80065a8 <quorem+0x100>
 8006590:	613c      	str	r4, [r7, #16]
 8006592:	3601      	adds	r6, #1
 8006594:	4630      	mov	r0, r6
 8006596:	b003      	add	sp, #12
 8006598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	3b04      	subs	r3, #4
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	d1cb      	bne.n	800653c <quorem+0x94>
 80065a4:	3c01      	subs	r4, #1
 80065a6:	e7c6      	b.n	8006536 <quorem+0x8e>
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	3b04      	subs	r3, #4
 80065ac:	2a00      	cmp	r2, #0
 80065ae:	d1ef      	bne.n	8006590 <quorem+0xe8>
 80065b0:	3c01      	subs	r4, #1
 80065b2:	e7ea      	b.n	800658a <quorem+0xe2>
 80065b4:	2000      	movs	r0, #0
 80065b6:	e7ee      	b.n	8006596 <quorem+0xee>

080065b8 <_dtoa_r>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	69c7      	ldr	r7, [r0, #28]
 80065be:	b097      	sub	sp, #92	@ 0x5c
 80065c0:	4614      	mov	r4, r2
 80065c2:	461d      	mov	r5, r3
 80065c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065c8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80065ca:	4683      	mov	fp, r0
 80065cc:	b97f      	cbnz	r7, 80065ee <_dtoa_r+0x36>
 80065ce:	2010      	movs	r0, #16
 80065d0:	f000 fe04 	bl	80071dc <malloc>
 80065d4:	4602      	mov	r2, r0
 80065d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80065da:	b920      	cbnz	r0, 80065e6 <_dtoa_r+0x2e>
 80065dc:	4ba8      	ldr	r3, [pc, #672]	@ (8006880 <_dtoa_r+0x2c8>)
 80065de:	21ef      	movs	r1, #239	@ 0xef
 80065e0:	48a8      	ldr	r0, [pc, #672]	@ (8006884 <_dtoa_r+0x2cc>)
 80065e2:	f002 fc23 	bl	8008e2c <__assert_func>
 80065e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065ea:	6007      	str	r7, [r0, #0]
 80065ec:	60c7      	str	r7, [r0, #12]
 80065ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	b159      	cbz	r1, 800660e <_dtoa_r+0x56>
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	604a      	str	r2, [r1, #4]
 80065fa:	2301      	movs	r3, #1
 80065fc:	4093      	lsls	r3, r2
 80065fe:	608b      	str	r3, [r1, #8]
 8006600:	4658      	mov	r0, fp
 8006602:	f000 fee1 	bl	80073c8 <_Bfree>
 8006606:	f8db 301c 	ldr.w	r3, [fp, #28]
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	1e2b      	subs	r3, r5, #0
 8006610:	bfb9      	ittee	lt
 8006612:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006616:	9303      	strlt	r3, [sp, #12]
 8006618:	2300      	movge	r3, #0
 800661a:	6033      	strge	r3, [r6, #0]
 800661c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006620:	4b99      	ldr	r3, [pc, #612]	@ (8006888 <_dtoa_r+0x2d0>)
 8006622:	bfbc      	itt	lt
 8006624:	2201      	movlt	r2, #1
 8006626:	6032      	strlt	r2, [r6, #0]
 8006628:	ea33 0308 	bics.w	r3, r3, r8
 800662c:	d112      	bne.n	8006654 <_dtoa_r+0x9c>
 800662e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006630:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800663a:	4323      	orrs	r3, r4
 800663c:	f000 8551 	beq.w	80070e2 <_dtoa_r+0xb2a>
 8006640:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006642:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800688c <_dtoa_r+0x2d4>
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8553 	beq.w	80070f2 <_dtoa_r+0xb3a>
 800664c:	f10a 0303 	add.w	r3, sl, #3
 8006650:	f000 bd4d 	b.w	80070ee <_dtoa_r+0xb36>
 8006654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006658:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800665c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006660:	2200      	movs	r2, #0
 8006662:	2300      	movs	r3, #0
 8006664:	f7fa fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8006668:	4607      	mov	r7, r0
 800666a:	b158      	cbz	r0, 8006684 <_dtoa_r+0xcc>
 800666c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800666e:	2301      	movs	r3, #1
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006674:	b113      	cbz	r3, 800667c <_dtoa_r+0xc4>
 8006676:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006678:	4b85      	ldr	r3, [pc, #532]	@ (8006890 <_dtoa_r+0x2d8>)
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006894 <_dtoa_r+0x2dc>
 8006680:	f000 bd37 	b.w	80070f2 <_dtoa_r+0xb3a>
 8006684:	ab14      	add	r3, sp, #80	@ 0x50
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	ab15      	add	r3, sp, #84	@ 0x54
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	4658      	mov	r0, fp
 800668e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006692:	f001 fa35 	bl	8007b00 <__d2b>
 8006696:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800669a:	4681      	mov	r9, r0
 800669c:	2e00      	cmp	r6, #0
 800669e:	d076      	beq.n	800678e <_dtoa_r+0x1d6>
 80066a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066a2:	9712      	str	r7, [sp, #72]	@ 0x48
 80066a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80066b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80066b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066b8:	4619      	mov	r1, r3
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b76      	ldr	r3, [pc, #472]	@ (8006898 <_dtoa_r+0x2e0>)
 80066be:	f7f9 fdeb 	bl	8000298 <__aeabi_dsub>
 80066c2:	a369      	add	r3, pc, #420	@ (adr r3, 8006868 <_dtoa_r+0x2b0>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff9e 	bl	8000608 <__aeabi_dmul>
 80066cc:	a368      	add	r3, pc, #416	@ (adr r3, 8006870 <_dtoa_r+0x2b8>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f7f9 fde3 	bl	800029c <__adddf3>
 80066d6:	4604      	mov	r4, r0
 80066d8:	4630      	mov	r0, r6
 80066da:	460d      	mov	r5, r1
 80066dc:	f7f9 ff2a 	bl	8000534 <__aeabi_i2d>
 80066e0:	a365      	add	r3, pc, #404	@ (adr r3, 8006878 <_dtoa_r+0x2c0>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f7f9 ff8f 	bl	8000608 <__aeabi_dmul>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7f9 fdd3 	bl	800029c <__adddf3>
 80066f6:	4604      	mov	r4, r0
 80066f8:	460d      	mov	r5, r1
 80066fa:	f7fa fa35 	bl	8000b68 <__aeabi_d2iz>
 80066fe:	2200      	movs	r2, #0
 8006700:	4607      	mov	r7, r0
 8006702:	2300      	movs	r3, #0
 8006704:	4620      	mov	r0, r4
 8006706:	4629      	mov	r1, r5
 8006708:	f7fa f9f0 	bl	8000aec <__aeabi_dcmplt>
 800670c:	b140      	cbz	r0, 8006720 <_dtoa_r+0x168>
 800670e:	4638      	mov	r0, r7
 8006710:	f7f9 ff10 	bl	8000534 <__aeabi_i2d>
 8006714:	4622      	mov	r2, r4
 8006716:	462b      	mov	r3, r5
 8006718:	f7fa f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 800671c:	b900      	cbnz	r0, 8006720 <_dtoa_r+0x168>
 800671e:	3f01      	subs	r7, #1
 8006720:	2f16      	cmp	r7, #22
 8006722:	d852      	bhi.n	80067ca <_dtoa_r+0x212>
 8006724:	4b5d      	ldr	r3, [pc, #372]	@ (800689c <_dtoa_r+0x2e4>)
 8006726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006732:	f7fa f9db 	bl	8000aec <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	d049      	beq.n	80067ce <_dtoa_r+0x216>
 800673a:	3f01      	subs	r7, #1
 800673c:	2300      	movs	r3, #0
 800673e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006740:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006742:	1b9b      	subs	r3, r3, r6
 8006744:	1e5a      	subs	r2, r3, #1
 8006746:	bf44      	itt	mi
 8006748:	f1c3 0801 	rsbmi	r8, r3, #1
 800674c:	2300      	movmi	r3, #0
 800674e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006750:	bf54      	ite	pl
 8006752:	f04f 0800 	movpl.w	r8, #0
 8006756:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006758:	2f00      	cmp	r7, #0
 800675a:	db3a      	blt.n	80067d2 <_dtoa_r+0x21a>
 800675c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675e:	970e      	str	r7, [sp, #56]	@ 0x38
 8006760:	443b      	add	r3, r7
 8006762:	9309      	str	r3, [sp, #36]	@ 0x24
 8006764:	2300      	movs	r3, #0
 8006766:	930a      	str	r3, [sp, #40]	@ 0x28
 8006768:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800676a:	2b09      	cmp	r3, #9
 800676c:	d865      	bhi.n	800683a <_dtoa_r+0x282>
 800676e:	2b05      	cmp	r3, #5
 8006770:	bfc4      	itt	gt
 8006772:	3b04      	subgt	r3, #4
 8006774:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006776:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006778:	f1a3 0302 	sub.w	r3, r3, #2
 800677c:	bfcc      	ite	gt
 800677e:	2400      	movgt	r4, #0
 8006780:	2401      	movle	r4, #1
 8006782:	2b03      	cmp	r3, #3
 8006784:	d864      	bhi.n	8006850 <_dtoa_r+0x298>
 8006786:	e8df f003 	tbb	[pc, r3]
 800678a:	382b      	.short	0x382b
 800678c:	5636      	.short	0x5636
 800678e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006792:	441e      	add	r6, r3
 8006794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006798:	2b20      	cmp	r3, #32
 800679a:	bfc1      	itttt	gt
 800679c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067a0:	fa08 f803 	lslgt.w	r8, r8, r3
 80067a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80067ac:	bfd6      	itet	le
 80067ae:	f1c3 0320 	rsble	r3, r3, #32
 80067b2:	ea48 0003 	orrgt.w	r0, r8, r3
 80067b6:	fa04 f003 	lslle.w	r0, r4, r3
 80067ba:	f7f9 feab 	bl	8000514 <__aeabi_ui2d>
 80067be:	2201      	movs	r2, #1
 80067c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80067c4:	3e01      	subs	r6, #1
 80067c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80067c8:	e776      	b.n	80066b8 <_dtoa_r+0x100>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e7b7      	b.n	800673e <_dtoa_r+0x186>
 80067ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80067d0:	e7b6      	b.n	8006740 <_dtoa_r+0x188>
 80067d2:	427b      	negs	r3, r7
 80067d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80067d6:	2300      	movs	r3, #0
 80067d8:	eba8 0807 	sub.w	r8, r8, r7
 80067dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80067de:	e7c3      	b.n	8006768 <_dtoa_r+0x1b0>
 80067e0:	2300      	movs	r3, #0
 80067e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dc35      	bgt.n	8006856 <_dtoa_r+0x29e>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80067f0:	461a      	mov	r2, r3
 80067f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80067f4:	e00b      	b.n	800680e <_dtoa_r+0x256>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e7f3      	b.n	80067e2 <_dtoa_r+0x22a>
 80067fa:	2300      	movs	r3, #0
 80067fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	9308      	str	r3, [sp, #32]
 8006804:	3301      	adds	r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	9307      	str	r3, [sp, #28]
 800680a:	bfb8      	it	lt
 800680c:	2301      	movlt	r3, #1
 800680e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006812:	2100      	movs	r1, #0
 8006814:	2204      	movs	r2, #4
 8006816:	f102 0514 	add.w	r5, r2, #20
 800681a:	429d      	cmp	r5, r3
 800681c:	d91f      	bls.n	800685e <_dtoa_r+0x2a6>
 800681e:	6041      	str	r1, [r0, #4]
 8006820:	4658      	mov	r0, fp
 8006822:	f000 fd91 	bl	8007348 <_Balloc>
 8006826:	4682      	mov	sl, r0
 8006828:	2800      	cmp	r0, #0
 800682a:	d13b      	bne.n	80068a4 <_dtoa_r+0x2ec>
 800682c:	4b1c      	ldr	r3, [pc, #112]	@ (80068a0 <_dtoa_r+0x2e8>)
 800682e:	4602      	mov	r2, r0
 8006830:	f240 11af 	movw	r1, #431	@ 0x1af
 8006834:	e6d4      	b.n	80065e0 <_dtoa_r+0x28>
 8006836:	2301      	movs	r3, #1
 8006838:	e7e0      	b.n	80067fc <_dtoa_r+0x244>
 800683a:	2401      	movs	r4, #1
 800683c:	2300      	movs	r3, #0
 800683e:	9320      	str	r3, [sp, #128]	@ 0x80
 8006840:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006846:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800684a:	2200      	movs	r2, #0
 800684c:	2312      	movs	r3, #18
 800684e:	e7d0      	b.n	80067f2 <_dtoa_r+0x23a>
 8006850:	2301      	movs	r3, #1
 8006852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006854:	e7f5      	b.n	8006842 <_dtoa_r+0x28a>
 8006856:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006858:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800685c:	e7d7      	b.n	800680e <_dtoa_r+0x256>
 800685e:	3101      	adds	r1, #1
 8006860:	0052      	lsls	r2, r2, #1
 8006862:	e7d8      	b.n	8006816 <_dtoa_r+0x25e>
 8006864:	f3af 8000 	nop.w
 8006868:	636f4361 	.word	0x636f4361
 800686c:	3fd287a7 	.word	0x3fd287a7
 8006870:	8b60c8b3 	.word	0x8b60c8b3
 8006874:	3fc68a28 	.word	0x3fc68a28
 8006878:	509f79fb 	.word	0x509f79fb
 800687c:	3fd34413 	.word	0x3fd34413
 8006880:	08009bc5 	.word	0x08009bc5
 8006884:	08009bdc 	.word	0x08009bdc
 8006888:	7ff00000 	.word	0x7ff00000
 800688c:	08009bc1 	.word	0x08009bc1
 8006890:	08009b90 	.word	0x08009b90
 8006894:	08009b8f 	.word	0x08009b8f
 8006898:	3ff80000 	.word	0x3ff80000
 800689c:	08009cd8 	.word	0x08009cd8
 80068a0:	08009c34 	.word	0x08009c34
 80068a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068a8:	6018      	str	r0, [r3, #0]
 80068aa:	9b07      	ldr	r3, [sp, #28]
 80068ac:	2b0e      	cmp	r3, #14
 80068ae:	f200 80a4 	bhi.w	80069fa <_dtoa_r+0x442>
 80068b2:	2c00      	cmp	r4, #0
 80068b4:	f000 80a1 	beq.w	80069fa <_dtoa_r+0x442>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	dd33      	ble.n	8006924 <_dtoa_r+0x36c>
 80068bc:	4b86      	ldr	r3, [pc, #536]	@ (8006ad8 <_dtoa_r+0x520>)
 80068be:	f007 020f 	and.w	r2, r7, #15
 80068c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068ca:	05f8      	lsls	r0, r7, #23
 80068cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80068d4:	d516      	bpl.n	8006904 <_dtoa_r+0x34c>
 80068d6:	4b81      	ldr	r3, [pc, #516]	@ (8006adc <_dtoa_r+0x524>)
 80068d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068e0:	f7f9 ffbc 	bl	800085c <__aeabi_ddiv>
 80068e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e8:	f004 040f 	and.w	r4, r4, #15
 80068ec:	2603      	movs	r6, #3
 80068ee:	4d7b      	ldr	r5, [pc, #492]	@ (8006adc <_dtoa_r+0x524>)
 80068f0:	b954      	cbnz	r4, 8006908 <_dtoa_r+0x350>
 80068f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068fa:	f7f9 ffaf 	bl	800085c <__aeabi_ddiv>
 80068fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006902:	e028      	b.n	8006956 <_dtoa_r+0x39e>
 8006904:	2602      	movs	r6, #2
 8006906:	e7f2      	b.n	80068ee <_dtoa_r+0x336>
 8006908:	07e1      	lsls	r1, r4, #31
 800690a:	d508      	bpl.n	800691e <_dtoa_r+0x366>
 800690c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006910:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006914:	f7f9 fe78 	bl	8000608 <__aeabi_dmul>
 8006918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691c:	3601      	adds	r6, #1
 800691e:	1064      	asrs	r4, r4, #1
 8006920:	3508      	adds	r5, #8
 8006922:	e7e5      	b.n	80068f0 <_dtoa_r+0x338>
 8006924:	f000 80d2 	beq.w	8006acc <_dtoa_r+0x514>
 8006928:	427c      	negs	r4, r7
 800692a:	4b6b      	ldr	r3, [pc, #428]	@ (8006ad8 <_dtoa_r+0x520>)
 800692c:	4d6b      	ldr	r5, [pc, #428]	@ (8006adc <_dtoa_r+0x524>)
 800692e:	f004 020f 	and.w	r2, r4, #15
 8006932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800693e:	f7f9 fe63 	bl	8000608 <__aeabi_dmul>
 8006942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006946:	1124      	asrs	r4, r4, #4
 8006948:	2300      	movs	r3, #0
 800694a:	2602      	movs	r6, #2
 800694c:	2c00      	cmp	r4, #0
 800694e:	f040 80b2 	bne.w	8006ab6 <_dtoa_r+0x4fe>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d3      	bne.n	80068fe <_dtoa_r+0x346>
 8006956:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80b7 	beq.w	8006ad0 <_dtoa_r+0x518>
 8006962:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae0 <_dtoa_r+0x528>)
 8006964:	2200      	movs	r2, #0
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7fa f8bf 	bl	8000aec <__aeabi_dcmplt>
 800696e:	2800      	cmp	r0, #0
 8006970:	f000 80ae 	beq.w	8006ad0 <_dtoa_r+0x518>
 8006974:	9b07      	ldr	r3, [sp, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80aa 	beq.w	8006ad0 <_dtoa_r+0x518>
 800697c:	9b08      	ldr	r3, [sp, #32]
 800697e:	2b00      	cmp	r3, #0
 8006980:	dd37      	ble.n	80069f2 <_dtoa_r+0x43a>
 8006982:	1e7b      	subs	r3, r7, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	4620      	mov	r0, r4
 8006988:	4b56      	ldr	r3, [pc, #344]	@ (8006ae4 <_dtoa_r+0x52c>)
 800698a:	2200      	movs	r2, #0
 800698c:	4629      	mov	r1, r5
 800698e:	f7f9 fe3b 	bl	8000608 <__aeabi_dmul>
 8006992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006996:	9c08      	ldr	r4, [sp, #32]
 8006998:	3601      	adds	r6, #1
 800699a:	4630      	mov	r0, r6
 800699c:	f7f9 fdca 	bl	8000534 <__aeabi_i2d>
 80069a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a4:	f7f9 fe30 	bl	8000608 <__aeabi_dmul>
 80069a8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ae8 <_dtoa_r+0x530>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	f7f9 fc76 	bl	800029c <__adddf3>
 80069b0:	4605      	mov	r5, r0
 80069b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	f040 809a 	bne.w	8006af0 <_dtoa_r+0x538>
 80069bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c0:	4b4a      	ldr	r3, [pc, #296]	@ (8006aec <_dtoa_r+0x534>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7f9 fc68 	bl	8000298 <__aeabi_dsub>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069d0:	462a      	mov	r2, r5
 80069d2:	4633      	mov	r3, r6
 80069d4:	f7fa f8a8 	bl	8000b28 <__aeabi_dcmpgt>
 80069d8:	2800      	cmp	r0, #0
 80069da:	f040 828e 	bne.w	8006efa <_dtoa_r+0x942>
 80069de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e2:	462a      	mov	r2, r5
 80069e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069e8:	f7fa f880 	bl	8000aec <__aeabi_dcmplt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 8127 	bne.w	8006c40 <_dtoa_r+0x688>
 80069f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80069f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80069fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f2c0 8163 	blt.w	8006cc8 <_dtoa_r+0x710>
 8006a02:	2f0e      	cmp	r7, #14
 8006a04:	f300 8160 	bgt.w	8006cc8 <_dtoa_r+0x710>
 8006a08:	4b33      	ldr	r3, [pc, #204]	@ (8006ad8 <_dtoa_r+0x520>)
 8006a0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da03      	bge.n	8006a24 <_dtoa_r+0x46c>
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f340 8100 	ble.w	8006c24 <_dtoa_r+0x66c>
 8006a24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a28:	4656      	mov	r6, sl
 8006a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7f9 ff13 	bl	800085c <__aeabi_ddiv>
 8006a36:	f7fa f897 	bl	8000b68 <__aeabi_d2iz>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	f7f9 fd7a 	bl	8000534 <__aeabi_i2d>
 8006a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a44:	f7f9 fde0 	bl	8000608 <__aeabi_dmul>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006a54:	f7f9 fc20 	bl	8000298 <__aeabi_dsub>
 8006a58:	f806 4b01 	strb.w	r4, [r6], #1
 8006a5c:	9d07      	ldr	r5, [sp, #28]
 8006a5e:	eba6 040a 	sub.w	r4, r6, sl
 8006a62:	42a5      	cmp	r5, r4
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	f040 8116 	bne.w	8006c98 <_dtoa_r+0x6e0>
 8006a6c:	f7f9 fc16 	bl	800029c <__adddf3>
 8006a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a74:	4604      	mov	r4, r0
 8006a76:	460d      	mov	r5, r1
 8006a78:	f7fa f856 	bl	8000b28 <__aeabi_dcmpgt>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f040 80f8 	bne.w	8006c72 <_dtoa_r+0x6ba>
 8006a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a86:	4620      	mov	r0, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7fa f825 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a8e:	b118      	cbz	r0, 8006a98 <_dtoa_r+0x4e0>
 8006a90:	f018 0f01 	tst.w	r8, #1
 8006a94:	f040 80ed 	bne.w	8006c72 <_dtoa_r+0x6ba>
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4658      	mov	r0, fp
 8006a9c:	f000 fc94 	bl	80073c8 <_Bfree>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	7033      	strb	r3, [r6, #0]
 8006aa4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006aa6:	3701      	adds	r7, #1
 8006aa8:	601f      	str	r7, [r3, #0]
 8006aaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8320 	beq.w	80070f2 <_dtoa_r+0xb3a>
 8006ab2:	601e      	str	r6, [r3, #0]
 8006ab4:	e31d      	b.n	80070f2 <_dtoa_r+0xb3a>
 8006ab6:	07e2      	lsls	r2, r4, #31
 8006ab8:	d505      	bpl.n	8006ac6 <_dtoa_r+0x50e>
 8006aba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006abe:	f7f9 fda3 	bl	8000608 <__aeabi_dmul>
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	1064      	asrs	r4, r4, #1
 8006ac8:	3508      	adds	r5, #8
 8006aca:	e73f      	b.n	800694c <_dtoa_r+0x394>
 8006acc:	2602      	movs	r6, #2
 8006ace:	e742      	b.n	8006956 <_dtoa_r+0x39e>
 8006ad0:	9c07      	ldr	r4, [sp, #28]
 8006ad2:	9704      	str	r7, [sp, #16]
 8006ad4:	e761      	b.n	800699a <_dtoa_r+0x3e2>
 8006ad6:	bf00      	nop
 8006ad8:	08009cd8 	.word	0x08009cd8
 8006adc:	08009cb0 	.word	0x08009cb0
 8006ae0:	3ff00000 	.word	0x3ff00000
 8006ae4:	40240000 	.word	0x40240000
 8006ae8:	401c0000 	.word	0x401c0000
 8006aec:	40140000 	.word	0x40140000
 8006af0:	4b70      	ldr	r3, [pc, #448]	@ (8006cb4 <_dtoa_r+0x6fc>)
 8006af2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006af4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006afc:	4454      	add	r4, sl
 8006afe:	2900      	cmp	r1, #0
 8006b00:	d045      	beq.n	8006b8e <_dtoa_r+0x5d6>
 8006b02:	496d      	ldr	r1, [pc, #436]	@ (8006cb8 <_dtoa_r+0x700>)
 8006b04:	2000      	movs	r0, #0
 8006b06:	f7f9 fea9 	bl	800085c <__aeabi_ddiv>
 8006b0a:	4633      	mov	r3, r6
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	f7f9 fbc3 	bl	8000298 <__aeabi_dsub>
 8006b12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b16:	4656      	mov	r6, sl
 8006b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1c:	f7fa f824 	bl	8000b68 <__aeabi_d2iz>
 8006b20:	4605      	mov	r5, r0
 8006b22:	f7f9 fd07 	bl	8000534 <__aeabi_i2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2e:	f7f9 fbb3 	bl	8000298 <__aeabi_dsub>
 8006b32:	3530      	adds	r5, #48	@ 0x30
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b44:	f7f9 ffd2 	bl	8000aec <__aeabi_dcmplt>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d163      	bne.n	8006c14 <_dtoa_r+0x65c>
 8006b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b50:	495a      	ldr	r1, [pc, #360]	@ (8006cbc <_dtoa_r+0x704>)
 8006b52:	2000      	movs	r0, #0
 8006b54:	f7f9 fba0 	bl	8000298 <__aeabi_dsub>
 8006b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b5c:	f7f9 ffc6 	bl	8000aec <__aeabi_dcmplt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f040 8087 	bne.w	8006c74 <_dtoa_r+0x6bc>
 8006b66:	42a6      	cmp	r6, r4
 8006b68:	f43f af43 	beq.w	80069f2 <_dtoa_r+0x43a>
 8006b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b70:	4b53      	ldr	r3, [pc, #332]	@ (8006cc0 <_dtoa_r+0x708>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fd48 	bl	8000608 <__aeabi_dmul>
 8006b78:	4b51      	ldr	r3, [pc, #324]	@ (8006cc0 <_dtoa_r+0x708>)
 8006b7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b7e:	2200      	movs	r2, #0
 8006b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b84:	f7f9 fd40 	bl	8000608 <__aeabi_dmul>
 8006b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b8c:	e7c4      	b.n	8006b18 <_dtoa_r+0x560>
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	f7f9 fd39 	bl	8000608 <__aeabi_dmul>
 8006b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b9a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b9c:	4656      	mov	r6, sl
 8006b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba2:	f7f9 ffe1 	bl	8000b68 <__aeabi_d2iz>
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	f7f9 fcc4 	bl	8000534 <__aeabi_i2d>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb4:	f7f9 fb70 	bl	8000298 <__aeabi_dsub>
 8006bb8:	3530      	adds	r5, #48	@ 0x30
 8006bba:	f806 5b01 	strb.w	r5, [r6], #1
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	42a6      	cmp	r6, r4
 8006bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	d124      	bne.n	8006c18 <_dtoa_r+0x660>
 8006bce:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb8 <_dtoa_r+0x700>)
 8006bd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006bd4:	f7f9 fb62 	bl	800029c <__adddf3>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006be0:	f7f9 ffa2 	bl	8000b28 <__aeabi_dcmpgt>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d145      	bne.n	8006c74 <_dtoa_r+0x6bc>
 8006be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bec:	4932      	ldr	r1, [pc, #200]	@ (8006cb8 <_dtoa_r+0x700>)
 8006bee:	2000      	movs	r0, #0
 8006bf0:	f7f9 fb52 	bl	8000298 <__aeabi_dsub>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bfc:	f7f9 ff76 	bl	8000aec <__aeabi_dcmplt>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	f43f aef6 	beq.w	80069f2 <_dtoa_r+0x43a>
 8006c06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c08:	1e73      	subs	r3, r6, #1
 8006c0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c10:	2b30      	cmp	r3, #48	@ 0x30
 8006c12:	d0f8      	beq.n	8006c06 <_dtoa_r+0x64e>
 8006c14:	9f04      	ldr	r7, [sp, #16]
 8006c16:	e73f      	b.n	8006a98 <_dtoa_r+0x4e0>
 8006c18:	4b29      	ldr	r3, [pc, #164]	@ (8006cc0 <_dtoa_r+0x708>)
 8006c1a:	f7f9 fcf5 	bl	8000608 <__aeabi_dmul>
 8006c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c22:	e7bc      	b.n	8006b9e <_dtoa_r+0x5e6>
 8006c24:	d10c      	bne.n	8006c40 <_dtoa_r+0x688>
 8006c26:	4b27      	ldr	r3, [pc, #156]	@ (8006cc4 <_dtoa_r+0x70c>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c2e:	f7f9 fceb 	bl	8000608 <__aeabi_dmul>
 8006c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c36:	f7f9 ff6d 	bl	8000b14 <__aeabi_dcmpge>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f000 815b 	beq.w	8006ef6 <_dtoa_r+0x93e>
 8006c40:	2400      	movs	r4, #0
 8006c42:	4625      	mov	r5, r4
 8006c44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c46:	43db      	mvns	r3, r3
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	4656      	mov	r6, sl
 8006c4c:	2700      	movs	r7, #0
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4658      	mov	r0, fp
 8006c52:	f000 fbb9 	bl	80073c8 <_Bfree>
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	d0dc      	beq.n	8006c14 <_dtoa_r+0x65c>
 8006c5a:	b12f      	cbz	r7, 8006c68 <_dtoa_r+0x6b0>
 8006c5c:	42af      	cmp	r7, r5
 8006c5e:	d003      	beq.n	8006c68 <_dtoa_r+0x6b0>
 8006c60:	4639      	mov	r1, r7
 8006c62:	4658      	mov	r0, fp
 8006c64:	f000 fbb0 	bl	80073c8 <_Bfree>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4658      	mov	r0, fp
 8006c6c:	f000 fbac 	bl	80073c8 <_Bfree>
 8006c70:	e7d0      	b.n	8006c14 <_dtoa_r+0x65c>
 8006c72:	9704      	str	r7, [sp, #16]
 8006c74:	4633      	mov	r3, r6
 8006c76:	461e      	mov	r6, r3
 8006c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7c:	2a39      	cmp	r2, #57	@ 0x39
 8006c7e:	d107      	bne.n	8006c90 <_dtoa_r+0x6d8>
 8006c80:	459a      	cmp	sl, r3
 8006c82:	d1f8      	bne.n	8006c76 <_dtoa_r+0x6be>
 8006c84:	9a04      	ldr	r2, [sp, #16]
 8006c86:	3201      	adds	r2, #1
 8006c88:	9204      	str	r2, [sp, #16]
 8006c8a:	2230      	movs	r2, #48	@ 0x30
 8006c8c:	f88a 2000 	strb.w	r2, [sl]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	3201      	adds	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e7bd      	b.n	8006c14 <_dtoa_r+0x65c>
 8006c98:	4b09      	ldr	r3, [pc, #36]	@ (8006cc0 <_dtoa_r+0x708>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7f9 fcb4 	bl	8000608 <__aeabi_dmul>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	f7f9 ff16 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f43f aebc 	beq.w	8006a2a <_dtoa_r+0x472>
 8006cb2:	e6f1      	b.n	8006a98 <_dtoa_r+0x4e0>
 8006cb4:	08009cd8 	.word	0x08009cd8
 8006cb8:	3fe00000 	.word	0x3fe00000
 8006cbc:	3ff00000 	.word	0x3ff00000
 8006cc0:	40240000 	.word	0x40240000
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f000 80db 	beq.w	8006e86 <_dtoa_r+0x8ce>
 8006cd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cd2:	2a01      	cmp	r2, #1
 8006cd4:	f300 80bf 	bgt.w	8006e56 <_dtoa_r+0x89e>
 8006cd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	f000 80b7 	beq.w	8006e4e <_dtoa_r+0x896>
 8006ce0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ce4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ce6:	4646      	mov	r6, r8
 8006ce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cea:	2101      	movs	r1, #1
 8006cec:	441a      	add	r2, r3
 8006cee:	4658      	mov	r0, fp
 8006cf0:	4498      	add	r8, r3
 8006cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cf4:	f000 fc66 	bl	80075c4 <__i2b>
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	b15e      	cbz	r6, 8006d14 <_dtoa_r+0x75c>
 8006cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	dd08      	ble.n	8006d14 <_dtoa_r+0x75c>
 8006d02:	42b3      	cmp	r3, r6
 8006d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d06:	bfa8      	it	ge
 8006d08:	4633      	movge	r3, r6
 8006d0a:	eba8 0803 	sub.w	r8, r8, r3
 8006d0e:	1af6      	subs	r6, r6, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d16:	b1f3      	cbz	r3, 8006d56 <_dtoa_r+0x79e>
 8006d18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80b7 	beq.w	8006e8e <_dtoa_r+0x8d6>
 8006d20:	b18c      	cbz	r4, 8006d46 <_dtoa_r+0x78e>
 8006d22:	4629      	mov	r1, r5
 8006d24:	4622      	mov	r2, r4
 8006d26:	4658      	mov	r0, fp
 8006d28:	f000 fd0c 	bl	8007744 <__pow5mult>
 8006d2c:	464a      	mov	r2, r9
 8006d2e:	4601      	mov	r1, r0
 8006d30:	4605      	mov	r5, r0
 8006d32:	4658      	mov	r0, fp
 8006d34:	f000 fc5c 	bl	80075f0 <__multiply>
 8006d38:	4649      	mov	r1, r9
 8006d3a:	9004      	str	r0, [sp, #16]
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f000 fb43 	bl	80073c8 <_Bfree>
 8006d42:	9b04      	ldr	r3, [sp, #16]
 8006d44:	4699      	mov	r9, r3
 8006d46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d48:	1b1a      	subs	r2, r3, r4
 8006d4a:	d004      	beq.n	8006d56 <_dtoa_r+0x79e>
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4658      	mov	r0, fp
 8006d50:	f000 fcf8 	bl	8007744 <__pow5mult>
 8006d54:	4681      	mov	r9, r0
 8006d56:	2101      	movs	r1, #1
 8006d58:	4658      	mov	r0, fp
 8006d5a:	f000 fc33 	bl	80075c4 <__i2b>
 8006d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d60:	4604      	mov	r4, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 81c9 	beq.w	80070fa <_dtoa_r+0xb42>
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4658      	mov	r0, fp
 8006d6e:	f000 fce9 	bl	8007744 <__pow5mult>
 8006d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	4604      	mov	r4, r0
 8006d78:	f300 808f 	bgt.w	8006e9a <_dtoa_r+0x8e2>
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 8087 	bne.w	8006e92 <_dtoa_r+0x8da>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 8083 	bne.w	8006e96 <_dtoa_r+0x8de>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d96:	0d1b      	lsrs	r3, r3, #20
 8006d98:	051b      	lsls	r3, r3, #20
 8006d9a:	b12b      	cbz	r3, 8006da8 <_dtoa_r+0x7f0>
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	3301      	adds	r3, #1
 8006da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	2301      	movs	r3, #1
 8006da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006daa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 81aa 	beq.w	8007106 <_dtoa_r+0xb4e>
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006db8:	6918      	ldr	r0, [r3, #16]
 8006dba:	f000 fbb7 	bl	800752c <__hi0bits>
 8006dbe:	f1c0 0020 	rsb	r0, r0, #32
 8006dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc4:	4418      	add	r0, r3
 8006dc6:	f010 001f 	ands.w	r0, r0, #31
 8006dca:	d071      	beq.n	8006eb0 <_dtoa_r+0x8f8>
 8006dcc:	f1c0 0320 	rsb	r3, r0, #32
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	dd65      	ble.n	8006ea0 <_dtoa_r+0x8e8>
 8006dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd6:	f1c0 001c 	rsb	r0, r0, #28
 8006dda:	4403      	add	r3, r0
 8006ddc:	4480      	add	r8, r0
 8006dde:	4406      	add	r6, r0
 8006de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	dd05      	ble.n	8006df4 <_dtoa_r+0x83c>
 8006de8:	4649      	mov	r1, r9
 8006dea:	4642      	mov	r2, r8
 8006dec:	4658      	mov	r0, fp
 8006dee:	f000 fd03 	bl	80077f8 <__lshift>
 8006df2:	4681      	mov	r9, r0
 8006df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dd05      	ble.n	8006e06 <_dtoa_r+0x84e>
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4658      	mov	r0, fp
 8006e00:	f000 fcfa 	bl	80077f8 <__lshift>
 8006e04:	4604      	mov	r4, r0
 8006e06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d053      	beq.n	8006eb4 <_dtoa_r+0x8fc>
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4648      	mov	r0, r9
 8006e10:	f000 fd5e 	bl	80078d0 <__mcmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	da4d      	bge.n	8006eb4 <_dtoa_r+0x8fc>
 8006e18:	1e7b      	subs	r3, r7, #1
 8006e1a:	9304      	str	r3, [sp, #16]
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	2300      	movs	r3, #0
 8006e20:	220a      	movs	r2, #10
 8006e22:	4658      	mov	r0, fp
 8006e24:	f000 faf2 	bl	800740c <__multadd>
 8006e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e2a:	4681      	mov	r9, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 816c 	beq.w	800710a <_dtoa_r+0xb52>
 8006e32:	2300      	movs	r3, #0
 8006e34:	4629      	mov	r1, r5
 8006e36:	220a      	movs	r2, #10
 8006e38:	4658      	mov	r0, fp
 8006e3a:	f000 fae7 	bl	800740c <__multadd>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	4605      	mov	r5, r0
 8006e44:	dc61      	bgt.n	8006f0a <_dtoa_r+0x952>
 8006e46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	dc3b      	bgt.n	8006ec4 <_dtoa_r+0x90c>
 8006e4c:	e05d      	b.n	8006f0a <_dtoa_r+0x952>
 8006e4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e54:	e746      	b.n	8006ce4 <_dtoa_r+0x72c>
 8006e56:	9b07      	ldr	r3, [sp, #28]
 8006e58:	1e5c      	subs	r4, r3, #1
 8006e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	bfbf      	itttt	lt
 8006e60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006e62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006e64:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006e66:	1ae3      	sublt	r3, r4, r3
 8006e68:	bfb4      	ite	lt
 8006e6a:	18d2      	addlt	r2, r2, r3
 8006e6c:	1b1c      	subge	r4, r3, r4
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	bfbc      	itt	lt
 8006e72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006e74:	2400      	movlt	r4, #0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfb5      	itete	lt
 8006e7a:	eba8 0603 	sublt.w	r6, r8, r3
 8006e7e:	9b07      	ldrge	r3, [sp, #28]
 8006e80:	2300      	movlt	r3, #0
 8006e82:	4646      	movge	r6, r8
 8006e84:	e730      	b.n	8006ce8 <_dtoa_r+0x730>
 8006e86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e88:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e8a:	4646      	mov	r6, r8
 8006e8c:	e735      	b.n	8006cfa <_dtoa_r+0x742>
 8006e8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e90:	e75c      	b.n	8006d4c <_dtoa_r+0x794>
 8006e92:	2300      	movs	r3, #0
 8006e94:	e788      	b.n	8006da8 <_dtoa_r+0x7f0>
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	e786      	b.n	8006da8 <_dtoa_r+0x7f0>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e9e:	e788      	b.n	8006db2 <_dtoa_r+0x7fa>
 8006ea0:	d09f      	beq.n	8006de2 <_dtoa_r+0x82a>
 8006ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea4:	331c      	adds	r3, #28
 8006ea6:	441a      	add	r2, r3
 8006ea8:	4498      	add	r8, r3
 8006eaa:	441e      	add	r6, r3
 8006eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eae:	e798      	b.n	8006de2 <_dtoa_r+0x82a>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	e7f6      	b.n	8006ea2 <_dtoa_r+0x8ea>
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	9704      	str	r7, [sp, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc20      	bgt.n	8006efe <_dtoa_r+0x946>
 8006ebc:	9308      	str	r3, [sp, #32]
 8006ebe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	dd1e      	ble.n	8006f02 <_dtoa_r+0x94a>
 8006ec4:	9b08      	ldr	r3, [sp, #32]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f47f aebc 	bne.w	8006c44 <_dtoa_r+0x68c>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	2205      	movs	r2, #5
 8006ed0:	4658      	mov	r0, fp
 8006ed2:	f000 fa9b 	bl	800740c <__multadd>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4604      	mov	r4, r0
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fcf8 	bl	80078d0 <__mcmp>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	f77f aeaf 	ble.w	8006c44 <_dtoa_r+0x68c>
 8006ee6:	4656      	mov	r6, sl
 8006ee8:	2331      	movs	r3, #49	@ 0x31
 8006eea:	f806 3b01 	strb.w	r3, [r6], #1
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	9304      	str	r3, [sp, #16]
 8006ef4:	e6aa      	b.n	8006c4c <_dtoa_r+0x694>
 8006ef6:	9c07      	ldr	r4, [sp, #28]
 8006ef8:	9704      	str	r7, [sp, #16]
 8006efa:	4625      	mov	r5, r4
 8006efc:	e7f3      	b.n	8006ee6 <_dtoa_r+0x92e>
 8006efe:	9b07      	ldr	r3, [sp, #28]
 8006f00:	9308      	str	r3, [sp, #32]
 8006f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8104 	beq.w	8007112 <_dtoa_r+0xb5a>
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	dd05      	ble.n	8006f1a <_dtoa_r+0x962>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4632      	mov	r2, r6
 8006f12:	4658      	mov	r0, fp
 8006f14:	f000 fc70 	bl	80077f8 <__lshift>
 8006f18:	4605      	mov	r5, r0
 8006f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d05a      	beq.n	8006fd6 <_dtoa_r+0xa1e>
 8006f20:	6869      	ldr	r1, [r5, #4]
 8006f22:	4658      	mov	r0, fp
 8006f24:	f000 fa10 	bl	8007348 <_Balloc>
 8006f28:	4606      	mov	r6, r0
 8006f2a:	b928      	cbnz	r0, 8006f38 <_dtoa_r+0x980>
 8006f2c:	4b84      	ldr	r3, [pc, #528]	@ (8007140 <_dtoa_r+0xb88>)
 8006f2e:	4602      	mov	r2, r0
 8006f30:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f34:	f7ff bb54 	b.w	80065e0 <_dtoa_r+0x28>
 8006f38:	692a      	ldr	r2, [r5, #16]
 8006f3a:	3202      	adds	r2, #2
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	f105 010c 	add.w	r1, r5, #12
 8006f42:	300c      	adds	r0, #12
 8006f44:	f001 ff5e 	bl	8008e04 <memcpy>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	f000 fc53 	bl	80077f8 <__lshift>
 8006f52:	f10a 0301 	add.w	r3, sl, #1
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	9b08      	ldr	r3, [sp, #32]
 8006f5a:	4453      	add	r3, sl
 8006f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f5e:	9b02      	ldr	r3, [sp, #8]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	462f      	mov	r7, r5
 8006f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f68:	4605      	mov	r5, r0
 8006f6a:	9b07      	ldr	r3, [sp, #28]
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4648      	mov	r0, r9
 8006f72:	9302      	str	r3, [sp, #8]
 8006f74:	f7ff fa98 	bl	80064a8 <quorem>
 8006f78:	4639      	mov	r1, r7
 8006f7a:	9008      	str	r0, [sp, #32]
 8006f7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f80:	4648      	mov	r0, r9
 8006f82:	f000 fca5 	bl	80078d0 <__mcmp>
 8006f86:	462a      	mov	r2, r5
 8006f88:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fcbb 	bl	8007908 <__mdiff>
 8006f92:	68c2      	ldr	r2, [r0, #12]
 8006f94:	4606      	mov	r6, r0
 8006f96:	bb02      	cbnz	r2, 8006fda <_dtoa_r+0xa22>
 8006f98:	4601      	mov	r1, r0
 8006f9a:	4648      	mov	r0, r9
 8006f9c:	f000 fc98 	bl	80078d0 <__mcmp>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006fa8:	f000 fa0e 	bl	80073c8 <_Bfree>
 8006fac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fb0:	9e07      	ldr	r6, [sp, #28]
 8006fb2:	ea43 0102 	orr.w	r1, r3, r2
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb8:	4319      	orrs	r1, r3
 8006fba:	d110      	bne.n	8006fde <_dtoa_r+0xa26>
 8006fbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fc0:	d029      	beq.n	8007016 <_dtoa_r+0xa5e>
 8006fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dd02      	ble.n	8006fce <_dtoa_r+0xa16>
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006fce:	9b02      	ldr	r3, [sp, #8]
 8006fd0:	f883 8000 	strb.w	r8, [r3]
 8006fd4:	e63b      	b.n	8006c4e <_dtoa_r+0x696>
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	e7bb      	b.n	8006f52 <_dtoa_r+0x99a>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	e7e1      	b.n	8006fa2 <_dtoa_r+0x9ea>
 8006fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	db04      	blt.n	8006fee <_dtoa_r+0xa36>
 8006fe4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fea:	430b      	orrs	r3, r1
 8006fec:	d120      	bne.n	8007030 <_dtoa_r+0xa78>
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	dded      	ble.n	8006fce <_dtoa_r+0xa16>
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 fbfe 	bl	80077f8 <__lshift>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4681      	mov	r9, r0
 8007000:	f000 fc66 	bl	80078d0 <__mcmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	dc03      	bgt.n	8007010 <_dtoa_r+0xa58>
 8007008:	d1e1      	bne.n	8006fce <_dtoa_r+0xa16>
 800700a:	f018 0f01 	tst.w	r8, #1
 800700e:	d0de      	beq.n	8006fce <_dtoa_r+0xa16>
 8007010:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007014:	d1d8      	bne.n	8006fc8 <_dtoa_r+0xa10>
 8007016:	9a02      	ldr	r2, [sp, #8]
 8007018:	2339      	movs	r3, #57	@ 0x39
 800701a:	7013      	strb	r3, [r2, #0]
 800701c:	4633      	mov	r3, r6
 800701e:	461e      	mov	r6, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007026:	2a39      	cmp	r2, #57	@ 0x39
 8007028:	d052      	beq.n	80070d0 <_dtoa_r+0xb18>
 800702a:	3201      	adds	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	e60e      	b.n	8006c4e <_dtoa_r+0x696>
 8007030:	2a00      	cmp	r2, #0
 8007032:	dd07      	ble.n	8007044 <_dtoa_r+0xa8c>
 8007034:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007038:	d0ed      	beq.n	8007016 <_dtoa_r+0xa5e>
 800703a:	9a02      	ldr	r2, [sp, #8]
 800703c:	f108 0301 	add.w	r3, r8, #1
 8007040:	7013      	strb	r3, [r2, #0]
 8007042:	e604      	b.n	8006c4e <_dtoa_r+0x696>
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	9a07      	ldr	r2, [sp, #28]
 8007048:	f803 8c01 	strb.w	r8, [r3, #-1]
 800704c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800704e:	4293      	cmp	r3, r2
 8007050:	d028      	beq.n	80070a4 <_dtoa_r+0xaec>
 8007052:	4649      	mov	r1, r9
 8007054:	2300      	movs	r3, #0
 8007056:	220a      	movs	r2, #10
 8007058:	4658      	mov	r0, fp
 800705a:	f000 f9d7 	bl	800740c <__multadd>
 800705e:	42af      	cmp	r7, r5
 8007060:	4681      	mov	r9, r0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	f04f 020a 	mov.w	r2, #10
 800706a:	4639      	mov	r1, r7
 800706c:	4658      	mov	r0, fp
 800706e:	d107      	bne.n	8007080 <_dtoa_r+0xac8>
 8007070:	f000 f9cc 	bl	800740c <__multadd>
 8007074:	4607      	mov	r7, r0
 8007076:	4605      	mov	r5, r0
 8007078:	9b07      	ldr	r3, [sp, #28]
 800707a:	3301      	adds	r3, #1
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	e774      	b.n	8006f6a <_dtoa_r+0x9b2>
 8007080:	f000 f9c4 	bl	800740c <__multadd>
 8007084:	4629      	mov	r1, r5
 8007086:	4607      	mov	r7, r0
 8007088:	2300      	movs	r3, #0
 800708a:	220a      	movs	r2, #10
 800708c:	4658      	mov	r0, fp
 800708e:	f000 f9bd 	bl	800740c <__multadd>
 8007092:	4605      	mov	r5, r0
 8007094:	e7f0      	b.n	8007078 <_dtoa_r+0xac0>
 8007096:	9b08      	ldr	r3, [sp, #32]
 8007098:	2b00      	cmp	r3, #0
 800709a:	bfcc      	ite	gt
 800709c:	461e      	movgt	r6, r3
 800709e:	2601      	movle	r6, #1
 80070a0:	4456      	add	r6, sl
 80070a2:	2700      	movs	r7, #0
 80070a4:	4649      	mov	r1, r9
 80070a6:	2201      	movs	r2, #1
 80070a8:	4658      	mov	r0, fp
 80070aa:	f000 fba5 	bl	80077f8 <__lshift>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4681      	mov	r9, r0
 80070b2:	f000 fc0d 	bl	80078d0 <__mcmp>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	dcb0      	bgt.n	800701c <_dtoa_r+0xa64>
 80070ba:	d102      	bne.n	80070c2 <_dtoa_r+0xb0a>
 80070bc:	f018 0f01 	tst.w	r8, #1
 80070c0:	d1ac      	bne.n	800701c <_dtoa_r+0xa64>
 80070c2:	4633      	mov	r3, r6
 80070c4:	461e      	mov	r6, r3
 80070c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ca:	2a30      	cmp	r2, #48	@ 0x30
 80070cc:	d0fa      	beq.n	80070c4 <_dtoa_r+0xb0c>
 80070ce:	e5be      	b.n	8006c4e <_dtoa_r+0x696>
 80070d0:	459a      	cmp	sl, r3
 80070d2:	d1a4      	bne.n	800701e <_dtoa_r+0xa66>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	3301      	adds	r3, #1
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	2331      	movs	r3, #49	@ 0x31
 80070dc:	f88a 3000 	strb.w	r3, [sl]
 80070e0:	e5b5      	b.n	8006c4e <_dtoa_r+0x696>
 80070e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007144 <_dtoa_r+0xb8c>
 80070e8:	b11b      	cbz	r3, 80070f2 <_dtoa_r+0xb3a>
 80070ea:	f10a 0308 	add.w	r3, sl, #8
 80070ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4650      	mov	r0, sl
 80070f4:	b017      	add	sp, #92	@ 0x5c
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	f77f ae3d 	ble.w	8006d7c <_dtoa_r+0x7c4>
 8007102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007104:	930a      	str	r3, [sp, #40]	@ 0x28
 8007106:	2001      	movs	r0, #1
 8007108:	e65b      	b.n	8006dc2 <_dtoa_r+0x80a>
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f77f aed6 	ble.w	8006ebe <_dtoa_r+0x906>
 8007112:	4656      	mov	r6, sl
 8007114:	4621      	mov	r1, r4
 8007116:	4648      	mov	r0, r9
 8007118:	f7ff f9c6 	bl	80064a8 <quorem>
 800711c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007120:	f806 8b01 	strb.w	r8, [r6], #1
 8007124:	9b08      	ldr	r3, [sp, #32]
 8007126:	eba6 020a 	sub.w	r2, r6, sl
 800712a:	4293      	cmp	r3, r2
 800712c:	ddb3      	ble.n	8007096 <_dtoa_r+0xade>
 800712e:	4649      	mov	r1, r9
 8007130:	2300      	movs	r3, #0
 8007132:	220a      	movs	r2, #10
 8007134:	4658      	mov	r0, fp
 8007136:	f000 f969 	bl	800740c <__multadd>
 800713a:	4681      	mov	r9, r0
 800713c:	e7ea      	b.n	8007114 <_dtoa_r+0xb5c>
 800713e:	bf00      	nop
 8007140:	08009c34 	.word	0x08009c34
 8007144:	08009bb8 	.word	0x08009bb8

08007148 <_free_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4605      	mov	r5, r0
 800714c:	2900      	cmp	r1, #0
 800714e:	d041      	beq.n	80071d4 <_free_r+0x8c>
 8007150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007154:	1f0c      	subs	r4, r1, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	18e4      	addlt	r4, r4, r3
 800715c:	f000 f8e8 	bl	8007330 <__malloc_lock>
 8007160:	4a1d      	ldr	r2, [pc, #116]	@ (80071d8 <_free_r+0x90>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	b933      	cbnz	r3, 8007174 <_free_r+0x2c>
 8007166:	6063      	str	r3, [r4, #4]
 8007168:	6014      	str	r4, [r2, #0]
 800716a:	4628      	mov	r0, r5
 800716c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007170:	f000 b8e4 	b.w	800733c <__malloc_unlock>
 8007174:	42a3      	cmp	r3, r4
 8007176:	d908      	bls.n	800718a <_free_r+0x42>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	1821      	adds	r1, r4, r0
 800717c:	428b      	cmp	r3, r1
 800717e:	bf01      	itttt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	1809      	addeq	r1, r1, r0
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	e7ed      	b.n	8007166 <_free_r+0x1e>
 800718a:	461a      	mov	r2, r3
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b10b      	cbz	r3, 8007194 <_free_r+0x4c>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x42>
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	1850      	adds	r0, r2, r1
 8007198:	42a0      	cmp	r0, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x6c>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	4401      	add	r1, r0
 80071a0:	1850      	adds	r0, r2, r1
 80071a2:	4283      	cmp	r3, r0
 80071a4:	6011      	str	r1, [r2, #0]
 80071a6:	d1e0      	bne.n	800716a <_free_r+0x22>
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	6053      	str	r3, [r2, #4]
 80071ae:	4408      	add	r0, r1
 80071b0:	6010      	str	r0, [r2, #0]
 80071b2:	e7da      	b.n	800716a <_free_r+0x22>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x74>
 80071b6:	230c      	movs	r3, #12
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	e7d6      	b.n	800716a <_free_r+0x22>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	1821      	adds	r1, r4, r0
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf04      	itt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	bf04      	itt	eq
 80071cc:	1809      	addeq	r1, r1, r0
 80071ce:	6021      	streq	r1, [r4, #0]
 80071d0:	6054      	str	r4, [r2, #4]
 80071d2:	e7ca      	b.n	800716a <_free_r+0x22>
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
 80071d6:	bf00      	nop
 80071d8:	200005c0 	.word	0x200005c0

080071dc <malloc>:
 80071dc:	4b02      	ldr	r3, [pc, #8]	@ (80071e8 <malloc+0xc>)
 80071de:	4601      	mov	r1, r0
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	f000 b825 	b.w	8007230 <_malloc_r>
 80071e6:	bf00      	nop
 80071e8:	2000000c 	.word	0x2000000c

080071ec <sbrk_aligned>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4e0f      	ldr	r6, [pc, #60]	@ (800722c <sbrk_aligned+0x40>)
 80071f0:	460c      	mov	r4, r1
 80071f2:	6831      	ldr	r1, [r6, #0]
 80071f4:	4605      	mov	r5, r0
 80071f6:	b911      	cbnz	r1, 80071fe <sbrk_aligned+0x12>
 80071f8:	f001 fdf4 	bl	8008de4 <_sbrk_r>
 80071fc:	6030      	str	r0, [r6, #0]
 80071fe:	4621      	mov	r1, r4
 8007200:	4628      	mov	r0, r5
 8007202:	f001 fdef 	bl	8008de4 <_sbrk_r>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	d103      	bne.n	8007212 <sbrk_aligned+0x26>
 800720a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800720e:	4620      	mov	r0, r4
 8007210:	bd70      	pop	{r4, r5, r6, pc}
 8007212:	1cc4      	adds	r4, r0, #3
 8007214:	f024 0403 	bic.w	r4, r4, #3
 8007218:	42a0      	cmp	r0, r4
 800721a:	d0f8      	beq.n	800720e <sbrk_aligned+0x22>
 800721c:	1a21      	subs	r1, r4, r0
 800721e:	4628      	mov	r0, r5
 8007220:	f001 fde0 	bl	8008de4 <_sbrk_r>
 8007224:	3001      	adds	r0, #1
 8007226:	d1f2      	bne.n	800720e <sbrk_aligned+0x22>
 8007228:	e7ef      	b.n	800720a <sbrk_aligned+0x1e>
 800722a:	bf00      	nop
 800722c:	200005bc 	.word	0x200005bc

08007230 <_malloc_r>:
 8007230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007234:	1ccd      	adds	r5, r1, #3
 8007236:	f025 0503 	bic.w	r5, r5, #3
 800723a:	3508      	adds	r5, #8
 800723c:	2d0c      	cmp	r5, #12
 800723e:	bf38      	it	cc
 8007240:	250c      	movcc	r5, #12
 8007242:	2d00      	cmp	r5, #0
 8007244:	4606      	mov	r6, r0
 8007246:	db01      	blt.n	800724c <_malloc_r+0x1c>
 8007248:	42a9      	cmp	r1, r5
 800724a:	d904      	bls.n	8007256 <_malloc_r+0x26>
 800724c:	230c      	movs	r3, #12
 800724e:	6033      	str	r3, [r6, #0]
 8007250:	2000      	movs	r0, #0
 8007252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007256:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800732c <_malloc_r+0xfc>
 800725a:	f000 f869 	bl	8007330 <__malloc_lock>
 800725e:	f8d8 3000 	ldr.w	r3, [r8]
 8007262:	461c      	mov	r4, r3
 8007264:	bb44      	cbnz	r4, 80072b8 <_malloc_r+0x88>
 8007266:	4629      	mov	r1, r5
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff ffbf 	bl	80071ec <sbrk_aligned>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	4604      	mov	r4, r0
 8007272:	d158      	bne.n	8007326 <_malloc_r+0xf6>
 8007274:	f8d8 4000 	ldr.w	r4, [r8]
 8007278:	4627      	mov	r7, r4
 800727a:	2f00      	cmp	r7, #0
 800727c:	d143      	bne.n	8007306 <_malloc_r+0xd6>
 800727e:	2c00      	cmp	r4, #0
 8007280:	d04b      	beq.n	800731a <_malloc_r+0xea>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	4639      	mov	r1, r7
 8007286:	4630      	mov	r0, r6
 8007288:	eb04 0903 	add.w	r9, r4, r3
 800728c:	f001 fdaa 	bl	8008de4 <_sbrk_r>
 8007290:	4581      	cmp	r9, r0
 8007292:	d142      	bne.n	800731a <_malloc_r+0xea>
 8007294:	6821      	ldr	r1, [r4, #0]
 8007296:	1a6d      	subs	r5, r5, r1
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f7ff ffa6 	bl	80071ec <sbrk_aligned>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d03a      	beq.n	800731a <_malloc_r+0xea>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	442b      	add	r3, r5
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	f8d8 3000 	ldr.w	r3, [r8]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	bb62      	cbnz	r2, 800730c <_malloc_r+0xdc>
 80072b2:	f8c8 7000 	str.w	r7, [r8]
 80072b6:	e00f      	b.n	80072d8 <_malloc_r+0xa8>
 80072b8:	6822      	ldr	r2, [r4, #0]
 80072ba:	1b52      	subs	r2, r2, r5
 80072bc:	d420      	bmi.n	8007300 <_malloc_r+0xd0>
 80072be:	2a0b      	cmp	r2, #11
 80072c0:	d917      	bls.n	80072f2 <_malloc_r+0xc2>
 80072c2:	1961      	adds	r1, r4, r5
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	6025      	str	r5, [r4, #0]
 80072c8:	bf18      	it	ne
 80072ca:	6059      	strne	r1, [r3, #4]
 80072cc:	6863      	ldr	r3, [r4, #4]
 80072ce:	bf08      	it	eq
 80072d0:	f8c8 1000 	streq.w	r1, [r8]
 80072d4:	5162      	str	r2, [r4, r5]
 80072d6:	604b      	str	r3, [r1, #4]
 80072d8:	4630      	mov	r0, r6
 80072da:	f000 f82f 	bl	800733c <__malloc_unlock>
 80072de:	f104 000b 	add.w	r0, r4, #11
 80072e2:	1d23      	adds	r3, r4, #4
 80072e4:	f020 0007 	bic.w	r0, r0, #7
 80072e8:	1ac2      	subs	r2, r0, r3
 80072ea:	bf1c      	itt	ne
 80072ec:	1a1b      	subne	r3, r3, r0
 80072ee:	50a3      	strne	r3, [r4, r2]
 80072f0:	e7af      	b.n	8007252 <_malloc_r+0x22>
 80072f2:	6862      	ldr	r2, [r4, #4]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	bf0c      	ite	eq
 80072f8:	f8c8 2000 	streq.w	r2, [r8]
 80072fc:	605a      	strne	r2, [r3, #4]
 80072fe:	e7eb      	b.n	80072d8 <_malloc_r+0xa8>
 8007300:	4623      	mov	r3, r4
 8007302:	6864      	ldr	r4, [r4, #4]
 8007304:	e7ae      	b.n	8007264 <_malloc_r+0x34>
 8007306:	463c      	mov	r4, r7
 8007308:	687f      	ldr	r7, [r7, #4]
 800730a:	e7b6      	b.n	800727a <_malloc_r+0x4a>
 800730c:	461a      	mov	r2, r3
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	42a3      	cmp	r3, r4
 8007312:	d1fb      	bne.n	800730c <_malloc_r+0xdc>
 8007314:	2300      	movs	r3, #0
 8007316:	6053      	str	r3, [r2, #4]
 8007318:	e7de      	b.n	80072d8 <_malloc_r+0xa8>
 800731a:	230c      	movs	r3, #12
 800731c:	6033      	str	r3, [r6, #0]
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f80c 	bl	800733c <__malloc_unlock>
 8007324:	e794      	b.n	8007250 <_malloc_r+0x20>
 8007326:	6005      	str	r5, [r0, #0]
 8007328:	e7d6      	b.n	80072d8 <_malloc_r+0xa8>
 800732a:	bf00      	nop
 800732c:	200005c0 	.word	0x200005c0

08007330 <__malloc_lock>:
 8007330:	4801      	ldr	r0, [pc, #4]	@ (8007338 <__malloc_lock+0x8>)
 8007332:	f7ff b8b2 	b.w	800649a <__retarget_lock_acquire_recursive>
 8007336:	bf00      	nop
 8007338:	200005b8 	.word	0x200005b8

0800733c <__malloc_unlock>:
 800733c:	4801      	ldr	r0, [pc, #4]	@ (8007344 <__malloc_unlock+0x8>)
 800733e:	f7ff b8ad 	b.w	800649c <__retarget_lock_release_recursive>
 8007342:	bf00      	nop
 8007344:	200005b8 	.word	0x200005b8

08007348 <_Balloc>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	69c6      	ldr	r6, [r0, #28]
 800734c:	4604      	mov	r4, r0
 800734e:	460d      	mov	r5, r1
 8007350:	b976      	cbnz	r6, 8007370 <_Balloc+0x28>
 8007352:	2010      	movs	r0, #16
 8007354:	f7ff ff42 	bl	80071dc <malloc>
 8007358:	4602      	mov	r2, r0
 800735a:	61e0      	str	r0, [r4, #28]
 800735c:	b920      	cbnz	r0, 8007368 <_Balloc+0x20>
 800735e:	4b18      	ldr	r3, [pc, #96]	@ (80073c0 <_Balloc+0x78>)
 8007360:	4818      	ldr	r0, [pc, #96]	@ (80073c4 <_Balloc+0x7c>)
 8007362:	216b      	movs	r1, #107	@ 0x6b
 8007364:	f001 fd62 	bl	8008e2c <__assert_func>
 8007368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800736c:	6006      	str	r6, [r0, #0]
 800736e:	60c6      	str	r6, [r0, #12]
 8007370:	69e6      	ldr	r6, [r4, #28]
 8007372:	68f3      	ldr	r3, [r6, #12]
 8007374:	b183      	cbz	r3, 8007398 <_Balloc+0x50>
 8007376:	69e3      	ldr	r3, [r4, #28]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800737e:	b9b8      	cbnz	r0, 80073b0 <_Balloc+0x68>
 8007380:	2101      	movs	r1, #1
 8007382:	fa01 f605 	lsl.w	r6, r1, r5
 8007386:	1d72      	adds	r2, r6, #5
 8007388:	0092      	lsls	r2, r2, #2
 800738a:	4620      	mov	r0, r4
 800738c:	f001 fd6c 	bl	8008e68 <_calloc_r>
 8007390:	b160      	cbz	r0, 80073ac <_Balloc+0x64>
 8007392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007396:	e00e      	b.n	80073b6 <_Balloc+0x6e>
 8007398:	2221      	movs	r2, #33	@ 0x21
 800739a:	2104      	movs	r1, #4
 800739c:	4620      	mov	r0, r4
 800739e:	f001 fd63 	bl	8008e68 <_calloc_r>
 80073a2:	69e3      	ldr	r3, [r4, #28]
 80073a4:	60f0      	str	r0, [r6, #12]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e4      	bne.n	8007376 <_Balloc+0x2e>
 80073ac:	2000      	movs	r0, #0
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	6802      	ldr	r2, [r0, #0]
 80073b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073b6:	2300      	movs	r3, #0
 80073b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073bc:	e7f7      	b.n	80073ae <_Balloc+0x66>
 80073be:	bf00      	nop
 80073c0:	08009bc5 	.word	0x08009bc5
 80073c4:	08009c45 	.word	0x08009c45

080073c8 <_Bfree>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	69c6      	ldr	r6, [r0, #28]
 80073cc:	4605      	mov	r5, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b976      	cbnz	r6, 80073f0 <_Bfree+0x28>
 80073d2:	2010      	movs	r0, #16
 80073d4:	f7ff ff02 	bl	80071dc <malloc>
 80073d8:	4602      	mov	r2, r0
 80073da:	61e8      	str	r0, [r5, #28]
 80073dc:	b920      	cbnz	r0, 80073e8 <_Bfree+0x20>
 80073de:	4b09      	ldr	r3, [pc, #36]	@ (8007404 <_Bfree+0x3c>)
 80073e0:	4809      	ldr	r0, [pc, #36]	@ (8007408 <_Bfree+0x40>)
 80073e2:	218f      	movs	r1, #143	@ 0x8f
 80073e4:	f001 fd22 	bl	8008e2c <__assert_func>
 80073e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073ec:	6006      	str	r6, [r0, #0]
 80073ee:	60c6      	str	r6, [r0, #12]
 80073f0:	b13c      	cbz	r4, 8007402 <_Bfree+0x3a>
 80073f2:	69eb      	ldr	r3, [r5, #28]
 80073f4:	6862      	ldr	r2, [r4, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073fc:	6021      	str	r1, [r4, #0]
 80073fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007402:	bd70      	pop	{r4, r5, r6, pc}
 8007404:	08009bc5 	.word	0x08009bc5
 8007408:	08009c45 	.word	0x08009c45

0800740c <__multadd>:
 800740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007410:	690d      	ldr	r5, [r1, #16]
 8007412:	4607      	mov	r7, r0
 8007414:	460c      	mov	r4, r1
 8007416:	461e      	mov	r6, r3
 8007418:	f101 0c14 	add.w	ip, r1, #20
 800741c:	2000      	movs	r0, #0
 800741e:	f8dc 3000 	ldr.w	r3, [ip]
 8007422:	b299      	uxth	r1, r3
 8007424:	fb02 6101 	mla	r1, r2, r1, r6
 8007428:	0c1e      	lsrs	r6, r3, #16
 800742a:	0c0b      	lsrs	r3, r1, #16
 800742c:	fb02 3306 	mla	r3, r2, r6, r3
 8007430:	b289      	uxth	r1, r1
 8007432:	3001      	adds	r0, #1
 8007434:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007438:	4285      	cmp	r5, r0
 800743a:	f84c 1b04 	str.w	r1, [ip], #4
 800743e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007442:	dcec      	bgt.n	800741e <__multadd+0x12>
 8007444:	b30e      	cbz	r6, 800748a <__multadd+0x7e>
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	42ab      	cmp	r3, r5
 800744a:	dc19      	bgt.n	8007480 <__multadd+0x74>
 800744c:	6861      	ldr	r1, [r4, #4]
 800744e:	4638      	mov	r0, r7
 8007450:	3101      	adds	r1, #1
 8007452:	f7ff ff79 	bl	8007348 <_Balloc>
 8007456:	4680      	mov	r8, r0
 8007458:	b928      	cbnz	r0, 8007466 <__multadd+0x5a>
 800745a:	4602      	mov	r2, r0
 800745c:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <__multadd+0x84>)
 800745e:	480d      	ldr	r0, [pc, #52]	@ (8007494 <__multadd+0x88>)
 8007460:	21ba      	movs	r1, #186	@ 0xba
 8007462:	f001 fce3 	bl	8008e2c <__assert_func>
 8007466:	6922      	ldr	r2, [r4, #16]
 8007468:	3202      	adds	r2, #2
 800746a:	f104 010c 	add.w	r1, r4, #12
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	300c      	adds	r0, #12
 8007472:	f001 fcc7 	bl	8008e04 <memcpy>
 8007476:	4621      	mov	r1, r4
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff ffa5 	bl	80073c8 <_Bfree>
 800747e:	4644      	mov	r4, r8
 8007480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007484:	3501      	adds	r5, #1
 8007486:	615e      	str	r6, [r3, #20]
 8007488:	6125      	str	r5, [r4, #16]
 800748a:	4620      	mov	r0, r4
 800748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007490:	08009c34 	.word	0x08009c34
 8007494:	08009c45 	.word	0x08009c45

08007498 <__s2b>:
 8007498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800749c:	460c      	mov	r4, r1
 800749e:	4615      	mov	r5, r2
 80074a0:	461f      	mov	r7, r3
 80074a2:	2209      	movs	r2, #9
 80074a4:	3308      	adds	r3, #8
 80074a6:	4606      	mov	r6, r0
 80074a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ac:	2100      	movs	r1, #0
 80074ae:	2201      	movs	r2, #1
 80074b0:	429a      	cmp	r2, r3
 80074b2:	db09      	blt.n	80074c8 <__s2b+0x30>
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff ff47 	bl	8007348 <_Balloc>
 80074ba:	b940      	cbnz	r0, 80074ce <__s2b+0x36>
 80074bc:	4602      	mov	r2, r0
 80074be:	4b19      	ldr	r3, [pc, #100]	@ (8007524 <__s2b+0x8c>)
 80074c0:	4819      	ldr	r0, [pc, #100]	@ (8007528 <__s2b+0x90>)
 80074c2:	21d3      	movs	r1, #211	@ 0xd3
 80074c4:	f001 fcb2 	bl	8008e2c <__assert_func>
 80074c8:	0052      	lsls	r2, r2, #1
 80074ca:	3101      	adds	r1, #1
 80074cc:	e7f0      	b.n	80074b0 <__s2b+0x18>
 80074ce:	9b08      	ldr	r3, [sp, #32]
 80074d0:	6143      	str	r3, [r0, #20]
 80074d2:	2d09      	cmp	r5, #9
 80074d4:	f04f 0301 	mov.w	r3, #1
 80074d8:	6103      	str	r3, [r0, #16]
 80074da:	dd16      	ble.n	800750a <__s2b+0x72>
 80074dc:	f104 0909 	add.w	r9, r4, #9
 80074e0:	46c8      	mov	r8, r9
 80074e2:	442c      	add	r4, r5
 80074e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074e8:	4601      	mov	r1, r0
 80074ea:	3b30      	subs	r3, #48	@ 0x30
 80074ec:	220a      	movs	r2, #10
 80074ee:	4630      	mov	r0, r6
 80074f0:	f7ff ff8c 	bl	800740c <__multadd>
 80074f4:	45a0      	cmp	r8, r4
 80074f6:	d1f5      	bne.n	80074e4 <__s2b+0x4c>
 80074f8:	f1a5 0408 	sub.w	r4, r5, #8
 80074fc:	444c      	add	r4, r9
 80074fe:	1b2d      	subs	r5, r5, r4
 8007500:	1963      	adds	r3, r4, r5
 8007502:	42bb      	cmp	r3, r7
 8007504:	db04      	blt.n	8007510 <__s2b+0x78>
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	340a      	adds	r4, #10
 800750c:	2509      	movs	r5, #9
 800750e:	e7f6      	b.n	80074fe <__s2b+0x66>
 8007510:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007514:	4601      	mov	r1, r0
 8007516:	3b30      	subs	r3, #48	@ 0x30
 8007518:	220a      	movs	r2, #10
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ff76 	bl	800740c <__multadd>
 8007520:	e7ee      	b.n	8007500 <__s2b+0x68>
 8007522:	bf00      	nop
 8007524:	08009c34 	.word	0x08009c34
 8007528:	08009c45 	.word	0x08009c45

0800752c <__hi0bits>:
 800752c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007530:	4603      	mov	r3, r0
 8007532:	bf36      	itet	cc
 8007534:	0403      	lslcc	r3, r0, #16
 8007536:	2000      	movcs	r0, #0
 8007538:	2010      	movcc	r0, #16
 800753a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800753e:	bf3c      	itt	cc
 8007540:	021b      	lslcc	r3, r3, #8
 8007542:	3008      	addcc	r0, #8
 8007544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007548:	bf3c      	itt	cc
 800754a:	011b      	lslcc	r3, r3, #4
 800754c:	3004      	addcc	r0, #4
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007552:	bf3c      	itt	cc
 8007554:	009b      	lslcc	r3, r3, #2
 8007556:	3002      	addcc	r0, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	db05      	blt.n	8007568 <__hi0bits+0x3c>
 800755c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007560:	f100 0001 	add.w	r0, r0, #1
 8007564:	bf08      	it	eq
 8007566:	2020      	moveq	r0, #32
 8007568:	4770      	bx	lr

0800756a <__lo0bits>:
 800756a:	6803      	ldr	r3, [r0, #0]
 800756c:	4602      	mov	r2, r0
 800756e:	f013 0007 	ands.w	r0, r3, #7
 8007572:	d00b      	beq.n	800758c <__lo0bits+0x22>
 8007574:	07d9      	lsls	r1, r3, #31
 8007576:	d421      	bmi.n	80075bc <__lo0bits+0x52>
 8007578:	0798      	lsls	r0, r3, #30
 800757a:	bf49      	itett	mi
 800757c:	085b      	lsrmi	r3, r3, #1
 800757e:	089b      	lsrpl	r3, r3, #2
 8007580:	2001      	movmi	r0, #1
 8007582:	6013      	strmi	r3, [r2, #0]
 8007584:	bf5c      	itt	pl
 8007586:	6013      	strpl	r3, [r2, #0]
 8007588:	2002      	movpl	r0, #2
 800758a:	4770      	bx	lr
 800758c:	b299      	uxth	r1, r3
 800758e:	b909      	cbnz	r1, 8007594 <__lo0bits+0x2a>
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	2010      	movs	r0, #16
 8007594:	b2d9      	uxtb	r1, r3
 8007596:	b909      	cbnz	r1, 800759c <__lo0bits+0x32>
 8007598:	3008      	adds	r0, #8
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	0719      	lsls	r1, r3, #28
 800759e:	bf04      	itt	eq
 80075a0:	091b      	lsreq	r3, r3, #4
 80075a2:	3004      	addeq	r0, #4
 80075a4:	0799      	lsls	r1, r3, #30
 80075a6:	bf04      	itt	eq
 80075a8:	089b      	lsreq	r3, r3, #2
 80075aa:	3002      	addeq	r0, #2
 80075ac:	07d9      	lsls	r1, r3, #31
 80075ae:	d403      	bmi.n	80075b8 <__lo0bits+0x4e>
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	f100 0001 	add.w	r0, r0, #1
 80075b6:	d003      	beq.n	80075c0 <__lo0bits+0x56>
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	4770      	bx	lr
 80075bc:	2000      	movs	r0, #0
 80075be:	4770      	bx	lr
 80075c0:	2020      	movs	r0, #32
 80075c2:	4770      	bx	lr

080075c4 <__i2b>:
 80075c4:	b510      	push	{r4, lr}
 80075c6:	460c      	mov	r4, r1
 80075c8:	2101      	movs	r1, #1
 80075ca:	f7ff febd 	bl	8007348 <_Balloc>
 80075ce:	4602      	mov	r2, r0
 80075d0:	b928      	cbnz	r0, 80075de <__i2b+0x1a>
 80075d2:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <__i2b+0x24>)
 80075d4:	4805      	ldr	r0, [pc, #20]	@ (80075ec <__i2b+0x28>)
 80075d6:	f240 1145 	movw	r1, #325	@ 0x145
 80075da:	f001 fc27 	bl	8008e2c <__assert_func>
 80075de:	2301      	movs	r3, #1
 80075e0:	6144      	str	r4, [r0, #20]
 80075e2:	6103      	str	r3, [r0, #16]
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	bf00      	nop
 80075e8:	08009c34 	.word	0x08009c34
 80075ec:	08009c45 	.word	0x08009c45

080075f0 <__multiply>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	4614      	mov	r4, r2
 80075f6:	690a      	ldr	r2, [r1, #16]
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	bfa8      	it	ge
 80075fe:	4623      	movge	r3, r4
 8007600:	460f      	mov	r7, r1
 8007602:	bfa4      	itt	ge
 8007604:	460c      	movge	r4, r1
 8007606:	461f      	movge	r7, r3
 8007608:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800760c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	6861      	ldr	r1, [r4, #4]
 8007614:	eb0a 0609 	add.w	r6, sl, r9
 8007618:	42b3      	cmp	r3, r6
 800761a:	b085      	sub	sp, #20
 800761c:	bfb8      	it	lt
 800761e:	3101      	addlt	r1, #1
 8007620:	f7ff fe92 	bl	8007348 <_Balloc>
 8007624:	b930      	cbnz	r0, 8007634 <__multiply+0x44>
 8007626:	4602      	mov	r2, r0
 8007628:	4b44      	ldr	r3, [pc, #272]	@ (800773c <__multiply+0x14c>)
 800762a:	4845      	ldr	r0, [pc, #276]	@ (8007740 <__multiply+0x150>)
 800762c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007630:	f001 fbfc 	bl	8008e2c <__assert_func>
 8007634:	f100 0514 	add.w	r5, r0, #20
 8007638:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800763c:	462b      	mov	r3, r5
 800763e:	2200      	movs	r2, #0
 8007640:	4543      	cmp	r3, r8
 8007642:	d321      	bcc.n	8007688 <__multiply+0x98>
 8007644:	f107 0114 	add.w	r1, r7, #20
 8007648:	f104 0214 	add.w	r2, r4, #20
 800764c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007650:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	1b13      	subs	r3, r2, r4
 8007658:	3b15      	subs	r3, #21
 800765a:	f023 0303 	bic.w	r3, r3, #3
 800765e:	3304      	adds	r3, #4
 8007660:	f104 0715 	add.w	r7, r4, #21
 8007664:	42ba      	cmp	r2, r7
 8007666:	bf38      	it	cc
 8007668:	2304      	movcc	r3, #4
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	9103      	str	r1, [sp, #12]
 8007670:	428b      	cmp	r3, r1
 8007672:	d80c      	bhi.n	800768e <__multiply+0x9e>
 8007674:	2e00      	cmp	r6, #0
 8007676:	dd03      	ble.n	8007680 <__multiply+0x90>
 8007678:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800767c:	2b00      	cmp	r3, #0
 800767e:	d05a      	beq.n	8007736 <__multiply+0x146>
 8007680:	6106      	str	r6, [r0, #16]
 8007682:	b005      	add	sp, #20
 8007684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	f843 2b04 	str.w	r2, [r3], #4
 800768c:	e7d8      	b.n	8007640 <__multiply+0x50>
 800768e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007692:	f1ba 0f00 	cmp.w	sl, #0
 8007696:	d023      	beq.n	80076e0 <__multiply+0xf0>
 8007698:	f104 0e14 	add.w	lr, r4, #20
 800769c:	46a9      	mov	r9, r5
 800769e:	f04f 0c00 	mov.w	ip, #0
 80076a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076a6:	f8d9 3000 	ldr.w	r3, [r9]
 80076aa:	fa1f fb87 	uxth.w	fp, r7
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80076b4:	4463      	add	r3, ip
 80076b6:	f8d9 c000 	ldr.w	ip, [r9]
 80076ba:	0c3f      	lsrs	r7, r7, #16
 80076bc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80076c0:	fb0a c707 	mla	r7, sl, r7, ip
 80076c4:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076ce:	4572      	cmp	r2, lr
 80076d0:	f849 3b04 	str.w	r3, [r9], #4
 80076d4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076d8:	d8e3      	bhi.n	80076a2 <__multiply+0xb2>
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	f845 c003 	str.w	ip, [r5, r3]
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076e6:	3104      	adds	r1, #4
 80076e8:	f1b9 0f00 	cmp.w	r9, #0
 80076ec:	d021      	beq.n	8007732 <__multiply+0x142>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	f104 0c14 	add.w	ip, r4, #20
 80076f4:	46ae      	mov	lr, r5
 80076f6:	f04f 0a00 	mov.w	sl, #0
 80076fa:	f8bc b000 	ldrh.w	fp, [ip]
 80076fe:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007702:	fb09 770b 	mla	r7, r9, fp, r7
 8007706:	4457      	add	r7, sl
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800770e:	f84e 3b04 	str.w	r3, [lr], #4
 8007712:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800771a:	f8be 3000 	ldrh.w	r3, [lr]
 800771e:	fb09 330a 	mla	r3, r9, sl, r3
 8007722:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007726:	4562      	cmp	r2, ip
 8007728:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800772c:	d8e5      	bhi.n	80076fa <__multiply+0x10a>
 800772e:	9f01      	ldr	r7, [sp, #4]
 8007730:	51eb      	str	r3, [r5, r7]
 8007732:	3504      	adds	r5, #4
 8007734:	e79a      	b.n	800766c <__multiply+0x7c>
 8007736:	3e01      	subs	r6, #1
 8007738:	e79c      	b.n	8007674 <__multiply+0x84>
 800773a:	bf00      	nop
 800773c:	08009c34 	.word	0x08009c34
 8007740:	08009c45 	.word	0x08009c45

08007744 <__pow5mult>:
 8007744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007748:	4615      	mov	r5, r2
 800774a:	f012 0203 	ands.w	r2, r2, #3
 800774e:	4607      	mov	r7, r0
 8007750:	460e      	mov	r6, r1
 8007752:	d007      	beq.n	8007764 <__pow5mult+0x20>
 8007754:	4c25      	ldr	r4, [pc, #148]	@ (80077ec <__pow5mult+0xa8>)
 8007756:	3a01      	subs	r2, #1
 8007758:	2300      	movs	r3, #0
 800775a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800775e:	f7ff fe55 	bl	800740c <__multadd>
 8007762:	4606      	mov	r6, r0
 8007764:	10ad      	asrs	r5, r5, #2
 8007766:	d03d      	beq.n	80077e4 <__pow5mult+0xa0>
 8007768:	69fc      	ldr	r4, [r7, #28]
 800776a:	b97c      	cbnz	r4, 800778c <__pow5mult+0x48>
 800776c:	2010      	movs	r0, #16
 800776e:	f7ff fd35 	bl	80071dc <malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	61f8      	str	r0, [r7, #28]
 8007776:	b928      	cbnz	r0, 8007784 <__pow5mult+0x40>
 8007778:	4b1d      	ldr	r3, [pc, #116]	@ (80077f0 <__pow5mult+0xac>)
 800777a:	481e      	ldr	r0, [pc, #120]	@ (80077f4 <__pow5mult+0xb0>)
 800777c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007780:	f001 fb54 	bl	8008e2c <__assert_func>
 8007784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007788:	6004      	str	r4, [r0, #0]
 800778a:	60c4      	str	r4, [r0, #12]
 800778c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007794:	b94c      	cbnz	r4, 80077aa <__pow5mult+0x66>
 8007796:	f240 2171 	movw	r1, #625	@ 0x271
 800779a:	4638      	mov	r0, r7
 800779c:	f7ff ff12 	bl	80075c4 <__i2b>
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80077a6:	4604      	mov	r4, r0
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	f04f 0900 	mov.w	r9, #0
 80077ae:	07eb      	lsls	r3, r5, #31
 80077b0:	d50a      	bpl.n	80077c8 <__pow5mult+0x84>
 80077b2:	4631      	mov	r1, r6
 80077b4:	4622      	mov	r2, r4
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ff1a 	bl	80075f0 <__multiply>
 80077bc:	4631      	mov	r1, r6
 80077be:	4680      	mov	r8, r0
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff fe01 	bl	80073c8 <_Bfree>
 80077c6:	4646      	mov	r6, r8
 80077c8:	106d      	asrs	r5, r5, #1
 80077ca:	d00b      	beq.n	80077e4 <__pow5mult+0xa0>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	b938      	cbnz	r0, 80077e0 <__pow5mult+0x9c>
 80077d0:	4622      	mov	r2, r4
 80077d2:	4621      	mov	r1, r4
 80077d4:	4638      	mov	r0, r7
 80077d6:	f7ff ff0b 	bl	80075f0 <__multiply>
 80077da:	6020      	str	r0, [r4, #0]
 80077dc:	f8c0 9000 	str.w	r9, [r0]
 80077e0:	4604      	mov	r4, r0
 80077e2:	e7e4      	b.n	80077ae <__pow5mult+0x6a>
 80077e4:	4630      	mov	r0, r6
 80077e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ea:	bf00      	nop
 80077ec:	08009ca0 	.word	0x08009ca0
 80077f0:	08009bc5 	.word	0x08009bc5
 80077f4:	08009c45 	.word	0x08009c45

080077f8 <__lshift>:
 80077f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	460c      	mov	r4, r1
 80077fe:	6849      	ldr	r1, [r1, #4]
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	4607      	mov	r7, r0
 800780a:	4691      	mov	r9, r2
 800780c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007810:	f108 0601 	add.w	r6, r8, #1
 8007814:	42b3      	cmp	r3, r6
 8007816:	db0b      	blt.n	8007830 <__lshift+0x38>
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff fd95 	bl	8007348 <_Balloc>
 800781e:	4605      	mov	r5, r0
 8007820:	b948      	cbnz	r0, 8007836 <__lshift+0x3e>
 8007822:	4602      	mov	r2, r0
 8007824:	4b28      	ldr	r3, [pc, #160]	@ (80078c8 <__lshift+0xd0>)
 8007826:	4829      	ldr	r0, [pc, #164]	@ (80078cc <__lshift+0xd4>)
 8007828:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800782c:	f001 fafe 	bl	8008e2c <__assert_func>
 8007830:	3101      	adds	r1, #1
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	e7ee      	b.n	8007814 <__lshift+0x1c>
 8007836:	2300      	movs	r3, #0
 8007838:	f100 0114 	add.w	r1, r0, #20
 800783c:	f100 0210 	add.w	r2, r0, #16
 8007840:	4618      	mov	r0, r3
 8007842:	4553      	cmp	r3, sl
 8007844:	db33      	blt.n	80078ae <__lshift+0xb6>
 8007846:	6920      	ldr	r0, [r4, #16]
 8007848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800784c:	f104 0314 	add.w	r3, r4, #20
 8007850:	f019 091f 	ands.w	r9, r9, #31
 8007854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800785c:	d02b      	beq.n	80078b6 <__lshift+0xbe>
 800785e:	f1c9 0e20 	rsb	lr, r9, #32
 8007862:	468a      	mov	sl, r1
 8007864:	2200      	movs	r2, #0
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	fa00 f009 	lsl.w	r0, r0, r9
 800786c:	4310      	orrs	r0, r2
 800786e:	f84a 0b04 	str.w	r0, [sl], #4
 8007872:	f853 2b04 	ldr.w	r2, [r3], #4
 8007876:	459c      	cmp	ip, r3
 8007878:	fa22 f20e 	lsr.w	r2, r2, lr
 800787c:	d8f3      	bhi.n	8007866 <__lshift+0x6e>
 800787e:	ebac 0304 	sub.w	r3, ip, r4
 8007882:	3b15      	subs	r3, #21
 8007884:	f023 0303 	bic.w	r3, r3, #3
 8007888:	3304      	adds	r3, #4
 800788a:	f104 0015 	add.w	r0, r4, #21
 800788e:	4584      	cmp	ip, r0
 8007890:	bf38      	it	cc
 8007892:	2304      	movcc	r3, #4
 8007894:	50ca      	str	r2, [r1, r3]
 8007896:	b10a      	cbz	r2, 800789c <__lshift+0xa4>
 8007898:	f108 0602 	add.w	r6, r8, #2
 800789c:	3e01      	subs	r6, #1
 800789e:	4638      	mov	r0, r7
 80078a0:	612e      	str	r6, [r5, #16]
 80078a2:	4621      	mov	r1, r4
 80078a4:	f7ff fd90 	bl	80073c8 <_Bfree>
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80078b2:	3301      	adds	r3, #1
 80078b4:	e7c5      	b.n	8007842 <__lshift+0x4a>
 80078b6:	3904      	subs	r1, #4
 80078b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80078c0:	459c      	cmp	ip, r3
 80078c2:	d8f9      	bhi.n	80078b8 <__lshift+0xc0>
 80078c4:	e7ea      	b.n	800789c <__lshift+0xa4>
 80078c6:	bf00      	nop
 80078c8:	08009c34 	.word	0x08009c34
 80078cc:	08009c45 	.word	0x08009c45

080078d0 <__mcmp>:
 80078d0:	690a      	ldr	r2, [r1, #16]
 80078d2:	4603      	mov	r3, r0
 80078d4:	6900      	ldr	r0, [r0, #16]
 80078d6:	1a80      	subs	r0, r0, r2
 80078d8:	b530      	push	{r4, r5, lr}
 80078da:	d10e      	bne.n	80078fa <__mcmp+0x2a>
 80078dc:	3314      	adds	r3, #20
 80078de:	3114      	adds	r1, #20
 80078e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078f0:	4295      	cmp	r5, r2
 80078f2:	d003      	beq.n	80078fc <__mcmp+0x2c>
 80078f4:	d205      	bcs.n	8007902 <__mcmp+0x32>
 80078f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d3f3      	bcc.n	80078e8 <__mcmp+0x18>
 8007900:	e7fb      	b.n	80078fa <__mcmp+0x2a>
 8007902:	2001      	movs	r0, #1
 8007904:	e7f9      	b.n	80078fa <__mcmp+0x2a>
	...

08007908 <__mdiff>:
 8007908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	4689      	mov	r9, r1
 800790e:	4606      	mov	r6, r0
 8007910:	4611      	mov	r1, r2
 8007912:	4648      	mov	r0, r9
 8007914:	4614      	mov	r4, r2
 8007916:	f7ff ffdb 	bl	80078d0 <__mcmp>
 800791a:	1e05      	subs	r5, r0, #0
 800791c:	d112      	bne.n	8007944 <__mdiff+0x3c>
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff fd11 	bl	8007348 <_Balloc>
 8007926:	4602      	mov	r2, r0
 8007928:	b928      	cbnz	r0, 8007936 <__mdiff+0x2e>
 800792a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a24 <__mdiff+0x11c>)
 800792c:	f240 2137 	movw	r1, #567	@ 0x237
 8007930:	483d      	ldr	r0, [pc, #244]	@ (8007a28 <__mdiff+0x120>)
 8007932:	f001 fa7b 	bl	8008e2c <__assert_func>
 8007936:	2301      	movs	r3, #1
 8007938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800793c:	4610      	mov	r0, r2
 800793e:	b003      	add	sp, #12
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007944:	bfbc      	itt	lt
 8007946:	464b      	movlt	r3, r9
 8007948:	46a1      	movlt	r9, r4
 800794a:	4630      	mov	r0, r6
 800794c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007950:	bfba      	itte	lt
 8007952:	461c      	movlt	r4, r3
 8007954:	2501      	movlt	r5, #1
 8007956:	2500      	movge	r5, #0
 8007958:	f7ff fcf6 	bl	8007348 <_Balloc>
 800795c:	4602      	mov	r2, r0
 800795e:	b918      	cbnz	r0, 8007968 <__mdiff+0x60>
 8007960:	4b30      	ldr	r3, [pc, #192]	@ (8007a24 <__mdiff+0x11c>)
 8007962:	f240 2145 	movw	r1, #581	@ 0x245
 8007966:	e7e3      	b.n	8007930 <__mdiff+0x28>
 8007968:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800796c:	6926      	ldr	r6, [r4, #16]
 800796e:	60c5      	str	r5, [r0, #12]
 8007970:	f109 0310 	add.w	r3, r9, #16
 8007974:	f109 0514 	add.w	r5, r9, #20
 8007978:	f104 0e14 	add.w	lr, r4, #20
 800797c:	f100 0b14 	add.w	fp, r0, #20
 8007980:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007984:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	46d9      	mov	r9, fp
 800798c:	f04f 0c00 	mov.w	ip, #0
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007996:	f853 af04 	ldr.w	sl, [r3, #4]!
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	b281      	uxth	r1, r0
 800799e:	fa1f f38a 	uxth.w	r3, sl
 80079a2:	1a5b      	subs	r3, r3, r1
 80079a4:	0c00      	lsrs	r0, r0, #16
 80079a6:	4463      	add	r3, ip
 80079a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079ac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079b6:	4576      	cmp	r6, lr
 80079b8:	f849 3b04 	str.w	r3, [r9], #4
 80079bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079c0:	d8e6      	bhi.n	8007990 <__mdiff+0x88>
 80079c2:	1b33      	subs	r3, r6, r4
 80079c4:	3b15      	subs	r3, #21
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	3415      	adds	r4, #21
 80079cc:	3304      	adds	r3, #4
 80079ce:	42a6      	cmp	r6, r4
 80079d0:	bf38      	it	cc
 80079d2:	2304      	movcc	r3, #4
 80079d4:	441d      	add	r5, r3
 80079d6:	445b      	add	r3, fp
 80079d8:	461e      	mov	r6, r3
 80079da:	462c      	mov	r4, r5
 80079dc:	4544      	cmp	r4, r8
 80079de:	d30e      	bcc.n	80079fe <__mdiff+0xf6>
 80079e0:	f108 0103 	add.w	r1, r8, #3
 80079e4:	1b49      	subs	r1, r1, r5
 80079e6:	f021 0103 	bic.w	r1, r1, #3
 80079ea:	3d03      	subs	r5, #3
 80079ec:	45a8      	cmp	r8, r5
 80079ee:	bf38      	it	cc
 80079f0:	2100      	movcc	r1, #0
 80079f2:	440b      	add	r3, r1
 80079f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079f8:	b191      	cbz	r1, 8007a20 <__mdiff+0x118>
 80079fa:	6117      	str	r7, [r2, #16]
 80079fc:	e79e      	b.n	800793c <__mdiff+0x34>
 80079fe:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a02:	46e6      	mov	lr, ip
 8007a04:	0c08      	lsrs	r0, r1, #16
 8007a06:	fa1c fc81 	uxtah	ip, ip, r1
 8007a0a:	4471      	add	r1, lr
 8007a0c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a10:	b289      	uxth	r1, r1
 8007a12:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a16:	f846 1b04 	str.w	r1, [r6], #4
 8007a1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a1e:	e7dd      	b.n	80079dc <__mdiff+0xd4>
 8007a20:	3f01      	subs	r7, #1
 8007a22:	e7e7      	b.n	80079f4 <__mdiff+0xec>
 8007a24:	08009c34 	.word	0x08009c34
 8007a28:	08009c45 	.word	0x08009c45

08007a2c <__ulp>:
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a68 <__ulp+0x3c>)
 8007a2e:	400b      	ands	r3, r1
 8007a30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dc08      	bgt.n	8007a4a <__ulp+0x1e>
 8007a38:	425b      	negs	r3, r3
 8007a3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a42:	da04      	bge.n	8007a4e <__ulp+0x22>
 8007a44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a48:	4113      	asrs	r3, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	e008      	b.n	8007a60 <__ulp+0x34>
 8007a4e:	f1a2 0314 	sub.w	r3, r2, #20
 8007a52:	2b1e      	cmp	r3, #30
 8007a54:	bfda      	itte	le
 8007a56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007a5a:	40da      	lsrle	r2, r3
 8007a5c:	2201      	movgt	r2, #1
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	7ff00000 	.word	0x7ff00000

08007a6c <__b2d>:
 8007a6c:	6902      	ldr	r2, [r0, #16]
 8007a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a70:	f100 0614 	add.w	r6, r0, #20
 8007a74:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007a78:	4f20      	ldr	r7, [pc, #128]	@ (8007afc <__b2d+0x90>)
 8007a7a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff fd54 	bl	800752c <__hi0bits>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b0a      	cmp	r3, #10
 8007a88:	f1c0 0020 	rsb	r0, r0, #32
 8007a8c:	f1a2 0504 	sub.w	r5, r2, #4
 8007a90:	6008      	str	r0, [r1, #0]
 8007a92:	dc13      	bgt.n	8007abc <__b2d+0x50>
 8007a94:	42ae      	cmp	r6, r5
 8007a96:	bf38      	it	cc
 8007a98:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007a9c:	f1c3 0c0b 	rsb	ip, r3, #11
 8007aa0:	bf28      	it	cs
 8007aa2:	2200      	movcs	r2, #0
 8007aa4:	3315      	adds	r3, #21
 8007aa6:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007aaa:	fa04 f303 	lsl.w	r3, r4, r3
 8007aae:	fa22 f20c 	lsr.w	r2, r2, ip
 8007ab2:	ea4e 0107 	orr.w	r1, lr, r7
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007abc:	42ae      	cmp	r6, r5
 8007abe:	bf36      	itet	cc
 8007ac0:	f1a2 0508 	subcc.w	r5, r2, #8
 8007ac4:	2200      	movcs	r2, #0
 8007ac6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007aca:	3b0b      	subs	r3, #11
 8007acc:	d012      	beq.n	8007af4 <__b2d+0x88>
 8007ace:	f1c3 0720 	rsb	r7, r3, #32
 8007ad2:	fa22 f107 	lsr.w	r1, r2, r7
 8007ad6:	409c      	lsls	r4, r3
 8007ad8:	430c      	orrs	r4, r1
 8007ada:	42b5      	cmp	r5, r6
 8007adc:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007ae0:	bf8c      	ite	hi
 8007ae2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007ae6:	2400      	movls	r4, #0
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	40fc      	lsrs	r4, r7
 8007aec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007af0:	4322      	orrs	r2, r4
 8007af2:	e7e1      	b.n	8007ab8 <__b2d+0x4c>
 8007af4:	ea44 0107 	orr.w	r1, r4, r7
 8007af8:	e7de      	b.n	8007ab8 <__b2d+0x4c>
 8007afa:	bf00      	nop
 8007afc:	3ff00000 	.word	0x3ff00000

08007b00 <__d2b>:
 8007b00:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b04:	2101      	movs	r1, #1
 8007b06:	9e08      	ldr	r6, [sp, #32]
 8007b08:	4690      	mov	r8, r2
 8007b0a:	4699      	mov	r9, r3
 8007b0c:	f7ff fc1c 	bl	8007348 <_Balloc>
 8007b10:	4604      	mov	r4, r0
 8007b12:	b930      	cbnz	r0, 8007b22 <__d2b+0x22>
 8007b14:	4602      	mov	r2, r0
 8007b16:	4b24      	ldr	r3, [pc, #144]	@ (8007ba8 <__d2b+0xa8>)
 8007b18:	4824      	ldr	r0, [pc, #144]	@ (8007bac <__d2b+0xac>)
 8007b1a:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b1e:	f001 f985 	bl	8008e2c <__assert_func>
 8007b22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b2a:	b10d      	cbz	r5, 8007b30 <__d2b+0x30>
 8007b2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f1b8 0300 	subs.w	r3, r8, #0
 8007b36:	d024      	beq.n	8007b82 <__d2b+0x82>
 8007b38:	4668      	mov	r0, sp
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	f7ff fd15 	bl	800756a <__lo0bits>
 8007b40:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b44:	b1d8      	cbz	r0, 8007b7e <__d2b+0x7e>
 8007b46:	f1c0 0320 	rsb	r3, r0, #32
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	40c2      	lsrs	r2, r0
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	61a3      	str	r3, [r4, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2201      	moveq	r2, #1
 8007b60:	2202      	movne	r2, #2
 8007b62:	6122      	str	r2, [r4, #16]
 8007b64:	b1ad      	cbz	r5, 8007b92 <__d2b+0x92>
 8007b66:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b6a:	4405      	add	r5, r0
 8007b6c:	6035      	str	r5, [r6, #0]
 8007b6e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b74:	6018      	str	r0, [r3, #0]
 8007b76:	4620      	mov	r0, r4
 8007b78:	b002      	add	sp, #8
 8007b7a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b7e:	6161      	str	r1, [r4, #20]
 8007b80:	e7e9      	b.n	8007b56 <__d2b+0x56>
 8007b82:	a801      	add	r0, sp, #4
 8007b84:	f7ff fcf1 	bl	800756a <__lo0bits>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	6163      	str	r3, [r4, #20]
 8007b8c:	3020      	adds	r0, #32
 8007b8e:	2201      	movs	r2, #1
 8007b90:	e7e7      	b.n	8007b62 <__d2b+0x62>
 8007b92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b9a:	6030      	str	r0, [r6, #0]
 8007b9c:	6918      	ldr	r0, [r3, #16]
 8007b9e:	f7ff fcc5 	bl	800752c <__hi0bits>
 8007ba2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ba6:	e7e4      	b.n	8007b72 <__d2b+0x72>
 8007ba8:	08009c34 	.word	0x08009c34
 8007bac:	08009c45 	.word	0x08009c45

08007bb0 <__ratio>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	e9cd 1000 	strd	r1, r0, [sp]
 8007bba:	a902      	add	r1, sp, #8
 8007bbc:	f7ff ff56 	bl	8007a6c <__b2d>
 8007bc0:	468b      	mov	fp, r1
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	9800      	ldr	r0, [sp, #0]
 8007bc8:	a903      	add	r1, sp, #12
 8007bca:	f7ff ff4f 	bl	8007a6c <__b2d>
 8007bce:	9b01      	ldr	r3, [sp, #4]
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	6919      	ldr	r1, [r3, #16]
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	1ac9      	subs	r1, r1, r3
 8007bdc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfcd      	iteet	gt
 8007bea:	463a      	movgt	r2, r7
 8007bec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bf0:	462a      	movle	r2, r5
 8007bf2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007bf6:	bfd8      	it	le
 8007bf8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4622      	mov	r2, r4
 8007c00:	464b      	mov	r3, r9
 8007c02:	4630      	mov	r0, r6
 8007c04:	4659      	mov	r1, fp
 8007c06:	f7f8 fe29 	bl	800085c <__aeabi_ddiv>
 8007c0a:	b005      	add	sp, #20
 8007c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c10 <__copybits>:
 8007c10:	3901      	subs	r1, #1
 8007c12:	b570      	push	{r4, r5, r6, lr}
 8007c14:	1149      	asrs	r1, r1, #5
 8007c16:	6914      	ldr	r4, [r2, #16]
 8007c18:	3101      	adds	r1, #1
 8007c1a:	f102 0314 	add.w	r3, r2, #20
 8007c1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c26:	1f05      	subs	r5, r0, #4
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d30c      	bcc.n	8007c46 <__copybits+0x36>
 8007c2c:	1aa3      	subs	r3, r4, r2
 8007c2e:	3b11      	subs	r3, #17
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	3211      	adds	r2, #17
 8007c36:	42a2      	cmp	r2, r4
 8007c38:	bf88      	it	hi
 8007c3a:	2300      	movhi	r3, #0
 8007c3c:	4418      	add	r0, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4288      	cmp	r0, r1
 8007c42:	d305      	bcc.n	8007c50 <__copybits+0x40>
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c4e:	e7eb      	b.n	8007c28 <__copybits+0x18>
 8007c50:	f840 3b04 	str.w	r3, [r0], #4
 8007c54:	e7f4      	b.n	8007c40 <__copybits+0x30>

08007c56 <__any_on>:
 8007c56:	f100 0214 	add.w	r2, r0, #20
 8007c5a:	6900      	ldr	r0, [r0, #16]
 8007c5c:	114b      	asrs	r3, r1, #5
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	b510      	push	{r4, lr}
 8007c62:	db11      	blt.n	8007c88 <__any_on+0x32>
 8007c64:	dd0a      	ble.n	8007c7c <__any_on+0x26>
 8007c66:	f011 011f 	ands.w	r1, r1, #31
 8007c6a:	d007      	beq.n	8007c7c <__any_on+0x26>
 8007c6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c70:	fa24 f001 	lsr.w	r0, r4, r1
 8007c74:	fa00 f101 	lsl.w	r1, r0, r1
 8007c78:	428c      	cmp	r4, r1
 8007c7a:	d10b      	bne.n	8007c94 <__any_on+0x3e>
 8007c7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d803      	bhi.n	8007c8c <__any_on+0x36>
 8007c84:	2000      	movs	r0, #0
 8007c86:	bd10      	pop	{r4, pc}
 8007c88:	4603      	mov	r3, r0
 8007c8a:	e7f7      	b.n	8007c7c <__any_on+0x26>
 8007c8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d0f5      	beq.n	8007c80 <__any_on+0x2a>
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7f6      	b.n	8007c86 <__any_on+0x30>

08007c98 <sulp>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	4690      	mov	r8, r2
 8007ca0:	f7ff fec4 	bl	8007a2c <__ulp>
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	f1b8 0f00 	cmp.w	r8, #0
 8007cac:	d011      	beq.n	8007cd2 <sulp+0x3a>
 8007cae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007cb2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd0b      	ble.n	8007cd2 <sulp+0x3a>
 8007cba:	051b      	lsls	r3, r3, #20
 8007cbc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007cc0:	2400      	movs	r4, #0
 8007cc2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fc9d 	bl	8000608 <__aeabi_dmul>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cda:	0000      	movs	r0, r0
 8007cdc:	0000      	movs	r0, r0
	...

08007ce0 <_strtod_l>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	b09f      	sub	sp, #124	@ 0x7c
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007cea:	2200      	movs	r2, #0
 8007cec:	921a      	str	r2, [sp, #104]	@ 0x68
 8007cee:	9005      	str	r0, [sp, #20]
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	f04f 0b00 	mov.w	fp, #0
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cfc:	7811      	ldrb	r1, [r2, #0]
 8007cfe:	292b      	cmp	r1, #43	@ 0x2b
 8007d00:	d048      	beq.n	8007d94 <_strtod_l+0xb4>
 8007d02:	d836      	bhi.n	8007d72 <_strtod_l+0x92>
 8007d04:	290d      	cmp	r1, #13
 8007d06:	d830      	bhi.n	8007d6a <_strtod_l+0x8a>
 8007d08:	2908      	cmp	r1, #8
 8007d0a:	d830      	bhi.n	8007d6e <_strtod_l+0x8e>
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d039      	beq.n	8007d84 <_strtod_l+0xa4>
 8007d10:	2200      	movs	r2, #0
 8007d12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007d14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007d16:	782a      	ldrb	r2, [r5, #0]
 8007d18:	2a30      	cmp	r2, #48	@ 0x30
 8007d1a:	f040 80b1 	bne.w	8007e80 <_strtod_l+0x1a0>
 8007d1e:	786a      	ldrb	r2, [r5, #1]
 8007d20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d24:	2a58      	cmp	r2, #88	@ 0x58
 8007d26:	d16c      	bne.n	8007e02 <_strtod_l+0x122>
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4a8d      	ldr	r2, [pc, #564]	@ (8007f68 <_strtod_l+0x288>)
 8007d34:	9805      	ldr	r0, [sp, #20]
 8007d36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d38:	a919      	add	r1, sp, #100	@ 0x64
 8007d3a:	f001 f911 	bl	8008f60 <__gethex>
 8007d3e:	f010 060f 	ands.w	r6, r0, #15
 8007d42:	4604      	mov	r4, r0
 8007d44:	d005      	beq.n	8007d52 <_strtod_l+0x72>
 8007d46:	2e06      	cmp	r6, #6
 8007d48:	d126      	bne.n	8007d98 <_strtod_l+0xb8>
 8007d4a:	3501      	adds	r5, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 857e 	bne.w	8008856 <_strtod_l+0xb76>
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d5c:	b1bb      	cbz	r3, 8007d8e <_strtod_l+0xae>
 8007d5e:	4650      	mov	r0, sl
 8007d60:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007d64:	b01f      	add	sp, #124	@ 0x7c
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	2920      	cmp	r1, #32
 8007d6c:	d1d0      	bne.n	8007d10 <_strtod_l+0x30>
 8007d6e:	3201      	adds	r2, #1
 8007d70:	e7c3      	b.n	8007cfa <_strtod_l+0x1a>
 8007d72:	292d      	cmp	r1, #45	@ 0x2d
 8007d74:	d1cc      	bne.n	8007d10 <_strtod_l+0x30>
 8007d76:	2101      	movs	r1, #1
 8007d78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007d7a:	1c51      	adds	r1, r2, #1
 8007d7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d7e:	7852      	ldrb	r2, [r2, #1]
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	d1c7      	bne.n	8007d14 <_strtod_l+0x34>
 8007d84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d86:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 8562 	bne.w	8008852 <_strtod_l+0xb72>
 8007d8e:	4650      	mov	r0, sl
 8007d90:	4659      	mov	r1, fp
 8007d92:	e7e7      	b.n	8007d64 <_strtod_l+0x84>
 8007d94:	2100      	movs	r1, #0
 8007d96:	e7ef      	b.n	8007d78 <_strtod_l+0x98>
 8007d98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d9a:	b13a      	cbz	r2, 8007dac <_strtod_l+0xcc>
 8007d9c:	2135      	movs	r1, #53	@ 0x35
 8007d9e:	a81c      	add	r0, sp, #112	@ 0x70
 8007da0:	f7ff ff36 	bl	8007c10 <__copybits>
 8007da4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007da6:	9805      	ldr	r0, [sp, #20]
 8007da8:	f7ff fb0e 	bl	80073c8 <_Bfree>
 8007dac:	3e01      	subs	r6, #1
 8007dae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007db0:	2e04      	cmp	r6, #4
 8007db2:	d806      	bhi.n	8007dc2 <_strtod_l+0xe2>
 8007db4:	e8df f006 	tbb	[pc, r6]
 8007db8:	201d0314 	.word	0x201d0314
 8007dbc:	14          	.byte	0x14
 8007dbd:	00          	.byte	0x00
 8007dbe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007dc2:	05e1      	lsls	r1, r4, #23
 8007dc4:	bf48      	it	mi
 8007dc6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007dca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dce:	0d1b      	lsrs	r3, r3, #20
 8007dd0:	051b      	lsls	r3, r3, #20
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1bd      	bne.n	8007d52 <_strtod_l+0x72>
 8007dd6:	f7fe fb35 	bl	8006444 <__errno>
 8007dda:	2322      	movs	r3, #34	@ 0x22
 8007ddc:	6003      	str	r3, [r0, #0]
 8007dde:	e7b8      	b.n	8007d52 <_strtod_l+0x72>
 8007de0:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007de4:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007de8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007dec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007df0:	e7e7      	b.n	8007dc2 <_strtod_l+0xe2>
 8007df2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007f6c <_strtod_l+0x28c>
 8007df6:	e7e4      	b.n	8007dc2 <_strtod_l+0xe2>
 8007df8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007dfc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007e00:	e7df      	b.n	8007dc2 <_strtod_l+0xe2>
 8007e02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e08:	785b      	ldrb	r3, [r3, #1]
 8007e0a:	2b30      	cmp	r3, #48	@ 0x30
 8007e0c:	d0f9      	beq.n	8007e02 <_strtod_l+0x122>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d09f      	beq.n	8007d52 <_strtod_l+0x72>
 8007e12:	2301      	movs	r3, #1
 8007e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9308      	str	r3, [sp, #32]
 8007e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e20:	461f      	mov	r7, r3
 8007e22:	220a      	movs	r2, #10
 8007e24:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007e26:	7805      	ldrb	r5, [r0, #0]
 8007e28:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007e2c:	b2d9      	uxtb	r1, r3
 8007e2e:	2909      	cmp	r1, #9
 8007e30:	d928      	bls.n	8007e84 <_strtod_l+0x1a4>
 8007e32:	494f      	ldr	r1, [pc, #316]	@ (8007f70 <_strtod_l+0x290>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	f000 ffc3 	bl	8008dc0 <strncmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d032      	beq.n	8007ea4 <_strtod_l+0x1c4>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	462a      	mov	r2, r5
 8007e42:	4681      	mov	r9, r0
 8007e44:	463d      	mov	r5, r7
 8007e46:	4603      	mov	r3, r0
 8007e48:	2a65      	cmp	r2, #101	@ 0x65
 8007e4a:	d001      	beq.n	8007e50 <_strtod_l+0x170>
 8007e4c:	2a45      	cmp	r2, #69	@ 0x45
 8007e4e:	d114      	bne.n	8007e7a <_strtod_l+0x19a>
 8007e50:	b91d      	cbnz	r5, 8007e5a <_strtod_l+0x17a>
 8007e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e54:	4302      	orrs	r2, r0
 8007e56:	d095      	beq.n	8007d84 <_strtod_l+0xa4>
 8007e58:	2500      	movs	r5, #0
 8007e5a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007e5c:	1c62      	adds	r2, r4, #1
 8007e5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e60:	7862      	ldrb	r2, [r4, #1]
 8007e62:	2a2b      	cmp	r2, #43	@ 0x2b
 8007e64:	d077      	beq.n	8007f56 <_strtod_l+0x276>
 8007e66:	2a2d      	cmp	r2, #45	@ 0x2d
 8007e68:	d07b      	beq.n	8007f62 <_strtod_l+0x282>
 8007e6a:	f04f 0c00 	mov.w	ip, #0
 8007e6e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007e72:	2909      	cmp	r1, #9
 8007e74:	f240 8082 	bls.w	8007f7c <_strtod_l+0x29c>
 8007e78:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	e0a2      	b.n	8007fc6 <_strtod_l+0x2e6>
 8007e80:	2300      	movs	r3, #0
 8007e82:	e7c7      	b.n	8007e14 <_strtod_l+0x134>
 8007e84:	2f08      	cmp	r7, #8
 8007e86:	bfd5      	itete	le
 8007e88:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007e8a:	9908      	ldrgt	r1, [sp, #32]
 8007e8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e90:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007e94:	f100 0001 	add.w	r0, r0, #1
 8007e98:	bfd4      	ite	le
 8007e9a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007e9c:	9308      	strgt	r3, [sp, #32]
 8007e9e:	3701      	adds	r7, #1
 8007ea0:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ea2:	e7bf      	b.n	8007e24 <_strtod_l+0x144>
 8007ea4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007eaa:	785a      	ldrb	r2, [r3, #1]
 8007eac:	b37f      	cbz	r7, 8007f0e <_strtod_l+0x22e>
 8007eae:	4681      	mov	r9, r0
 8007eb0:	463d      	mov	r5, r7
 8007eb2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d912      	bls.n	8007ee0 <_strtod_l+0x200>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7c4      	b.n	8007e48 <_strtod_l+0x168>
 8007ebe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ec4:	785a      	ldrb	r2, [r3, #1]
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	2a30      	cmp	r2, #48	@ 0x30
 8007eca:	d0f8      	beq.n	8007ebe <_strtod_l+0x1de>
 8007ecc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	f200 84c5 	bhi.w	8008860 <_strtod_l+0xb80>
 8007ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ed8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007eda:	4681      	mov	r9, r0
 8007edc:	2000      	movs	r0, #0
 8007ede:	4605      	mov	r5, r0
 8007ee0:	3a30      	subs	r2, #48	@ 0x30
 8007ee2:	f100 0301 	add.w	r3, r0, #1
 8007ee6:	d02a      	beq.n	8007f3e <_strtod_l+0x25e>
 8007ee8:	4499      	add	r9, r3
 8007eea:	eb00 0c05 	add.w	ip, r0, r5
 8007eee:	462b      	mov	r3, r5
 8007ef0:	210a      	movs	r1, #10
 8007ef2:	4563      	cmp	r3, ip
 8007ef4:	d10d      	bne.n	8007f12 <_strtod_l+0x232>
 8007ef6:	1c69      	adds	r1, r5, #1
 8007ef8:	4401      	add	r1, r0
 8007efa:	4428      	add	r0, r5
 8007efc:	2808      	cmp	r0, #8
 8007efe:	dc16      	bgt.n	8007f2e <_strtod_l+0x24e>
 8007f00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f02:	230a      	movs	r3, #10
 8007f04:	fb03 2300 	mla	r3, r3, r0, r2
 8007f08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e018      	b.n	8007f40 <_strtod_l+0x260>
 8007f0e:	4638      	mov	r0, r7
 8007f10:	e7da      	b.n	8007ec8 <_strtod_l+0x1e8>
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	f103 0301 	add.w	r3, r3, #1
 8007f18:	dc03      	bgt.n	8007f22 <_strtod_l+0x242>
 8007f1a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007f1c:	434e      	muls	r6, r1
 8007f1e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007f20:	e7e7      	b.n	8007ef2 <_strtod_l+0x212>
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	bfde      	ittt	le
 8007f26:	9e08      	ldrle	r6, [sp, #32]
 8007f28:	434e      	mulle	r6, r1
 8007f2a:	9608      	strle	r6, [sp, #32]
 8007f2c:	e7e1      	b.n	8007ef2 <_strtod_l+0x212>
 8007f2e:	280f      	cmp	r0, #15
 8007f30:	dceb      	bgt.n	8007f0a <_strtod_l+0x22a>
 8007f32:	9808      	ldr	r0, [sp, #32]
 8007f34:	230a      	movs	r3, #10
 8007f36:	fb03 2300 	mla	r3, r3, r0, r2
 8007f3a:	9308      	str	r3, [sp, #32]
 8007f3c:	e7e5      	b.n	8007f0a <_strtod_l+0x22a>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f42:	1c50      	adds	r0, r2, #1
 8007f44:	9019      	str	r0, [sp, #100]	@ 0x64
 8007f46:	7852      	ldrb	r2, [r2, #1]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	e7b1      	b.n	8007eb2 <_strtod_l+0x1d2>
 8007f4e:	f04f 0900 	mov.w	r9, #0
 8007f52:	2301      	movs	r3, #1
 8007f54:	e77d      	b.n	8007e52 <_strtod_l+0x172>
 8007f56:	f04f 0c00 	mov.w	ip, #0
 8007f5a:	1ca2      	adds	r2, r4, #2
 8007f5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f5e:	78a2      	ldrb	r2, [r4, #2]
 8007f60:	e785      	b.n	8007e6e <_strtod_l+0x18e>
 8007f62:	f04f 0c01 	mov.w	ip, #1
 8007f66:	e7f8      	b.n	8007f5a <_strtod_l+0x27a>
 8007f68:	08009db8 	.word	0x08009db8
 8007f6c:	7ff00000 	.word	0x7ff00000
 8007f70:	08009da0 	.word	0x08009da0
 8007f74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f76:	1c51      	adds	r1, r2, #1
 8007f78:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f7a:	7852      	ldrb	r2, [r2, #1]
 8007f7c:	2a30      	cmp	r2, #48	@ 0x30
 8007f7e:	d0f9      	beq.n	8007f74 <_strtod_l+0x294>
 8007f80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007f84:	2908      	cmp	r1, #8
 8007f86:	f63f af78 	bhi.w	8007e7a <_strtod_l+0x19a>
 8007f8a:	3a30      	subs	r2, #48	@ 0x30
 8007f8c:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007f92:	f04f 080a 	mov.w	r8, #10
 8007f96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f98:	1c56      	adds	r6, r2, #1
 8007f9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007f9c:	7852      	ldrb	r2, [r2, #1]
 8007f9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007fa2:	f1be 0f09 	cmp.w	lr, #9
 8007fa6:	d939      	bls.n	800801c <_strtod_l+0x33c>
 8007fa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007faa:	1a76      	subs	r6, r6, r1
 8007fac:	2e08      	cmp	r6, #8
 8007fae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007fb2:	dc03      	bgt.n	8007fbc <_strtod_l+0x2dc>
 8007fb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007fb6:	4588      	cmp	r8, r1
 8007fb8:	bfa8      	it	ge
 8007fba:	4688      	movge	r8, r1
 8007fbc:	f1bc 0f00 	cmp.w	ip, #0
 8007fc0:	d001      	beq.n	8007fc6 <_strtod_l+0x2e6>
 8007fc2:	f1c8 0800 	rsb	r8, r8, #0
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	d14e      	bne.n	8008068 <_strtod_l+0x388>
 8007fca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fcc:	4308      	orrs	r0, r1
 8007fce:	f47f aec0 	bne.w	8007d52 <_strtod_l+0x72>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f47f aed6 	bne.w	8007d84 <_strtod_l+0xa4>
 8007fd8:	2a69      	cmp	r2, #105	@ 0x69
 8007fda:	d028      	beq.n	800802e <_strtod_l+0x34e>
 8007fdc:	dc25      	bgt.n	800802a <_strtod_l+0x34a>
 8007fde:	2a49      	cmp	r2, #73	@ 0x49
 8007fe0:	d025      	beq.n	800802e <_strtod_l+0x34e>
 8007fe2:	2a4e      	cmp	r2, #78	@ 0x4e
 8007fe4:	f47f aece 	bne.w	8007d84 <_strtod_l+0xa4>
 8007fe8:	499a      	ldr	r1, [pc, #616]	@ (8008254 <_strtod_l+0x574>)
 8007fea:	a819      	add	r0, sp, #100	@ 0x64
 8007fec:	f001 f9da 	bl	80093a4 <__match>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f43f aec7 	beq.w	8007d84 <_strtod_l+0xa4>
 8007ff6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b28      	cmp	r3, #40	@ 0x28
 8007ffc:	d12e      	bne.n	800805c <_strtod_l+0x37c>
 8007ffe:	4996      	ldr	r1, [pc, #600]	@ (8008258 <_strtod_l+0x578>)
 8008000:	aa1c      	add	r2, sp, #112	@ 0x70
 8008002:	a819      	add	r0, sp, #100	@ 0x64
 8008004:	f001 f9e2 	bl	80093cc <__hexnan>
 8008008:	2805      	cmp	r0, #5
 800800a:	d127      	bne.n	800805c <_strtod_l+0x37c>
 800800c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800800e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008012:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008016:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800801a:	e69a      	b.n	8007d52 <_strtod_l+0x72>
 800801c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800801e:	fb08 2101 	mla	r1, r8, r1, r2
 8008022:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008026:	920e      	str	r2, [sp, #56]	@ 0x38
 8008028:	e7b5      	b.n	8007f96 <_strtod_l+0x2b6>
 800802a:	2a6e      	cmp	r2, #110	@ 0x6e
 800802c:	e7da      	b.n	8007fe4 <_strtod_l+0x304>
 800802e:	498b      	ldr	r1, [pc, #556]	@ (800825c <_strtod_l+0x57c>)
 8008030:	a819      	add	r0, sp, #100	@ 0x64
 8008032:	f001 f9b7 	bl	80093a4 <__match>
 8008036:	2800      	cmp	r0, #0
 8008038:	f43f aea4 	beq.w	8007d84 <_strtod_l+0xa4>
 800803c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800803e:	4988      	ldr	r1, [pc, #544]	@ (8008260 <_strtod_l+0x580>)
 8008040:	3b01      	subs	r3, #1
 8008042:	a819      	add	r0, sp, #100	@ 0x64
 8008044:	9319      	str	r3, [sp, #100]	@ 0x64
 8008046:	f001 f9ad 	bl	80093a4 <__match>
 800804a:	b910      	cbnz	r0, 8008052 <_strtod_l+0x372>
 800804c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800804e:	3301      	adds	r3, #1
 8008050:	9319      	str	r3, [sp, #100]	@ 0x64
 8008052:	f8df b210 	ldr.w	fp, [pc, #528]	@ 8008264 <_strtod_l+0x584>
 8008056:	f04f 0a00 	mov.w	sl, #0
 800805a:	e67a      	b.n	8007d52 <_strtod_l+0x72>
 800805c:	4882      	ldr	r0, [pc, #520]	@ (8008268 <_strtod_l+0x588>)
 800805e:	f000 fedf 	bl	8008e20 <nan>
 8008062:	4682      	mov	sl, r0
 8008064:	468b      	mov	fp, r1
 8008066:	e674      	b.n	8007d52 <_strtod_l+0x72>
 8008068:	eba8 0309 	sub.w	r3, r8, r9
 800806c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800806e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008070:	2f00      	cmp	r7, #0
 8008072:	bf08      	it	eq
 8008074:	462f      	moveq	r7, r5
 8008076:	2d10      	cmp	r5, #16
 8008078:	462c      	mov	r4, r5
 800807a:	bfa8      	it	ge
 800807c:	2410      	movge	r4, #16
 800807e:	f7f8 fa49 	bl	8000514 <__aeabi_ui2d>
 8008082:	2d09      	cmp	r5, #9
 8008084:	4682      	mov	sl, r0
 8008086:	468b      	mov	fp, r1
 8008088:	dc11      	bgt.n	80080ae <_strtod_l+0x3ce>
 800808a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	f43f ae60 	beq.w	8007d52 <_strtod_l+0x72>
 8008092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008094:	dd76      	ble.n	8008184 <_strtod_l+0x4a4>
 8008096:	2b16      	cmp	r3, #22
 8008098:	dc5d      	bgt.n	8008156 <_strtod_l+0x476>
 800809a:	4974      	ldr	r1, [pc, #464]	@ (800826c <_strtod_l+0x58c>)
 800809c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a4:	4652      	mov	r2, sl
 80080a6:	465b      	mov	r3, fp
 80080a8:	f7f8 faae 	bl	8000608 <__aeabi_dmul>
 80080ac:	e7d9      	b.n	8008062 <_strtod_l+0x382>
 80080ae:	4b6f      	ldr	r3, [pc, #444]	@ (800826c <_strtod_l+0x58c>)
 80080b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80080b8:	f7f8 faa6 	bl	8000608 <__aeabi_dmul>
 80080bc:	4682      	mov	sl, r0
 80080be:	9808      	ldr	r0, [sp, #32]
 80080c0:	468b      	mov	fp, r1
 80080c2:	f7f8 fa27 	bl	8000514 <__aeabi_ui2d>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4650      	mov	r0, sl
 80080cc:	4659      	mov	r1, fp
 80080ce:	f7f8 f8e5 	bl	800029c <__adddf3>
 80080d2:	2d0f      	cmp	r5, #15
 80080d4:	4682      	mov	sl, r0
 80080d6:	468b      	mov	fp, r1
 80080d8:	ddd7      	ble.n	800808a <_strtod_l+0x3aa>
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	1b2c      	subs	r4, r5, r4
 80080de:	441c      	add	r4, r3
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	f340 8096 	ble.w	8008212 <_strtod_l+0x532>
 80080e6:	f014 030f 	ands.w	r3, r4, #15
 80080ea:	d00a      	beq.n	8008102 <_strtod_l+0x422>
 80080ec:	495f      	ldr	r1, [pc, #380]	@ (800826c <_strtod_l+0x58c>)
 80080ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080f2:	4652      	mov	r2, sl
 80080f4:	465b      	mov	r3, fp
 80080f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080fa:	f7f8 fa85 	bl	8000608 <__aeabi_dmul>
 80080fe:	4682      	mov	sl, r0
 8008100:	468b      	mov	fp, r1
 8008102:	f034 040f 	bics.w	r4, r4, #15
 8008106:	d073      	beq.n	80081f0 <_strtod_l+0x510>
 8008108:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800810c:	dd48      	ble.n	80081a0 <_strtod_l+0x4c0>
 800810e:	2400      	movs	r4, #0
 8008110:	46a0      	mov	r8, r4
 8008112:	940a      	str	r4, [sp, #40]	@ 0x28
 8008114:	46a1      	mov	r9, r4
 8008116:	9a05      	ldr	r2, [sp, #20]
 8008118:	f8df b148 	ldr.w	fp, [pc, #328]	@ 8008264 <_strtod_l+0x584>
 800811c:	2322      	movs	r3, #34	@ 0x22
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	f04f 0a00 	mov.w	sl, #0
 8008124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	f43f ae13 	beq.w	8007d52 <_strtod_l+0x72>
 800812c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800812e:	9805      	ldr	r0, [sp, #20]
 8008130:	f7ff f94a 	bl	80073c8 <_Bfree>
 8008134:	9805      	ldr	r0, [sp, #20]
 8008136:	4649      	mov	r1, r9
 8008138:	f7ff f946 	bl	80073c8 <_Bfree>
 800813c:	9805      	ldr	r0, [sp, #20]
 800813e:	4641      	mov	r1, r8
 8008140:	f7ff f942 	bl	80073c8 <_Bfree>
 8008144:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008146:	9805      	ldr	r0, [sp, #20]
 8008148:	f7ff f93e 	bl	80073c8 <_Bfree>
 800814c:	9805      	ldr	r0, [sp, #20]
 800814e:	4621      	mov	r1, r4
 8008150:	f7ff f93a 	bl	80073c8 <_Bfree>
 8008154:	e5fd      	b.n	8007d52 <_strtod_l+0x72>
 8008156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008158:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800815c:	4293      	cmp	r3, r2
 800815e:	dbbc      	blt.n	80080da <_strtod_l+0x3fa>
 8008160:	4c42      	ldr	r4, [pc, #264]	@ (800826c <_strtod_l+0x58c>)
 8008162:	f1c5 050f 	rsb	r5, r5, #15
 8008166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008172:	f7f8 fa49 	bl	8000608 <__aeabi_dmul>
 8008176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008178:	1b5d      	subs	r5, r3, r5
 800817a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800817e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008182:	e791      	b.n	80080a8 <_strtod_l+0x3c8>
 8008184:	3316      	adds	r3, #22
 8008186:	dba8      	blt.n	80080da <_strtod_l+0x3fa>
 8008188:	4b38      	ldr	r3, [pc, #224]	@ (800826c <_strtod_l+0x58c>)
 800818a:	eba9 0808 	sub.w	r8, r9, r8
 800818e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008192:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008196:	4650      	mov	r0, sl
 8008198:	4659      	mov	r1, fp
 800819a:	f7f8 fb5f 	bl	800085c <__aeabi_ddiv>
 800819e:	e760      	b.n	8008062 <_strtod_l+0x382>
 80081a0:	4b33      	ldr	r3, [pc, #204]	@ (8008270 <_strtod_l+0x590>)
 80081a2:	9308      	str	r3, [sp, #32]
 80081a4:	2300      	movs	r3, #0
 80081a6:	1124      	asrs	r4, r4, #4
 80081a8:	4650      	mov	r0, sl
 80081aa:	4659      	mov	r1, fp
 80081ac:	461e      	mov	r6, r3
 80081ae:	2c01      	cmp	r4, #1
 80081b0:	dc21      	bgt.n	80081f6 <_strtod_l+0x516>
 80081b2:	b10b      	cbz	r3, 80081b8 <_strtod_l+0x4d8>
 80081b4:	4682      	mov	sl, r0
 80081b6:	468b      	mov	fp, r1
 80081b8:	492d      	ldr	r1, [pc, #180]	@ (8008270 <_strtod_l+0x590>)
 80081ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80081be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80081c2:	4652      	mov	r2, sl
 80081c4:	465b      	mov	r3, fp
 80081c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ca:	f7f8 fa1d 	bl	8000608 <__aeabi_dmul>
 80081ce:	4b25      	ldr	r3, [pc, #148]	@ (8008264 <_strtod_l+0x584>)
 80081d0:	460a      	mov	r2, r1
 80081d2:	400b      	ands	r3, r1
 80081d4:	4927      	ldr	r1, [pc, #156]	@ (8008274 <_strtod_l+0x594>)
 80081d6:	428b      	cmp	r3, r1
 80081d8:	4682      	mov	sl, r0
 80081da:	d898      	bhi.n	800810e <_strtod_l+0x42e>
 80081dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80081e0:	428b      	cmp	r3, r1
 80081e2:	bf86      	itte	hi
 80081e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008278 <_strtod_l+0x598>
 80081e8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80081ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80081f0:	2300      	movs	r3, #0
 80081f2:	9308      	str	r3, [sp, #32]
 80081f4:	e07a      	b.n	80082ec <_strtod_l+0x60c>
 80081f6:	07e2      	lsls	r2, r4, #31
 80081f8:	d505      	bpl.n	8008206 <_strtod_l+0x526>
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f8 fa02 	bl	8000608 <__aeabi_dmul>
 8008204:	2301      	movs	r3, #1
 8008206:	9a08      	ldr	r2, [sp, #32]
 8008208:	3208      	adds	r2, #8
 800820a:	3601      	adds	r6, #1
 800820c:	1064      	asrs	r4, r4, #1
 800820e:	9208      	str	r2, [sp, #32]
 8008210:	e7cd      	b.n	80081ae <_strtod_l+0x4ce>
 8008212:	d0ed      	beq.n	80081f0 <_strtod_l+0x510>
 8008214:	4264      	negs	r4, r4
 8008216:	f014 020f 	ands.w	r2, r4, #15
 800821a:	d00a      	beq.n	8008232 <_strtod_l+0x552>
 800821c:	4b13      	ldr	r3, [pc, #76]	@ (800826c <_strtod_l+0x58c>)
 800821e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008222:	4650      	mov	r0, sl
 8008224:	4659      	mov	r1, fp
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 fb17 	bl	800085c <__aeabi_ddiv>
 800822e:	4682      	mov	sl, r0
 8008230:	468b      	mov	fp, r1
 8008232:	1124      	asrs	r4, r4, #4
 8008234:	d0dc      	beq.n	80081f0 <_strtod_l+0x510>
 8008236:	2c1f      	cmp	r4, #31
 8008238:	dd20      	ble.n	800827c <_strtod_l+0x59c>
 800823a:	2400      	movs	r4, #0
 800823c:	46a0      	mov	r8, r4
 800823e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008240:	46a1      	mov	r9, r4
 8008242:	9a05      	ldr	r2, [sp, #20]
 8008244:	2322      	movs	r3, #34	@ 0x22
 8008246:	f04f 0a00 	mov.w	sl, #0
 800824a:	f04f 0b00 	mov.w	fp, #0
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	e768      	b.n	8008124 <_strtod_l+0x444>
 8008252:	bf00      	nop
 8008254:	08009b8c 	.word	0x08009b8c
 8008258:	08009da4 	.word	0x08009da4
 800825c:	08009b84 	.word	0x08009b84
 8008260:	08009bbb 	.word	0x08009bbb
 8008264:	7ff00000 	.word	0x7ff00000
 8008268:	08009f4d 	.word	0x08009f4d
 800826c:	08009cd8 	.word	0x08009cd8
 8008270:	08009cb0 	.word	0x08009cb0
 8008274:	7ca00000 	.word	0x7ca00000
 8008278:	7fefffff 	.word	0x7fefffff
 800827c:	f014 0310 	ands.w	r3, r4, #16
 8008280:	bf18      	it	ne
 8008282:	236a      	movne	r3, #106	@ 0x6a
 8008284:	4e77      	ldr	r6, [pc, #476]	@ (8008464 <_strtod_l+0x784>)
 8008286:	9308      	str	r3, [sp, #32]
 8008288:	4650      	mov	r0, sl
 800828a:	4659      	mov	r1, fp
 800828c:	2300      	movs	r3, #0
 800828e:	07e2      	lsls	r2, r4, #31
 8008290:	d504      	bpl.n	800829c <_strtod_l+0x5bc>
 8008292:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008296:	f7f8 f9b7 	bl	8000608 <__aeabi_dmul>
 800829a:	2301      	movs	r3, #1
 800829c:	1064      	asrs	r4, r4, #1
 800829e:	f106 0608 	add.w	r6, r6, #8
 80082a2:	d1f4      	bne.n	800828e <_strtod_l+0x5ae>
 80082a4:	b10b      	cbz	r3, 80082aa <_strtod_l+0x5ca>
 80082a6:	4682      	mov	sl, r0
 80082a8:	468b      	mov	fp, r1
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	b1b3      	cbz	r3, 80082dc <_strtod_l+0x5fc>
 80082ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	4659      	mov	r1, fp
 80082ba:	dd0f      	ble.n	80082dc <_strtod_l+0x5fc>
 80082bc:	2b1f      	cmp	r3, #31
 80082be:	dd57      	ble.n	8008370 <_strtod_l+0x690>
 80082c0:	2b34      	cmp	r3, #52	@ 0x34
 80082c2:	bfde      	ittt	le
 80082c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80082c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80082cc:	4093      	lslle	r3, r2
 80082ce:	f04f 0a00 	mov.w	sl, #0
 80082d2:	bfcc      	ite	gt
 80082d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80082d8:	ea03 0b01 	andle.w	fp, r3, r1
 80082dc:	2200      	movs	r2, #0
 80082de:	2300      	movs	r3, #0
 80082e0:	4650      	mov	r0, sl
 80082e2:	4659      	mov	r1, fp
 80082e4:	f7f8 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d1a6      	bne.n	800823a <_strtod_l+0x55a>
 80082ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80082f2:	9805      	ldr	r0, [sp, #20]
 80082f4:	462b      	mov	r3, r5
 80082f6:	463a      	mov	r2, r7
 80082f8:	f7ff f8ce 	bl	8007498 <__s2b>
 80082fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f af05 	beq.w	800810e <_strtod_l+0x42e>
 8008304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008306:	2a00      	cmp	r2, #0
 8008308:	eba9 0308 	sub.w	r3, r9, r8
 800830c:	bfa8      	it	ge
 800830e:	2300      	movge	r3, #0
 8008310:	9312      	str	r3, [sp, #72]	@ 0x48
 8008312:	2400      	movs	r4, #0
 8008314:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008318:	9316      	str	r3, [sp, #88]	@ 0x58
 800831a:	46a0      	mov	r8, r4
 800831c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800831e:	9805      	ldr	r0, [sp, #20]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	f7ff f811 	bl	8007348 <_Balloc>
 8008326:	4681      	mov	r9, r0
 8008328:	2800      	cmp	r0, #0
 800832a:	f43f aef4 	beq.w	8008116 <_strtod_l+0x436>
 800832e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	3202      	adds	r2, #2
 8008334:	f103 010c 	add.w	r1, r3, #12
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	300c      	adds	r0, #12
 800833c:	f000 fd62 	bl	8008e04 <memcpy>
 8008340:	ab1c      	add	r3, sp, #112	@ 0x70
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	9805      	ldr	r0, [sp, #20]
 800834a:	4652      	mov	r2, sl
 800834c:	465b      	mov	r3, fp
 800834e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008352:	f7ff fbd5 	bl	8007b00 <__d2b>
 8008356:	901a      	str	r0, [sp, #104]	@ 0x68
 8008358:	2800      	cmp	r0, #0
 800835a:	f43f aedc 	beq.w	8008116 <_strtod_l+0x436>
 800835e:	9805      	ldr	r0, [sp, #20]
 8008360:	2101      	movs	r1, #1
 8008362:	f7ff f92f 	bl	80075c4 <__i2b>
 8008366:	4680      	mov	r8, r0
 8008368:	b948      	cbnz	r0, 800837e <_strtod_l+0x69e>
 800836a:	f04f 0800 	mov.w	r8, #0
 800836e:	e6d2      	b.n	8008116 <_strtod_l+0x436>
 8008370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	ea03 0a0a 	and.w	sl, r3, sl
 800837c:	e7ae      	b.n	80082dc <_strtod_l+0x5fc>
 800837e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008380:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008382:	2d00      	cmp	r5, #0
 8008384:	bfab      	itete	ge
 8008386:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008388:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800838a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800838c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800838e:	bfac      	ite	ge
 8008390:	18ef      	addge	r7, r5, r3
 8008392:	1b5e      	sublt	r6, r3, r5
 8008394:	9b08      	ldr	r3, [sp, #32]
 8008396:	1aed      	subs	r5, r5, r3
 8008398:	4415      	add	r5, r2
 800839a:	4b33      	ldr	r3, [pc, #204]	@ (8008468 <_strtod_l+0x788>)
 800839c:	3d01      	subs	r5, #1
 800839e:	429d      	cmp	r5, r3
 80083a0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80083a4:	da50      	bge.n	8008448 <_strtod_l+0x768>
 80083a6:	1b5b      	subs	r3, r3, r5
 80083a8:	2b1f      	cmp	r3, #31
 80083aa:	eba2 0203 	sub.w	r2, r2, r3
 80083ae:	f04f 0101 	mov.w	r1, #1
 80083b2:	dc3d      	bgt.n	8008430 <_strtod_l+0x750>
 80083b4:	fa01 f303 	lsl.w	r3, r1, r3
 80083b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083ba:	2300      	movs	r3, #0
 80083bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80083be:	18bd      	adds	r5, r7, r2
 80083c0:	9b08      	ldr	r3, [sp, #32]
 80083c2:	42af      	cmp	r7, r5
 80083c4:	4416      	add	r6, r2
 80083c6:	441e      	add	r6, r3
 80083c8:	463b      	mov	r3, r7
 80083ca:	bfa8      	it	ge
 80083cc:	462b      	movge	r3, r5
 80083ce:	42b3      	cmp	r3, r6
 80083d0:	bfa8      	it	ge
 80083d2:	4633      	movge	r3, r6
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfc2      	ittt	gt
 80083d8:	1aed      	subgt	r5, r5, r3
 80083da:	1af6      	subgt	r6, r6, r3
 80083dc:	1aff      	subgt	r7, r7, r3
 80083de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd16      	ble.n	8008412 <_strtod_l+0x732>
 80083e4:	4641      	mov	r1, r8
 80083e6:	9805      	ldr	r0, [sp, #20]
 80083e8:	461a      	mov	r2, r3
 80083ea:	f7ff f9ab 	bl	8007744 <__pow5mult>
 80083ee:	4680      	mov	r8, r0
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d0ba      	beq.n	800836a <_strtod_l+0x68a>
 80083f4:	4601      	mov	r1, r0
 80083f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083f8:	9805      	ldr	r0, [sp, #20]
 80083fa:	f7ff f8f9 	bl	80075f0 <__multiply>
 80083fe:	900e      	str	r0, [sp, #56]	@ 0x38
 8008400:	2800      	cmp	r0, #0
 8008402:	f43f ae88 	beq.w	8008116 <_strtod_l+0x436>
 8008406:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008408:	9805      	ldr	r0, [sp, #20]
 800840a:	f7fe ffdd 	bl	80073c8 <_Bfree>
 800840e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008410:	931a      	str	r3, [sp, #104]	@ 0x68
 8008412:	2d00      	cmp	r5, #0
 8008414:	dc1d      	bgt.n	8008452 <_strtod_l+0x772>
 8008416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	dd27      	ble.n	800846c <_strtod_l+0x78c>
 800841c:	4649      	mov	r1, r9
 800841e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008420:	9805      	ldr	r0, [sp, #20]
 8008422:	f7ff f98f 	bl	8007744 <__pow5mult>
 8008426:	4681      	mov	r9, r0
 8008428:	bb00      	cbnz	r0, 800846c <_strtod_l+0x78c>
 800842a:	f04f 0900 	mov.w	r9, #0
 800842e:	e672      	b.n	8008116 <_strtod_l+0x436>
 8008430:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008434:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008438:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800843c:	35e2      	adds	r5, #226	@ 0xe2
 800843e:	fa01 f305 	lsl.w	r3, r1, r5
 8008442:	9310      	str	r3, [sp, #64]	@ 0x40
 8008444:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008446:	e7ba      	b.n	80083be <_strtod_l+0x6de>
 8008448:	2300      	movs	r3, #0
 800844a:	9310      	str	r3, [sp, #64]	@ 0x40
 800844c:	2301      	movs	r3, #1
 800844e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008450:	e7b5      	b.n	80083be <_strtod_l+0x6de>
 8008452:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008454:	9805      	ldr	r0, [sp, #20]
 8008456:	462a      	mov	r2, r5
 8008458:	f7ff f9ce 	bl	80077f8 <__lshift>
 800845c:	901a      	str	r0, [sp, #104]	@ 0x68
 800845e:	2800      	cmp	r0, #0
 8008460:	d1d9      	bne.n	8008416 <_strtod_l+0x736>
 8008462:	e658      	b.n	8008116 <_strtod_l+0x436>
 8008464:	08009dd0 	.word	0x08009dd0
 8008468:	fffffc02 	.word	0xfffffc02
 800846c:	2e00      	cmp	r6, #0
 800846e:	dd07      	ble.n	8008480 <_strtod_l+0x7a0>
 8008470:	4649      	mov	r1, r9
 8008472:	9805      	ldr	r0, [sp, #20]
 8008474:	4632      	mov	r2, r6
 8008476:	f7ff f9bf 	bl	80077f8 <__lshift>
 800847a:	4681      	mov	r9, r0
 800847c:	2800      	cmp	r0, #0
 800847e:	d0d4      	beq.n	800842a <_strtod_l+0x74a>
 8008480:	2f00      	cmp	r7, #0
 8008482:	dd08      	ble.n	8008496 <_strtod_l+0x7b6>
 8008484:	4641      	mov	r1, r8
 8008486:	9805      	ldr	r0, [sp, #20]
 8008488:	463a      	mov	r2, r7
 800848a:	f7ff f9b5 	bl	80077f8 <__lshift>
 800848e:	4680      	mov	r8, r0
 8008490:	2800      	cmp	r0, #0
 8008492:	f43f ae40 	beq.w	8008116 <_strtod_l+0x436>
 8008496:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008498:	9805      	ldr	r0, [sp, #20]
 800849a:	464a      	mov	r2, r9
 800849c:	f7ff fa34 	bl	8007908 <__mdiff>
 80084a0:	4604      	mov	r4, r0
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f43f ae37 	beq.w	8008116 <_strtod_l+0x436>
 80084a8:	68c3      	ldr	r3, [r0, #12]
 80084aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084ac:	2300      	movs	r3, #0
 80084ae:	60c3      	str	r3, [r0, #12]
 80084b0:	4641      	mov	r1, r8
 80084b2:	f7ff fa0d 	bl	80078d0 <__mcmp>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	da3d      	bge.n	8008536 <_strtod_l+0x856>
 80084ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084bc:	ea53 030a 	orrs.w	r3, r3, sl
 80084c0:	d163      	bne.n	800858a <_strtod_l+0x8aa>
 80084c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d15f      	bne.n	800858a <_strtod_l+0x8aa>
 80084ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084ce:	0d1b      	lsrs	r3, r3, #20
 80084d0:	051b      	lsls	r3, r3, #20
 80084d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80084d6:	d958      	bls.n	800858a <_strtod_l+0x8aa>
 80084d8:	6963      	ldr	r3, [r4, #20]
 80084da:	b913      	cbnz	r3, 80084e2 <_strtod_l+0x802>
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	dd53      	ble.n	800858a <_strtod_l+0x8aa>
 80084e2:	4621      	mov	r1, r4
 80084e4:	2201      	movs	r2, #1
 80084e6:	9805      	ldr	r0, [sp, #20]
 80084e8:	f7ff f986 	bl	80077f8 <__lshift>
 80084ec:	4641      	mov	r1, r8
 80084ee:	4604      	mov	r4, r0
 80084f0:	f7ff f9ee 	bl	80078d0 <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dd48      	ble.n	800858a <_strtod_l+0x8aa>
 80084f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084fc:	9a08      	ldr	r2, [sp, #32]
 80084fe:	0d1b      	lsrs	r3, r3, #20
 8008500:	051b      	lsls	r3, r3, #20
 8008502:	2a00      	cmp	r2, #0
 8008504:	d062      	beq.n	80085cc <_strtod_l+0x8ec>
 8008506:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800850a:	d85f      	bhi.n	80085cc <_strtod_l+0x8ec>
 800850c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008510:	f67f ae97 	bls.w	8008242 <_strtod_l+0x562>
 8008514:	4ba4      	ldr	r3, [pc, #656]	@ (80087a8 <_strtod_l+0xac8>)
 8008516:	4650      	mov	r0, sl
 8008518:	4659      	mov	r1, fp
 800851a:	2200      	movs	r2, #0
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	4ba2      	ldr	r3, [pc, #648]	@ (80087ac <_strtod_l+0xacc>)
 8008522:	400b      	ands	r3, r1
 8008524:	4682      	mov	sl, r0
 8008526:	468b      	mov	fp, r1
 8008528:	2b00      	cmp	r3, #0
 800852a:	f47f adff 	bne.w	800812c <_strtod_l+0x44c>
 800852e:	9a05      	ldr	r2, [sp, #20]
 8008530:	2322      	movs	r3, #34	@ 0x22
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	e5fa      	b.n	800812c <_strtod_l+0x44c>
 8008536:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800853a:	d165      	bne.n	8008608 <_strtod_l+0x928>
 800853c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800853e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008542:	b35a      	cbz	r2, 800859c <_strtod_l+0x8bc>
 8008544:	4a9a      	ldr	r2, [pc, #616]	@ (80087b0 <_strtod_l+0xad0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d12b      	bne.n	80085a2 <_strtod_l+0x8c2>
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	4651      	mov	r1, sl
 800854e:	b303      	cbz	r3, 8008592 <_strtod_l+0x8b2>
 8008550:	4b96      	ldr	r3, [pc, #600]	@ (80087ac <_strtod_l+0xacc>)
 8008552:	465a      	mov	r2, fp
 8008554:	4013      	ands	r3, r2
 8008556:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800855a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800855e:	d81b      	bhi.n	8008598 <_strtod_l+0x8b8>
 8008560:	0d1b      	lsrs	r3, r3, #20
 8008562:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	4299      	cmp	r1, r3
 800856c:	d119      	bne.n	80085a2 <_strtod_l+0x8c2>
 800856e:	4b91      	ldr	r3, [pc, #580]	@ (80087b4 <_strtod_l+0xad4>)
 8008570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008572:	429a      	cmp	r2, r3
 8008574:	d102      	bne.n	800857c <_strtod_l+0x89c>
 8008576:	3101      	adds	r1, #1
 8008578:	f43f adcd 	beq.w	8008116 <_strtod_l+0x436>
 800857c:	4b8b      	ldr	r3, [pc, #556]	@ (80087ac <_strtod_l+0xacc>)
 800857e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008580:	401a      	ands	r2, r3
 8008582:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008586:	f04f 0a00 	mov.w	sl, #0
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1c1      	bne.n	8008514 <_strtod_l+0x834>
 8008590:	e5cc      	b.n	800812c <_strtod_l+0x44c>
 8008592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008596:	e7e8      	b.n	800856a <_strtod_l+0x88a>
 8008598:	4613      	mov	r3, r2
 800859a:	e7e6      	b.n	800856a <_strtod_l+0x88a>
 800859c:	ea53 030a 	orrs.w	r3, r3, sl
 80085a0:	d0aa      	beq.n	80084f8 <_strtod_l+0x818>
 80085a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085a4:	b1db      	cbz	r3, 80085de <_strtod_l+0x8fe>
 80085a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085a8:	4213      	tst	r3, r2
 80085aa:	d0ee      	beq.n	800858a <_strtod_l+0x8aa>
 80085ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ae:	9a08      	ldr	r2, [sp, #32]
 80085b0:	4650      	mov	r0, sl
 80085b2:	4659      	mov	r1, fp
 80085b4:	b1bb      	cbz	r3, 80085e6 <_strtod_l+0x906>
 80085b6:	f7ff fb6f 	bl	8007c98 <sulp>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085c2:	f7f7 fe6b 	bl	800029c <__adddf3>
 80085c6:	4682      	mov	sl, r0
 80085c8:	468b      	mov	fp, r1
 80085ca:	e7de      	b.n	800858a <_strtod_l+0x8aa>
 80085cc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80085d0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085d4:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085d8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80085dc:	e7d5      	b.n	800858a <_strtod_l+0x8aa>
 80085de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085e0:	ea13 0f0a 	tst.w	r3, sl
 80085e4:	e7e1      	b.n	80085aa <_strtod_l+0x8ca>
 80085e6:	f7ff fb57 	bl	8007c98 <sulp>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085f2:	f7f7 fe51 	bl	8000298 <__aeabi_dsub>
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4682      	mov	sl, r0
 80085fc:	468b      	mov	fp, r1
 80085fe:	f7f8 fa6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008602:	2800      	cmp	r0, #0
 8008604:	d0c1      	beq.n	800858a <_strtod_l+0x8aa>
 8008606:	e61c      	b.n	8008242 <_strtod_l+0x562>
 8008608:	4641      	mov	r1, r8
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff fad0 	bl	8007bb0 <__ratio>
 8008610:	2200      	movs	r2, #0
 8008612:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	f7f8 fa71 	bl	8000b00 <__aeabi_dcmple>
 800861e:	2800      	cmp	r0, #0
 8008620:	d06d      	beq.n	80086fe <_strtod_l+0xa1e>
 8008622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d178      	bne.n	800871a <_strtod_l+0xa3a>
 8008628:	f1ba 0f00 	cmp.w	sl, #0
 800862c:	d156      	bne.n	80086dc <_strtod_l+0x9fc>
 800862e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008634:	2b00      	cmp	r3, #0
 8008636:	d158      	bne.n	80086ea <_strtod_l+0xa0a>
 8008638:	4b5f      	ldr	r3, [pc, #380]	@ (80087b8 <_strtod_l+0xad8>)
 800863a:	2200      	movs	r2, #0
 800863c:	4630      	mov	r0, r6
 800863e:	4639      	mov	r1, r7
 8008640:	f7f8 fa54 	bl	8000aec <__aeabi_dcmplt>
 8008644:	2800      	cmp	r0, #0
 8008646:	d157      	bne.n	80086f8 <_strtod_l+0xa18>
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	4b5b      	ldr	r3, [pc, #364]	@ (80087bc <_strtod_l+0xadc>)
 800864e:	2200      	movs	r2, #0
 8008650:	f7f7 ffda 	bl	8000608 <__aeabi_dmul>
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800865c:	9606      	str	r6, [sp, #24]
 800865e:	9307      	str	r3, [sp, #28]
 8008660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008664:	4d51      	ldr	r5, [pc, #324]	@ (80087ac <_strtod_l+0xacc>)
 8008666:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800866a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800866c:	401d      	ands	r5, r3
 800866e:	4b54      	ldr	r3, [pc, #336]	@ (80087c0 <_strtod_l+0xae0>)
 8008670:	429d      	cmp	r5, r3
 8008672:	f040 80ab 	bne.w	80087cc <_strtod_l+0xaec>
 8008676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008678:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800867c:	4650      	mov	r0, sl
 800867e:	4659      	mov	r1, fp
 8008680:	f7ff f9d4 	bl	8007a2c <__ulp>
 8008684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008688:	f7f7 ffbe 	bl	8000608 <__aeabi_dmul>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	f7f7 fe04 	bl	800029c <__adddf3>
 8008694:	460b      	mov	r3, r1
 8008696:	4945      	ldr	r1, [pc, #276]	@ (80087ac <_strtod_l+0xacc>)
 8008698:	4a4a      	ldr	r2, [pc, #296]	@ (80087c4 <_strtod_l+0xae4>)
 800869a:	4019      	ands	r1, r3
 800869c:	4291      	cmp	r1, r2
 800869e:	4682      	mov	sl, r0
 80086a0:	d942      	bls.n	8008728 <_strtod_l+0xa48>
 80086a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086a4:	4b43      	ldr	r3, [pc, #268]	@ (80087b4 <_strtod_l+0xad4>)
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d103      	bne.n	80086b2 <_strtod_l+0x9d2>
 80086aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086ac:	3301      	adds	r3, #1
 80086ae:	f43f ad32 	beq.w	8008116 <_strtod_l+0x436>
 80086b2:	f8df b100 	ldr.w	fp, [pc, #256]	@ 80087b4 <_strtod_l+0xad4>
 80086b6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80086ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086bc:	9805      	ldr	r0, [sp, #20]
 80086be:	f7fe fe83 	bl	80073c8 <_Bfree>
 80086c2:	9805      	ldr	r0, [sp, #20]
 80086c4:	4649      	mov	r1, r9
 80086c6:	f7fe fe7f 	bl	80073c8 <_Bfree>
 80086ca:	9805      	ldr	r0, [sp, #20]
 80086cc:	4641      	mov	r1, r8
 80086ce:	f7fe fe7b 	bl	80073c8 <_Bfree>
 80086d2:	9805      	ldr	r0, [sp, #20]
 80086d4:	4621      	mov	r1, r4
 80086d6:	f7fe fe77 	bl	80073c8 <_Bfree>
 80086da:	e61f      	b.n	800831c <_strtod_l+0x63c>
 80086dc:	f1ba 0f01 	cmp.w	sl, #1
 80086e0:	d103      	bne.n	80086ea <_strtod_l+0xa0a>
 80086e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f43f adac 	beq.w	8008242 <_strtod_l+0x562>
 80086ea:	4b37      	ldr	r3, [pc, #220]	@ (80087c8 <_strtod_l+0xae8>)
 80086ec:	4f32      	ldr	r7, [pc, #200]	@ (80087b8 <_strtod_l+0xad8>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086f4:	2600      	movs	r6, #0
 80086f6:	e7b3      	b.n	8008660 <_strtod_l+0x980>
 80086f8:	4f30      	ldr	r7, [pc, #192]	@ (80087bc <_strtod_l+0xadc>)
 80086fa:	2600      	movs	r6, #0
 80086fc:	e7ac      	b.n	8008658 <_strtod_l+0x978>
 80086fe:	4b2f      	ldr	r3, [pc, #188]	@ (80087bc <_strtod_l+0xadc>)
 8008700:	4630      	mov	r0, r6
 8008702:	4639      	mov	r1, r7
 8008704:	2200      	movs	r2, #0
 8008706:	f7f7 ff7f 	bl	8000608 <__aeabi_dmul>
 800870a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0a1      	beq.n	8008658 <_strtod_l+0x978>
 8008714:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008718:	e7a2      	b.n	8008660 <_strtod_l+0x980>
 800871a:	4b27      	ldr	r3, [pc, #156]	@ (80087b8 <_strtod_l+0xad8>)
 800871c:	2200      	movs	r2, #0
 800871e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008722:	4616      	mov	r6, r2
 8008724:	461f      	mov	r7, r3
 8008726:	e79b      	b.n	8008660 <_strtod_l+0x980>
 8008728:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800872c:	9b08      	ldr	r3, [sp, #32]
 800872e:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1c1      	bne.n	80086ba <_strtod_l+0x9da>
 8008736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800873a:	0d1b      	lsrs	r3, r3, #20
 800873c:	051b      	lsls	r3, r3, #20
 800873e:	429d      	cmp	r5, r3
 8008740:	d1bb      	bne.n	80086ba <_strtod_l+0x9da>
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f8 faa7 	bl	8000c98 <__aeabi_d2lz>
 800874a:	f7f7 ff2f 	bl	80005ac <__aeabi_l2d>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f7 fd9f 	bl	8000298 <__aeabi_dsub>
 800875a:	460b      	mov	r3, r1
 800875c:	4602      	mov	r2, r0
 800875e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008762:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008768:	ea46 060a 	orr.w	r6, r6, sl
 800876c:	431e      	orrs	r6, r3
 800876e:	d06a      	beq.n	8008846 <_strtod_l+0xb66>
 8008770:	a309      	add	r3, pc, #36	@ (adr r3, 8008798 <_strtod_l+0xab8>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f8 f9b9 	bl	8000aec <__aeabi_dcmplt>
 800877a:	2800      	cmp	r0, #0
 800877c:	f47f acd6 	bne.w	800812c <_strtod_l+0x44c>
 8008780:	a307      	add	r3, pc, #28	@ (adr r3, 80087a0 <_strtod_l+0xac0>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800878a:	f7f8 f9cd 	bl	8000b28 <__aeabi_dcmpgt>
 800878e:	2800      	cmp	r0, #0
 8008790:	d093      	beq.n	80086ba <_strtod_l+0x9da>
 8008792:	e4cb      	b.n	800812c <_strtod_l+0x44c>
 8008794:	f3af 8000 	nop.w
 8008798:	94a03595 	.word	0x94a03595
 800879c:	3fdfffff 	.word	0x3fdfffff
 80087a0:	35afe535 	.word	0x35afe535
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	39500000 	.word	0x39500000
 80087ac:	7ff00000 	.word	0x7ff00000
 80087b0:	000fffff 	.word	0x000fffff
 80087b4:	7fefffff 	.word	0x7fefffff
 80087b8:	3ff00000 	.word	0x3ff00000
 80087bc:	3fe00000 	.word	0x3fe00000
 80087c0:	7fe00000 	.word	0x7fe00000
 80087c4:	7c9fffff 	.word	0x7c9fffff
 80087c8:	bff00000 	.word	0xbff00000
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	b323      	cbz	r3, 800881a <_strtod_l+0xb3a>
 80087d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80087d4:	d821      	bhi.n	800881a <_strtod_l+0xb3a>
 80087d6:	a328      	add	r3, pc, #160	@ (adr r3, 8008878 <_strtod_l+0xb98>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f8 f98e 	bl	8000b00 <__aeabi_dcmple>
 80087e4:	b1a0      	cbz	r0, 8008810 <_strtod_l+0xb30>
 80087e6:	4639      	mov	r1, r7
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7f8 f9e5 	bl	8000bb8 <__aeabi_d2uiz>
 80087ee:	2801      	cmp	r0, #1
 80087f0:	bf38      	it	cc
 80087f2:	2001      	movcc	r0, #1
 80087f4:	f7f7 fe8e 	bl	8000514 <__aeabi_ui2d>
 80087f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087fa:	4606      	mov	r6, r0
 80087fc:	460f      	mov	r7, r1
 80087fe:	b9fb      	cbnz	r3, 8008840 <_strtod_l+0xb60>
 8008800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008804:	9014      	str	r0, [sp, #80]	@ 0x50
 8008806:	9315      	str	r3, [sp, #84]	@ 0x54
 8008808:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800880c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008810:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008812:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008816:	1b5b      	subs	r3, r3, r5
 8008818:	9311      	str	r3, [sp, #68]	@ 0x44
 800881a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800881e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008822:	f7ff f903 	bl	8007a2c <__ulp>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f7 feeb 	bl	8000608 <__aeabi_dmul>
 8008832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008836:	f7f7 fd31 	bl	800029c <__adddf3>
 800883a:	4682      	mov	sl, r0
 800883c:	468b      	mov	fp, r1
 800883e:	e775      	b.n	800872c <_strtod_l+0xa4c>
 8008840:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008844:	e7e0      	b.n	8008808 <_strtod_l+0xb28>
 8008846:	a30e      	add	r3, pc, #56	@ (adr r3, 8008880 <_strtod_l+0xba0>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f8 f94e 	bl	8000aec <__aeabi_dcmplt>
 8008850:	e79d      	b.n	800878e <_strtod_l+0xaae>
 8008852:	2300      	movs	r3, #0
 8008854:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008856:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008858:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	f7ff ba7d 	b.w	8007d5a <_strtod_l+0x7a>
 8008860:	2a65      	cmp	r2, #101	@ 0x65
 8008862:	f43f ab74 	beq.w	8007f4e <_strtod_l+0x26e>
 8008866:	2a45      	cmp	r2, #69	@ 0x45
 8008868:	f43f ab71 	beq.w	8007f4e <_strtod_l+0x26e>
 800886c:	2301      	movs	r3, #1
 800886e:	f7ff bbac 	b.w	8007fca <_strtod_l+0x2ea>
 8008872:	bf00      	nop
 8008874:	f3af 8000 	nop.w
 8008878:	ffc00000 	.word	0xffc00000
 800887c:	41dfffff 	.word	0x41dfffff
 8008880:	94a03595 	.word	0x94a03595
 8008884:	3fcfffff 	.word	0x3fcfffff

08008888 <_strtod_r>:
 8008888:	4b01      	ldr	r3, [pc, #4]	@ (8008890 <_strtod_r+0x8>)
 800888a:	f7ff ba29 	b.w	8007ce0 <_strtod_l>
 800888e:	bf00      	nop
 8008890:	2000005c 	.word	0x2000005c

08008894 <_strtol_l.constprop.0>:
 8008894:	2b24      	cmp	r3, #36	@ 0x24
 8008896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889a:	4686      	mov	lr, r0
 800889c:	4690      	mov	r8, r2
 800889e:	d801      	bhi.n	80088a4 <_strtol_l.constprop.0+0x10>
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d106      	bne.n	80088b2 <_strtol_l.constprop.0+0x1e>
 80088a4:	f7fd fdce 	bl	8006444 <__errno>
 80088a8:	2316      	movs	r3, #22
 80088aa:	6003      	str	r3, [r0, #0]
 80088ac:	2000      	movs	r0, #0
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	4834      	ldr	r0, [pc, #208]	@ (8008984 <_strtol_l.constprop.0+0xf0>)
 80088b4:	460d      	mov	r5, r1
 80088b6:	462a      	mov	r2, r5
 80088b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088bc:	5d06      	ldrb	r6, [r0, r4]
 80088be:	f016 0608 	ands.w	r6, r6, #8
 80088c2:	d1f8      	bne.n	80088b6 <_strtol_l.constprop.0+0x22>
 80088c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80088c6:	d12d      	bne.n	8008924 <_strtol_l.constprop.0+0x90>
 80088c8:	782c      	ldrb	r4, [r5, #0]
 80088ca:	2601      	movs	r6, #1
 80088cc:	1c95      	adds	r5, r2, #2
 80088ce:	f033 0210 	bics.w	r2, r3, #16
 80088d2:	d109      	bne.n	80088e8 <_strtol_l.constprop.0+0x54>
 80088d4:	2c30      	cmp	r4, #48	@ 0x30
 80088d6:	d12a      	bne.n	800892e <_strtol_l.constprop.0+0x9a>
 80088d8:	782a      	ldrb	r2, [r5, #0]
 80088da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088de:	2a58      	cmp	r2, #88	@ 0x58
 80088e0:	d125      	bne.n	800892e <_strtol_l.constprop.0+0x9a>
 80088e2:	786c      	ldrb	r4, [r5, #1]
 80088e4:	2310      	movs	r3, #16
 80088e6:	3502      	adds	r5, #2
 80088e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088ec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80088f0:	2200      	movs	r2, #0
 80088f2:	fbbc f9f3 	udiv	r9, ip, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80088fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008900:	2f09      	cmp	r7, #9
 8008902:	d81b      	bhi.n	800893c <_strtol_l.constprop.0+0xa8>
 8008904:	463c      	mov	r4, r7
 8008906:	42a3      	cmp	r3, r4
 8008908:	dd27      	ble.n	800895a <_strtol_l.constprop.0+0xc6>
 800890a:	1c57      	adds	r7, r2, #1
 800890c:	d007      	beq.n	800891e <_strtol_l.constprop.0+0x8a>
 800890e:	4581      	cmp	r9, r0
 8008910:	d320      	bcc.n	8008954 <_strtol_l.constprop.0+0xc0>
 8008912:	d101      	bne.n	8008918 <_strtol_l.constprop.0+0x84>
 8008914:	45a2      	cmp	sl, r4
 8008916:	db1d      	blt.n	8008954 <_strtol_l.constprop.0+0xc0>
 8008918:	fb00 4003 	mla	r0, r0, r3, r4
 800891c:	2201      	movs	r2, #1
 800891e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008922:	e7eb      	b.n	80088fc <_strtol_l.constprop.0+0x68>
 8008924:	2c2b      	cmp	r4, #43	@ 0x2b
 8008926:	bf04      	itt	eq
 8008928:	782c      	ldrbeq	r4, [r5, #0]
 800892a:	1c95      	addeq	r5, r2, #2
 800892c:	e7cf      	b.n	80088ce <_strtol_l.constprop.0+0x3a>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1da      	bne.n	80088e8 <_strtol_l.constprop.0+0x54>
 8008932:	2c30      	cmp	r4, #48	@ 0x30
 8008934:	bf0c      	ite	eq
 8008936:	2308      	moveq	r3, #8
 8008938:	230a      	movne	r3, #10
 800893a:	e7d5      	b.n	80088e8 <_strtol_l.constprop.0+0x54>
 800893c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008940:	2f19      	cmp	r7, #25
 8008942:	d801      	bhi.n	8008948 <_strtol_l.constprop.0+0xb4>
 8008944:	3c37      	subs	r4, #55	@ 0x37
 8008946:	e7de      	b.n	8008906 <_strtol_l.constprop.0+0x72>
 8008948:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800894c:	2f19      	cmp	r7, #25
 800894e:	d804      	bhi.n	800895a <_strtol_l.constprop.0+0xc6>
 8008950:	3c57      	subs	r4, #87	@ 0x57
 8008952:	e7d8      	b.n	8008906 <_strtol_l.constprop.0+0x72>
 8008954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008958:	e7e1      	b.n	800891e <_strtol_l.constprop.0+0x8a>
 800895a:	1c53      	adds	r3, r2, #1
 800895c:	d108      	bne.n	8008970 <_strtol_l.constprop.0+0xdc>
 800895e:	2322      	movs	r3, #34	@ 0x22
 8008960:	f8ce 3000 	str.w	r3, [lr]
 8008964:	4660      	mov	r0, ip
 8008966:	f1b8 0f00 	cmp.w	r8, #0
 800896a:	d0a0      	beq.n	80088ae <_strtol_l.constprop.0+0x1a>
 800896c:	1e69      	subs	r1, r5, #1
 800896e:	e006      	b.n	800897e <_strtol_l.constprop.0+0xea>
 8008970:	b106      	cbz	r6, 8008974 <_strtol_l.constprop.0+0xe0>
 8008972:	4240      	negs	r0, r0
 8008974:	f1b8 0f00 	cmp.w	r8, #0
 8008978:	d099      	beq.n	80088ae <_strtol_l.constprop.0+0x1a>
 800897a:	2a00      	cmp	r2, #0
 800897c:	d1f6      	bne.n	800896c <_strtol_l.constprop.0+0xd8>
 800897e:	f8c8 1000 	str.w	r1, [r8]
 8008982:	e794      	b.n	80088ae <_strtol_l.constprop.0+0x1a>
 8008984:	08009df9 	.word	0x08009df9

08008988 <_strtol_r>:
 8008988:	f7ff bf84 	b.w	8008894 <_strtol_l.constprop.0>

0800898c <__ssputs_r>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	688e      	ldr	r6, [r1, #8]
 8008992:	461f      	mov	r7, r3
 8008994:	42be      	cmp	r6, r7
 8008996:	680b      	ldr	r3, [r1, #0]
 8008998:	4682      	mov	sl, r0
 800899a:	460c      	mov	r4, r1
 800899c:	4690      	mov	r8, r2
 800899e:	d82d      	bhi.n	80089fc <__ssputs_r+0x70>
 80089a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089a8:	d026      	beq.n	80089f8 <__ssputs_r+0x6c>
 80089aa:	6965      	ldr	r5, [r4, #20]
 80089ac:	6909      	ldr	r1, [r1, #16]
 80089ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b2:	eba3 0901 	sub.w	r9, r3, r1
 80089b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089ba:	1c7b      	adds	r3, r7, #1
 80089bc:	444b      	add	r3, r9
 80089be:	106d      	asrs	r5, r5, #1
 80089c0:	429d      	cmp	r5, r3
 80089c2:	bf38      	it	cc
 80089c4:	461d      	movcc	r5, r3
 80089c6:	0553      	lsls	r3, r2, #21
 80089c8:	d527      	bpl.n	8008a1a <__ssputs_r+0x8e>
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7fe fc30 	bl	8007230 <_malloc_r>
 80089d0:	4606      	mov	r6, r0
 80089d2:	b360      	cbz	r0, 8008a2e <__ssputs_r+0xa2>
 80089d4:	6921      	ldr	r1, [r4, #16]
 80089d6:	464a      	mov	r2, r9
 80089d8:	f000 fa14 	bl	8008e04 <memcpy>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	6126      	str	r6, [r4, #16]
 80089ea:	6165      	str	r5, [r4, #20]
 80089ec:	444e      	add	r6, r9
 80089ee:	eba5 0509 	sub.w	r5, r5, r9
 80089f2:	6026      	str	r6, [r4, #0]
 80089f4:	60a5      	str	r5, [r4, #8]
 80089f6:	463e      	mov	r6, r7
 80089f8:	42be      	cmp	r6, r7
 80089fa:	d900      	bls.n	80089fe <__ssputs_r+0x72>
 80089fc:	463e      	mov	r6, r7
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	4632      	mov	r2, r6
 8008a02:	4641      	mov	r1, r8
 8008a04:	f000 f9c2 	bl	8008d8c <memmove>
 8008a08:	68a3      	ldr	r3, [r4, #8]
 8008a0a:	1b9b      	subs	r3, r3, r6
 8008a0c:	60a3      	str	r3, [r4, #8]
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	4433      	add	r3, r6
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	2000      	movs	r0, #0
 8008a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	f000 fd83 	bl	8009526 <_realloc_r>
 8008a20:	4606      	mov	r6, r0
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d1e0      	bne.n	80089e8 <__ssputs_r+0x5c>
 8008a26:	6921      	ldr	r1, [r4, #16]
 8008a28:	4650      	mov	r0, sl
 8008a2a:	f7fe fb8d 	bl	8007148 <_free_r>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	f8ca 3000 	str.w	r3, [sl]
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a40:	e7e9      	b.n	8008a16 <__ssputs_r+0x8a>
	...

08008a44 <_svfiprintf_r>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4698      	mov	r8, r3
 8008a4a:	898b      	ldrh	r3, [r1, #12]
 8008a4c:	061b      	lsls	r3, r3, #24
 8008a4e:	b09d      	sub	sp, #116	@ 0x74
 8008a50:	4607      	mov	r7, r0
 8008a52:	460d      	mov	r5, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	d510      	bpl.n	8008a7a <_svfiprintf_r+0x36>
 8008a58:	690b      	ldr	r3, [r1, #16]
 8008a5a:	b973      	cbnz	r3, 8008a7a <_svfiprintf_r+0x36>
 8008a5c:	2140      	movs	r1, #64	@ 0x40
 8008a5e:	f7fe fbe7 	bl	8007230 <_malloc_r>
 8008a62:	6028      	str	r0, [r5, #0]
 8008a64:	6128      	str	r0, [r5, #16]
 8008a66:	b930      	cbnz	r0, 8008a76 <_svfiprintf_r+0x32>
 8008a68:	230c      	movs	r3, #12
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a70:	b01d      	add	sp, #116	@ 0x74
 8008a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a76:	2340      	movs	r3, #64	@ 0x40
 8008a78:	616b      	str	r3, [r5, #20]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a7e:	2320      	movs	r3, #32
 8008a80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a88:	2330      	movs	r3, #48	@ 0x30
 8008a8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c28 <_svfiprintf_r+0x1e4>
 8008a8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a92:	f04f 0901 	mov.w	r9, #1
 8008a96:	4623      	mov	r3, r4
 8008a98:	469a      	mov	sl, r3
 8008a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9e:	b10a      	cbz	r2, 8008aa4 <_svfiprintf_r+0x60>
 8008aa0:	2a25      	cmp	r2, #37	@ 0x25
 8008aa2:	d1f9      	bne.n	8008a98 <_svfiprintf_r+0x54>
 8008aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa8:	d00b      	beq.n	8008ac2 <_svfiprintf_r+0x7e>
 8008aaa:	465b      	mov	r3, fp
 8008aac:	4622      	mov	r2, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff ff6b 	bl	800898c <__ssputs_r>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f000 80a7 	beq.w	8008c0a <_svfiprintf_r+0x1c6>
 8008abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008abe:	445a      	add	r2, fp
 8008ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 809f 	beq.w	8008c0a <_svfiprintf_r+0x1c6>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad6:	f10a 0a01 	add.w	sl, sl, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ae2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ae4:	4654      	mov	r4, sl
 8008ae6:	2205      	movs	r2, #5
 8008ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aec:	484e      	ldr	r0, [pc, #312]	@ (8008c28 <_svfiprintf_r+0x1e4>)
 8008aee:	f7f7 fb77 	bl	80001e0 <memchr>
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	b9d8      	cbnz	r0, 8008b2e <_svfiprintf_r+0xea>
 8008af6:	06d0      	lsls	r0, r2, #27
 8008af8:	bf44      	itt	mi
 8008afa:	2320      	movmi	r3, #32
 8008afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b00:	0711      	lsls	r1, r2, #28
 8008b02:	bf44      	itt	mi
 8008b04:	232b      	movmi	r3, #43	@ 0x2b
 8008b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b10:	d015      	beq.n	8008b3e <_svfiprintf_r+0xfa>
 8008b12:	9a07      	ldr	r2, [sp, #28]
 8008b14:	4654      	mov	r4, sl
 8008b16:	2000      	movs	r0, #0
 8008b18:	f04f 0c0a 	mov.w	ip, #10
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b22:	3b30      	subs	r3, #48	@ 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d94b      	bls.n	8008bc0 <_svfiprintf_r+0x17c>
 8008b28:	b1b0      	cbz	r0, 8008b58 <_svfiprintf_r+0x114>
 8008b2a:	9207      	str	r2, [sp, #28]
 8008b2c:	e014      	b.n	8008b58 <_svfiprintf_r+0x114>
 8008b2e:	eba0 0308 	sub.w	r3, r0, r8
 8008b32:	fa09 f303 	lsl.w	r3, r9, r3
 8008b36:	4313      	orrs	r3, r2
 8008b38:	9304      	str	r3, [sp, #16]
 8008b3a:	46a2      	mov	sl, r4
 8008b3c:	e7d2      	b.n	8008ae4 <_svfiprintf_r+0xa0>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9103      	str	r1, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbb      	ittet	lt
 8008b4a:	425b      	neglt	r3, r3
 8008b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b50:	9307      	strge	r3, [sp, #28]
 8008b52:	9307      	strlt	r3, [sp, #28]
 8008b54:	bfb8      	it	lt
 8008b56:	9204      	strlt	r2, [sp, #16]
 8008b58:	7823      	ldrb	r3, [r4, #0]
 8008b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b5c:	d10a      	bne.n	8008b74 <_svfiprintf_r+0x130>
 8008b5e:	7863      	ldrb	r3, [r4, #1]
 8008b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b62:	d132      	bne.n	8008bca <_svfiprintf_r+0x186>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	9203      	str	r2, [sp, #12]
 8008b6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b70:	3402      	adds	r4, #2
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c2c <_svfiprintf_r+0x1e8>
 8008b78:	7821      	ldrb	r1, [r4, #0]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	4650      	mov	r0, sl
 8008b7e:	f7f7 fb2f 	bl	80001e0 <memchr>
 8008b82:	b138      	cbz	r0, 8008b94 <_svfiprintf_r+0x150>
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	eba0 000a 	sub.w	r0, r0, sl
 8008b8a:	2240      	movs	r2, #64	@ 0x40
 8008b8c:	4082      	lsls	r2, r0
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	3401      	adds	r4, #1
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b98:	4825      	ldr	r0, [pc, #148]	@ (8008c30 <_svfiprintf_r+0x1ec>)
 8008b9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b9e:	2206      	movs	r2, #6
 8008ba0:	f7f7 fb1e 	bl	80001e0 <memchr>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d036      	beq.n	8008c16 <_svfiprintf_r+0x1d2>
 8008ba8:	4b22      	ldr	r3, [pc, #136]	@ (8008c34 <_svfiprintf_r+0x1f0>)
 8008baa:	bb1b      	cbnz	r3, 8008bf4 <_svfiprintf_r+0x1b0>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	3307      	adds	r3, #7
 8008bb0:	f023 0307 	bic.w	r3, r3, #7
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bba:	4433      	add	r3, r6
 8008bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bbe:	e76a      	b.n	8008a96 <_svfiprintf_r+0x52>
 8008bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	e7a8      	b.n	8008b1c <_svfiprintf_r+0xd8>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	3401      	adds	r4, #1
 8008bce:	9305      	str	r3, [sp, #20]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f04f 0c0a 	mov.w	ip, #10
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bdc:	3a30      	subs	r2, #48	@ 0x30
 8008bde:	2a09      	cmp	r2, #9
 8008be0:	d903      	bls.n	8008bea <_svfiprintf_r+0x1a6>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0c6      	beq.n	8008b74 <_svfiprintf_r+0x130>
 8008be6:	9105      	str	r1, [sp, #20]
 8008be8:	e7c4      	b.n	8008b74 <_svfiprintf_r+0x130>
 8008bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bee:	4604      	mov	r4, r0
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e7f0      	b.n	8008bd6 <_svfiprintf_r+0x192>
 8008bf4:	ab03      	add	r3, sp, #12
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008c38 <_svfiprintf_r+0x1f4>)
 8008bfc:	a904      	add	r1, sp, #16
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7fc fce0 	bl	80055c4 <_printf_float>
 8008c04:	1c42      	adds	r2, r0, #1
 8008c06:	4606      	mov	r6, r0
 8008c08:	d1d6      	bne.n	8008bb8 <_svfiprintf_r+0x174>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	065b      	lsls	r3, r3, #25
 8008c0e:	f53f af2d 	bmi.w	8008a6c <_svfiprintf_r+0x28>
 8008c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c14:	e72c      	b.n	8008a70 <_svfiprintf_r+0x2c>
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <_svfiprintf_r+0x1f4>)
 8008c1e:	a904      	add	r1, sp, #16
 8008c20:	4638      	mov	r0, r7
 8008c22:	f7fc ff69 	bl	8005af8 <_printf_i>
 8008c26:	e7ed      	b.n	8008c04 <_svfiprintf_r+0x1c0>
 8008c28:	08009ef9 	.word	0x08009ef9
 8008c2c:	08009eff 	.word	0x08009eff
 8008c30:	08009f03 	.word	0x08009f03
 8008c34:	080055c5 	.word	0x080055c5
 8008c38:	0800898d 	.word	0x0800898d

08008c3c <__sflush_r>:
 8008c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	0716      	lsls	r6, r2, #28
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	d454      	bmi.n	8008cf4 <__sflush_r+0xb8>
 8008c4a:	684b      	ldr	r3, [r1, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dc02      	bgt.n	8008c56 <__sflush_r+0x1a>
 8008c50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd48      	ble.n	8008ce8 <__sflush_r+0xac>
 8008c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c58:	2e00      	cmp	r6, #0
 8008c5a:	d045      	beq.n	8008ce8 <__sflush_r+0xac>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c62:	682f      	ldr	r7, [r5, #0]
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	d030      	beq.n	8008ccc <__sflush_r+0x90>
 8008c6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	0759      	lsls	r1, r3, #29
 8008c70:	d505      	bpl.n	8008c7e <__sflush_r+0x42>
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	1ad2      	subs	r2, r2, r3
 8008c76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c78:	b10b      	cbz	r3, 8008c7e <__sflush_r+0x42>
 8008c7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c7c:	1ad2      	subs	r2, r2, r3
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c82:	6a21      	ldr	r1, [r4, #32]
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b0      	blx	r6
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	d106      	bne.n	8008c9c <__sflush_r+0x60>
 8008c8e:	6829      	ldr	r1, [r5, #0]
 8008c90:	291d      	cmp	r1, #29
 8008c92:	d82b      	bhi.n	8008cec <__sflush_r+0xb0>
 8008c94:	4a28      	ldr	r2, [pc, #160]	@ (8008d38 <__sflush_r+0xfc>)
 8008c96:	410a      	asrs	r2, r1
 8008c98:	07d6      	lsls	r6, r2, #31
 8008c9a:	d427      	bmi.n	8008cec <__sflush_r+0xb0>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	6062      	str	r2, [r4, #4]
 8008ca0:	04d9      	lsls	r1, r3, #19
 8008ca2:	6922      	ldr	r2, [r4, #16]
 8008ca4:	6022      	str	r2, [r4, #0]
 8008ca6:	d504      	bpl.n	8008cb2 <__sflush_r+0x76>
 8008ca8:	1c42      	adds	r2, r0, #1
 8008caa:	d101      	bne.n	8008cb0 <__sflush_r+0x74>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b903      	cbnz	r3, 8008cb2 <__sflush_r+0x76>
 8008cb0:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cb4:	602f      	str	r7, [r5, #0]
 8008cb6:	b1b9      	cbz	r1, 8008ce8 <__sflush_r+0xac>
 8008cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	d002      	beq.n	8008cc6 <__sflush_r+0x8a>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7fe fa41 	bl	8007148 <_free_r>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cca:	e00d      	b.n	8008ce8 <__sflush_r+0xac>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b0      	blx	r6
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	1c50      	adds	r0, r2, #1
 8008cd6:	d1c9      	bne.n	8008c6c <__sflush_r+0x30>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c6      	beq.n	8008c6c <__sflush_r+0x30>
 8008cde:	2b1d      	cmp	r3, #29
 8008ce0:	d001      	beq.n	8008ce6 <__sflush_r+0xaa>
 8008ce2:	2b16      	cmp	r3, #22
 8008ce4:	d11d      	bne.n	8008d22 <__sflush_r+0xe6>
 8008ce6:	602f      	str	r7, [r5, #0]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e021      	b.n	8008d30 <__sflush_r+0xf4>
 8008cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf0:	b21b      	sxth	r3, r3
 8008cf2:	e01a      	b.n	8008d2a <__sflush_r+0xee>
 8008cf4:	690f      	ldr	r7, [r1, #16]
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	d0f6      	beq.n	8008ce8 <__sflush_r+0xac>
 8008cfa:	0793      	lsls	r3, r2, #30
 8008cfc:	680e      	ldr	r6, [r1, #0]
 8008cfe:	bf08      	it	eq
 8008d00:	694b      	ldreq	r3, [r1, #20]
 8008d02:	600f      	str	r7, [r1, #0]
 8008d04:	bf18      	it	ne
 8008d06:	2300      	movne	r3, #0
 8008d08:	1bf6      	subs	r6, r6, r7
 8008d0a:	608b      	str	r3, [r1, #8]
 8008d0c:	2e00      	cmp	r6, #0
 8008d0e:	ddeb      	ble.n	8008ce8 <__sflush_r+0xac>
 8008d10:	6a21      	ldr	r1, [r4, #32]
 8008d12:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008d16:	4633      	mov	r3, r6
 8008d18:	463a      	mov	r2, r7
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47e0      	blx	ip
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	dc07      	bgt.n	8008d32 <__sflush_r+0xf6>
 8008d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d32:	4407      	add	r7, r0
 8008d34:	1a36      	subs	r6, r6, r0
 8008d36:	e7e9      	b.n	8008d0c <__sflush_r+0xd0>
 8008d38:	dfbffffe 	.word	0xdfbffffe

08008d3c <_fflush_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	690b      	ldr	r3, [r1, #16]
 8008d40:	4605      	mov	r5, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	b913      	cbnz	r3, 8008d4c <_fflush_r+0x10>
 8008d46:	2500      	movs	r5, #0
 8008d48:	4628      	mov	r0, r5
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	b118      	cbz	r0, 8008d56 <_fflush_r+0x1a>
 8008d4e:	6a03      	ldr	r3, [r0, #32]
 8008d50:	b90b      	cbnz	r3, 8008d56 <_fflush_r+0x1a>
 8008d52:	f7fd fa8b 	bl	800626c <__sinit>
 8008d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0f3      	beq.n	8008d46 <_fflush_r+0xa>
 8008d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d60:	07d0      	lsls	r0, r2, #31
 8008d62:	d404      	bmi.n	8008d6e <_fflush_r+0x32>
 8008d64:	0599      	lsls	r1, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_fflush_r+0x32>
 8008d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6a:	f7fd fb96 	bl	800649a <__retarget_lock_acquire_recursive>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	4621      	mov	r1, r4
 8008d72:	f7ff ff63 	bl	8008c3c <__sflush_r>
 8008d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d78:	07da      	lsls	r2, r3, #31
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	d4e4      	bmi.n	8008d48 <_fflush_r+0xc>
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	059b      	lsls	r3, r3, #22
 8008d82:	d4e1      	bmi.n	8008d48 <_fflush_r+0xc>
 8008d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d86:	f7fd fb89 	bl	800649c <__retarget_lock_release_recursive>
 8008d8a:	e7dd      	b.n	8008d48 <_fflush_r+0xc>

08008d8c <memmove>:
 8008d8c:	4288      	cmp	r0, r1
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	eb01 0402 	add.w	r4, r1, r2
 8008d94:	d902      	bls.n	8008d9c <memmove+0x10>
 8008d96:	4284      	cmp	r4, r0
 8008d98:	4623      	mov	r3, r4
 8008d9a:	d807      	bhi.n	8008dac <memmove+0x20>
 8008d9c:	1e43      	subs	r3, r0, #1
 8008d9e:	42a1      	cmp	r1, r4
 8008da0:	d008      	beq.n	8008db4 <memmove+0x28>
 8008da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008daa:	e7f8      	b.n	8008d9e <memmove+0x12>
 8008dac:	4402      	add	r2, r0
 8008dae:	4601      	mov	r1, r0
 8008db0:	428a      	cmp	r2, r1
 8008db2:	d100      	bne.n	8008db6 <memmove+0x2a>
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dbe:	e7f7      	b.n	8008db0 <memmove+0x24>

08008dc0 <strncmp>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	b16a      	cbz	r2, 8008de0 <strncmp+0x20>
 8008dc4:	3901      	subs	r1, #1
 8008dc6:	1884      	adds	r4, r0, r2
 8008dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dcc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d103      	bne.n	8008ddc <strncmp+0x1c>
 8008dd4:	42a0      	cmp	r0, r4
 8008dd6:	d001      	beq.n	8008ddc <strncmp+0x1c>
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	d1f5      	bne.n	8008dc8 <strncmp+0x8>
 8008ddc:	1ad0      	subs	r0, r2, r3
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	4610      	mov	r0, r2
 8008de2:	e7fc      	b.n	8008dde <strncmp+0x1e>

08008de4 <_sbrk_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	@ (8008e00 <_sbrk_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f9 f8fa 	bl	8001fe8 <_sbrk>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_sbrk_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_sbrk_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	200005b4 	.word	0x200005b4

08008e04 <memcpy>:
 8008e04:	440a      	add	r2, r1
 8008e06:	4291      	cmp	r1, r2
 8008e08:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e0c:	d100      	bne.n	8008e10 <memcpy+0xc>
 8008e0e:	4770      	bx	lr
 8008e10:	b510      	push	{r4, lr}
 8008e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e1a:	4291      	cmp	r1, r2
 8008e1c:	d1f9      	bne.n	8008e12 <memcpy+0xe>
 8008e1e:	bd10      	pop	{r4, pc}

08008e20 <nan>:
 8008e20:	4901      	ldr	r1, [pc, #4]	@ (8008e28 <nan+0x8>)
 8008e22:	2000      	movs	r0, #0
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	7ff80000 	.word	0x7ff80000

08008e2c <__assert_func>:
 8008e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e2e:	4614      	mov	r4, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	4b09      	ldr	r3, [pc, #36]	@ (8008e58 <__assert_func+0x2c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4605      	mov	r5, r0
 8008e38:	68d8      	ldr	r0, [r3, #12]
 8008e3a:	b954      	cbnz	r4, 8008e52 <__assert_func+0x26>
 8008e3c:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <__assert_func+0x30>)
 8008e3e:	461c      	mov	r4, r3
 8008e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e44:	9100      	str	r1, [sp, #0]
 8008e46:	462b      	mov	r3, r5
 8008e48:	4905      	ldr	r1, [pc, #20]	@ (8008e60 <__assert_func+0x34>)
 8008e4a:	f000 fba7 	bl	800959c <fiprintf>
 8008e4e:	f000 fbb7 	bl	80095c0 <abort>
 8008e52:	4b04      	ldr	r3, [pc, #16]	@ (8008e64 <__assert_func+0x38>)
 8008e54:	e7f4      	b.n	8008e40 <__assert_func+0x14>
 8008e56:	bf00      	nop
 8008e58:	2000000c 	.word	0x2000000c
 8008e5c:	08009f4d 	.word	0x08009f4d
 8008e60:	08009f1f 	.word	0x08009f1f
 8008e64:	08009f12 	.word	0x08009f12

08008e68 <_calloc_r>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	fba1 5402 	umull	r5, r4, r1, r2
 8008e6e:	b93c      	cbnz	r4, 8008e80 <_calloc_r+0x18>
 8008e70:	4629      	mov	r1, r5
 8008e72:	f7fe f9dd 	bl	8007230 <_malloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	b928      	cbnz	r0, 8008e86 <_calloc_r+0x1e>
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	220c      	movs	r2, #12
 8008e82:	6002      	str	r2, [r0, #0]
 8008e84:	e7f9      	b.n	8008e7a <_calloc_r+0x12>
 8008e86:	462a      	mov	r2, r5
 8008e88:	4621      	mov	r1, r4
 8008e8a:	f7fd fa88 	bl	800639e <memset>
 8008e8e:	e7f5      	b.n	8008e7c <_calloc_r+0x14>

08008e90 <rshift>:
 8008e90:	6903      	ldr	r3, [r0, #16]
 8008e92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e9e:	f100 0414 	add.w	r4, r0, #20
 8008ea2:	dd45      	ble.n	8008f30 <rshift+0xa0>
 8008ea4:	f011 011f 	ands.w	r1, r1, #31
 8008ea8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008eac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008eb0:	d10c      	bne.n	8008ecc <rshift+0x3c>
 8008eb2:	f100 0710 	add.w	r7, r0, #16
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	42b1      	cmp	r1, r6
 8008eba:	d334      	bcc.n	8008f26 <rshift+0x96>
 8008ebc:	1a9b      	subs	r3, r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	1eea      	subs	r2, r5, #3
 8008ec2:	4296      	cmp	r6, r2
 8008ec4:	bf38      	it	cc
 8008ec6:	2300      	movcc	r3, #0
 8008ec8:	4423      	add	r3, r4
 8008eca:	e015      	b.n	8008ef8 <rshift+0x68>
 8008ecc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ed0:	f1c1 0820 	rsb	r8, r1, #32
 8008ed4:	40cf      	lsrs	r7, r1
 8008ed6:	f105 0e04 	add.w	lr, r5, #4
 8008eda:	46a1      	mov	r9, r4
 8008edc:	4576      	cmp	r6, lr
 8008ede:	46f4      	mov	ip, lr
 8008ee0:	d815      	bhi.n	8008f0e <rshift+0x7e>
 8008ee2:	1a9a      	subs	r2, r3, r2
 8008ee4:	0092      	lsls	r2, r2, #2
 8008ee6:	3a04      	subs	r2, #4
 8008ee8:	3501      	adds	r5, #1
 8008eea:	42ae      	cmp	r6, r5
 8008eec:	bf38      	it	cc
 8008eee:	2200      	movcc	r2, #0
 8008ef0:	18a3      	adds	r3, r4, r2
 8008ef2:	50a7      	str	r7, [r4, r2]
 8008ef4:	b107      	cbz	r7, 8008ef8 <rshift+0x68>
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	1b1a      	subs	r2, r3, r4
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f00:	bf08      	it	eq
 8008f02:	2300      	moveq	r3, #0
 8008f04:	6102      	str	r2, [r0, #16]
 8008f06:	bf08      	it	eq
 8008f08:	6143      	streq	r3, [r0, #20]
 8008f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f0e:	f8dc c000 	ldr.w	ip, [ip]
 8008f12:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f16:	ea4c 0707 	orr.w	r7, ip, r7
 8008f1a:	f849 7b04 	str.w	r7, [r9], #4
 8008f1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f22:	40cf      	lsrs	r7, r1
 8008f24:	e7da      	b.n	8008edc <rshift+0x4c>
 8008f26:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f2a:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f2e:	e7c3      	b.n	8008eb8 <rshift+0x28>
 8008f30:	4623      	mov	r3, r4
 8008f32:	e7e1      	b.n	8008ef8 <rshift+0x68>

08008f34 <__hexdig_fun>:
 8008f34:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d802      	bhi.n	8008f42 <__hexdig_fun+0xe>
 8008f3c:	3820      	subs	r0, #32
 8008f3e:	b2c0      	uxtb	r0, r0
 8008f40:	4770      	bx	lr
 8008f42:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	d801      	bhi.n	8008f4e <__hexdig_fun+0x1a>
 8008f4a:	3847      	subs	r0, #71	@ 0x47
 8008f4c:	e7f7      	b.n	8008f3e <__hexdig_fun+0xa>
 8008f4e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008f52:	2b05      	cmp	r3, #5
 8008f54:	d801      	bhi.n	8008f5a <__hexdig_fun+0x26>
 8008f56:	3827      	subs	r0, #39	@ 0x27
 8008f58:	e7f1      	b.n	8008f3e <__hexdig_fun+0xa>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	4770      	bx	lr
	...

08008f60 <__gethex>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	b085      	sub	sp, #20
 8008f66:	468a      	mov	sl, r1
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	680b      	ldr	r3, [r1, #0]
 8008f6c:	9001      	str	r0, [sp, #4]
 8008f6e:	4690      	mov	r8, r2
 8008f70:	1c9c      	adds	r4, r3, #2
 8008f72:	46a1      	mov	r9, r4
 8008f74:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f78:	2830      	cmp	r0, #48	@ 0x30
 8008f7a:	d0fa      	beq.n	8008f72 <__gethex+0x12>
 8008f7c:	eba9 0303 	sub.w	r3, r9, r3
 8008f80:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f84:	f7ff ffd6 	bl	8008f34 <__hexdig_fun>
 8008f88:	4605      	mov	r5, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d168      	bne.n	8009060 <__gethex+0x100>
 8008f8e:	49a0      	ldr	r1, [pc, #640]	@ (8009210 <__gethex+0x2b0>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	4648      	mov	r0, r9
 8008f94:	f7ff ff14 	bl	8008dc0 <strncmp>
 8008f98:	4607      	mov	r7, r0
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d167      	bne.n	800906e <__gethex+0x10e>
 8008f9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008fa2:	4626      	mov	r6, r4
 8008fa4:	f7ff ffc6 	bl	8008f34 <__hexdig_fun>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d062      	beq.n	8009072 <__gethex+0x112>
 8008fac:	4623      	mov	r3, r4
 8008fae:	7818      	ldrb	r0, [r3, #0]
 8008fb0:	2830      	cmp	r0, #48	@ 0x30
 8008fb2:	4699      	mov	r9, r3
 8008fb4:	f103 0301 	add.w	r3, r3, #1
 8008fb8:	d0f9      	beq.n	8008fae <__gethex+0x4e>
 8008fba:	f7ff ffbb 	bl	8008f34 <__hexdig_fun>
 8008fbe:	fab0 f580 	clz	r5, r0
 8008fc2:	096d      	lsrs	r5, r5, #5
 8008fc4:	f04f 0b01 	mov.w	fp, #1
 8008fc8:	464a      	mov	r2, r9
 8008fca:	4616      	mov	r6, r2
 8008fcc:	3201      	adds	r2, #1
 8008fce:	7830      	ldrb	r0, [r6, #0]
 8008fd0:	f7ff ffb0 	bl	8008f34 <__hexdig_fun>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1f8      	bne.n	8008fca <__gethex+0x6a>
 8008fd8:	498d      	ldr	r1, [pc, #564]	@ (8009210 <__gethex+0x2b0>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff feef 	bl	8008dc0 <strncmp>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d13f      	bne.n	8009066 <__gethex+0x106>
 8008fe6:	b944      	cbnz	r4, 8008ffa <__gethex+0x9a>
 8008fe8:	1c74      	adds	r4, r6, #1
 8008fea:	4622      	mov	r2, r4
 8008fec:	4616      	mov	r6, r2
 8008fee:	3201      	adds	r2, #1
 8008ff0:	7830      	ldrb	r0, [r6, #0]
 8008ff2:	f7ff ff9f 	bl	8008f34 <__hexdig_fun>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d1f8      	bne.n	8008fec <__gethex+0x8c>
 8008ffa:	1ba4      	subs	r4, r4, r6
 8008ffc:	00a7      	lsls	r7, r4, #2
 8008ffe:	7833      	ldrb	r3, [r6, #0]
 8009000:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009004:	2b50      	cmp	r3, #80	@ 0x50
 8009006:	d13e      	bne.n	8009086 <__gethex+0x126>
 8009008:	7873      	ldrb	r3, [r6, #1]
 800900a:	2b2b      	cmp	r3, #43	@ 0x2b
 800900c:	d033      	beq.n	8009076 <__gethex+0x116>
 800900e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009010:	d034      	beq.n	800907c <__gethex+0x11c>
 8009012:	1c71      	adds	r1, r6, #1
 8009014:	2400      	movs	r4, #0
 8009016:	7808      	ldrb	r0, [r1, #0]
 8009018:	f7ff ff8c 	bl	8008f34 <__hexdig_fun>
 800901c:	1e43      	subs	r3, r0, #1
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b18      	cmp	r3, #24
 8009022:	d830      	bhi.n	8009086 <__gethex+0x126>
 8009024:	f1a0 0210 	sub.w	r2, r0, #16
 8009028:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800902c:	f7ff ff82 	bl	8008f34 <__hexdig_fun>
 8009030:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009034:	fa5f fc8c 	uxtb.w	ip, ip
 8009038:	f1bc 0f18 	cmp.w	ip, #24
 800903c:	f04f 030a 	mov.w	r3, #10
 8009040:	d91e      	bls.n	8009080 <__gethex+0x120>
 8009042:	b104      	cbz	r4, 8009046 <__gethex+0xe6>
 8009044:	4252      	negs	r2, r2
 8009046:	4417      	add	r7, r2
 8009048:	f8ca 1000 	str.w	r1, [sl]
 800904c:	b1ed      	cbz	r5, 800908a <__gethex+0x12a>
 800904e:	f1bb 0f00 	cmp.w	fp, #0
 8009052:	bf0c      	ite	eq
 8009054:	2506      	moveq	r5, #6
 8009056:	2500      	movne	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	b005      	add	sp, #20
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	2500      	movs	r5, #0
 8009062:	462c      	mov	r4, r5
 8009064:	e7b0      	b.n	8008fc8 <__gethex+0x68>
 8009066:	2c00      	cmp	r4, #0
 8009068:	d1c7      	bne.n	8008ffa <__gethex+0x9a>
 800906a:	4627      	mov	r7, r4
 800906c:	e7c7      	b.n	8008ffe <__gethex+0x9e>
 800906e:	464e      	mov	r6, r9
 8009070:	462f      	mov	r7, r5
 8009072:	2501      	movs	r5, #1
 8009074:	e7c3      	b.n	8008ffe <__gethex+0x9e>
 8009076:	2400      	movs	r4, #0
 8009078:	1cb1      	adds	r1, r6, #2
 800907a:	e7cc      	b.n	8009016 <__gethex+0xb6>
 800907c:	2401      	movs	r4, #1
 800907e:	e7fb      	b.n	8009078 <__gethex+0x118>
 8009080:	fb03 0002 	mla	r0, r3, r2, r0
 8009084:	e7ce      	b.n	8009024 <__gethex+0xc4>
 8009086:	4631      	mov	r1, r6
 8009088:	e7de      	b.n	8009048 <__gethex+0xe8>
 800908a:	eba6 0309 	sub.w	r3, r6, r9
 800908e:	3b01      	subs	r3, #1
 8009090:	4629      	mov	r1, r5
 8009092:	2b07      	cmp	r3, #7
 8009094:	dc0a      	bgt.n	80090ac <__gethex+0x14c>
 8009096:	9801      	ldr	r0, [sp, #4]
 8009098:	f7fe f956 	bl	8007348 <_Balloc>
 800909c:	4604      	mov	r4, r0
 800909e:	b940      	cbnz	r0, 80090b2 <__gethex+0x152>
 80090a0:	4b5c      	ldr	r3, [pc, #368]	@ (8009214 <__gethex+0x2b4>)
 80090a2:	4602      	mov	r2, r0
 80090a4:	21e4      	movs	r1, #228	@ 0xe4
 80090a6:	485c      	ldr	r0, [pc, #368]	@ (8009218 <__gethex+0x2b8>)
 80090a8:	f7ff fec0 	bl	8008e2c <__assert_func>
 80090ac:	3101      	adds	r1, #1
 80090ae:	105b      	asrs	r3, r3, #1
 80090b0:	e7ef      	b.n	8009092 <__gethex+0x132>
 80090b2:	f100 0a14 	add.w	sl, r0, #20
 80090b6:	2300      	movs	r3, #0
 80090b8:	4655      	mov	r5, sl
 80090ba:	469b      	mov	fp, r3
 80090bc:	45b1      	cmp	r9, r6
 80090be:	d337      	bcc.n	8009130 <__gethex+0x1d0>
 80090c0:	f845 bb04 	str.w	fp, [r5], #4
 80090c4:	eba5 050a 	sub.w	r5, r5, sl
 80090c8:	10ad      	asrs	r5, r5, #2
 80090ca:	6125      	str	r5, [r4, #16]
 80090cc:	4658      	mov	r0, fp
 80090ce:	f7fe fa2d 	bl	800752c <__hi0bits>
 80090d2:	016d      	lsls	r5, r5, #5
 80090d4:	f8d8 6000 	ldr.w	r6, [r8]
 80090d8:	1a2d      	subs	r5, r5, r0
 80090da:	42b5      	cmp	r5, r6
 80090dc:	dd54      	ble.n	8009188 <__gethex+0x228>
 80090de:	1bad      	subs	r5, r5, r6
 80090e0:	4629      	mov	r1, r5
 80090e2:	4620      	mov	r0, r4
 80090e4:	f7fe fdb7 	bl	8007c56 <__any_on>
 80090e8:	4681      	mov	r9, r0
 80090ea:	b178      	cbz	r0, 800910c <__gethex+0x1ac>
 80090ec:	1e6b      	subs	r3, r5, #1
 80090ee:	1159      	asrs	r1, r3, #5
 80090f0:	f003 021f 	and.w	r2, r3, #31
 80090f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090f8:	f04f 0901 	mov.w	r9, #1
 80090fc:	fa09 f202 	lsl.w	r2, r9, r2
 8009100:	420a      	tst	r2, r1
 8009102:	d003      	beq.n	800910c <__gethex+0x1ac>
 8009104:	454b      	cmp	r3, r9
 8009106:	dc36      	bgt.n	8009176 <__gethex+0x216>
 8009108:	f04f 0902 	mov.w	r9, #2
 800910c:	4629      	mov	r1, r5
 800910e:	4620      	mov	r0, r4
 8009110:	f7ff febe 	bl	8008e90 <rshift>
 8009114:	442f      	add	r7, r5
 8009116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800911a:	42bb      	cmp	r3, r7
 800911c:	da42      	bge.n	80091a4 <__gethex+0x244>
 800911e:	9801      	ldr	r0, [sp, #4]
 8009120:	4621      	mov	r1, r4
 8009122:	f7fe f951 	bl	80073c8 <_Bfree>
 8009126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009128:	2300      	movs	r3, #0
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	25a3      	movs	r5, #163	@ 0xa3
 800912e:	e793      	b.n	8009058 <__gethex+0xf8>
 8009130:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009134:	2a2e      	cmp	r2, #46	@ 0x2e
 8009136:	d012      	beq.n	800915e <__gethex+0x1fe>
 8009138:	2b20      	cmp	r3, #32
 800913a:	d104      	bne.n	8009146 <__gethex+0x1e6>
 800913c:	f845 bb04 	str.w	fp, [r5], #4
 8009140:	f04f 0b00 	mov.w	fp, #0
 8009144:	465b      	mov	r3, fp
 8009146:	7830      	ldrb	r0, [r6, #0]
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	f7ff fef3 	bl	8008f34 <__hexdig_fun>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	f000 000f 	and.w	r0, r0, #15
 8009154:	4098      	lsls	r0, r3
 8009156:	ea4b 0b00 	orr.w	fp, fp, r0
 800915a:	3304      	adds	r3, #4
 800915c:	e7ae      	b.n	80090bc <__gethex+0x15c>
 800915e:	45b1      	cmp	r9, r6
 8009160:	d8ea      	bhi.n	8009138 <__gethex+0x1d8>
 8009162:	492b      	ldr	r1, [pc, #172]	@ (8009210 <__gethex+0x2b0>)
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	4630      	mov	r0, r6
 800916a:	f7ff fe29 	bl	8008dc0 <strncmp>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	2800      	cmp	r0, #0
 8009172:	d1e1      	bne.n	8009138 <__gethex+0x1d8>
 8009174:	e7a2      	b.n	80090bc <__gethex+0x15c>
 8009176:	1ea9      	subs	r1, r5, #2
 8009178:	4620      	mov	r0, r4
 800917a:	f7fe fd6c 	bl	8007c56 <__any_on>
 800917e:	2800      	cmp	r0, #0
 8009180:	d0c2      	beq.n	8009108 <__gethex+0x1a8>
 8009182:	f04f 0903 	mov.w	r9, #3
 8009186:	e7c1      	b.n	800910c <__gethex+0x1ac>
 8009188:	da09      	bge.n	800919e <__gethex+0x23e>
 800918a:	1b75      	subs	r5, r6, r5
 800918c:	4621      	mov	r1, r4
 800918e:	9801      	ldr	r0, [sp, #4]
 8009190:	462a      	mov	r2, r5
 8009192:	f7fe fb31 	bl	80077f8 <__lshift>
 8009196:	1b7f      	subs	r7, r7, r5
 8009198:	4604      	mov	r4, r0
 800919a:	f100 0a14 	add.w	sl, r0, #20
 800919e:	f04f 0900 	mov.w	r9, #0
 80091a2:	e7b8      	b.n	8009116 <__gethex+0x1b6>
 80091a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80091a8:	42bd      	cmp	r5, r7
 80091aa:	dd6f      	ble.n	800928c <__gethex+0x32c>
 80091ac:	1bed      	subs	r5, r5, r7
 80091ae:	42ae      	cmp	r6, r5
 80091b0:	dc34      	bgt.n	800921c <__gethex+0x2bc>
 80091b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d022      	beq.n	8009200 <__gethex+0x2a0>
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d024      	beq.n	8009208 <__gethex+0x2a8>
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d115      	bne.n	80091ee <__gethex+0x28e>
 80091c2:	42ae      	cmp	r6, r5
 80091c4:	d113      	bne.n	80091ee <__gethex+0x28e>
 80091c6:	2e01      	cmp	r6, #1
 80091c8:	d10b      	bne.n	80091e2 <__gethex+0x282>
 80091ca:	9a02      	ldr	r2, [sp, #8]
 80091cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	2301      	movs	r3, #1
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	f8ca 3000 	str.w	r3, [sl]
 80091da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091dc:	2562      	movs	r5, #98	@ 0x62
 80091de:	601c      	str	r4, [r3, #0]
 80091e0:	e73a      	b.n	8009058 <__gethex+0xf8>
 80091e2:	1e71      	subs	r1, r6, #1
 80091e4:	4620      	mov	r0, r4
 80091e6:	f7fe fd36 	bl	8007c56 <__any_on>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d1ed      	bne.n	80091ca <__gethex+0x26a>
 80091ee:	9801      	ldr	r0, [sp, #4]
 80091f0:	4621      	mov	r1, r4
 80091f2:	f7fe f8e9 	bl	80073c8 <_Bfree>
 80091f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091f8:	2300      	movs	r3, #0
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	2550      	movs	r5, #80	@ 0x50
 80091fe:	e72b      	b.n	8009058 <__gethex+0xf8>
 8009200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f3      	bne.n	80091ee <__gethex+0x28e>
 8009206:	e7e0      	b.n	80091ca <__gethex+0x26a>
 8009208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1dd      	bne.n	80091ca <__gethex+0x26a>
 800920e:	e7ee      	b.n	80091ee <__gethex+0x28e>
 8009210:	08009da0 	.word	0x08009da0
 8009214:	08009c34 	.word	0x08009c34
 8009218:	08009f4e 	.word	0x08009f4e
 800921c:	1e6f      	subs	r7, r5, #1
 800921e:	f1b9 0f00 	cmp.w	r9, #0
 8009222:	d130      	bne.n	8009286 <__gethex+0x326>
 8009224:	b127      	cbz	r7, 8009230 <__gethex+0x2d0>
 8009226:	4639      	mov	r1, r7
 8009228:	4620      	mov	r0, r4
 800922a:	f7fe fd14 	bl	8007c56 <__any_on>
 800922e:	4681      	mov	r9, r0
 8009230:	117a      	asrs	r2, r7, #5
 8009232:	2301      	movs	r3, #1
 8009234:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009238:	f007 071f 	and.w	r7, r7, #31
 800923c:	40bb      	lsls	r3, r7
 800923e:	4213      	tst	r3, r2
 8009240:	4629      	mov	r1, r5
 8009242:	4620      	mov	r0, r4
 8009244:	bf18      	it	ne
 8009246:	f049 0902 	orrne.w	r9, r9, #2
 800924a:	f7ff fe21 	bl	8008e90 <rshift>
 800924e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009252:	1b76      	subs	r6, r6, r5
 8009254:	2502      	movs	r5, #2
 8009256:	f1b9 0f00 	cmp.w	r9, #0
 800925a:	d047      	beq.n	80092ec <__gethex+0x38c>
 800925c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d015      	beq.n	8009290 <__gethex+0x330>
 8009264:	2b03      	cmp	r3, #3
 8009266:	d017      	beq.n	8009298 <__gethex+0x338>
 8009268:	2b01      	cmp	r3, #1
 800926a:	d109      	bne.n	8009280 <__gethex+0x320>
 800926c:	f019 0f02 	tst.w	r9, #2
 8009270:	d006      	beq.n	8009280 <__gethex+0x320>
 8009272:	f8da 3000 	ldr.w	r3, [sl]
 8009276:	ea49 0903 	orr.w	r9, r9, r3
 800927a:	f019 0f01 	tst.w	r9, #1
 800927e:	d10e      	bne.n	800929e <__gethex+0x33e>
 8009280:	f045 0510 	orr.w	r5, r5, #16
 8009284:	e032      	b.n	80092ec <__gethex+0x38c>
 8009286:	f04f 0901 	mov.w	r9, #1
 800928a:	e7d1      	b.n	8009230 <__gethex+0x2d0>
 800928c:	2501      	movs	r5, #1
 800928e:	e7e2      	b.n	8009256 <__gethex+0x2f6>
 8009290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009292:	f1c3 0301 	rsb	r3, r3, #1
 8009296:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0f0      	beq.n	8009280 <__gethex+0x320>
 800929e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80092a2:	f104 0314 	add.w	r3, r4, #20
 80092a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80092aa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80092ae:	f04f 0c00 	mov.w	ip, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80092bc:	d01b      	beq.n	80092f6 <__gethex+0x396>
 80092be:	3201      	adds	r2, #1
 80092c0:	6002      	str	r2, [r0, #0]
 80092c2:	2d02      	cmp	r5, #2
 80092c4:	f104 0314 	add.w	r3, r4, #20
 80092c8:	d13c      	bne.n	8009344 <__gethex+0x3e4>
 80092ca:	f8d8 2000 	ldr.w	r2, [r8]
 80092ce:	3a01      	subs	r2, #1
 80092d0:	42b2      	cmp	r2, r6
 80092d2:	d109      	bne.n	80092e8 <__gethex+0x388>
 80092d4:	1171      	asrs	r1, r6, #5
 80092d6:	2201      	movs	r2, #1
 80092d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092dc:	f006 061f 	and.w	r6, r6, #31
 80092e0:	fa02 f606 	lsl.w	r6, r2, r6
 80092e4:	421e      	tst	r6, r3
 80092e6:	d13a      	bne.n	800935e <__gethex+0x3fe>
 80092e8:	f045 0520 	orr.w	r5, r5, #32
 80092ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ee:	601c      	str	r4, [r3, #0]
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	601f      	str	r7, [r3, #0]
 80092f4:	e6b0      	b.n	8009058 <__gethex+0xf8>
 80092f6:	4299      	cmp	r1, r3
 80092f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80092fc:	d8d9      	bhi.n	80092b2 <__gethex+0x352>
 80092fe:	68a3      	ldr	r3, [r4, #8]
 8009300:	459b      	cmp	fp, r3
 8009302:	db17      	blt.n	8009334 <__gethex+0x3d4>
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	9801      	ldr	r0, [sp, #4]
 8009308:	3101      	adds	r1, #1
 800930a:	f7fe f81d 	bl	8007348 <_Balloc>
 800930e:	4681      	mov	r9, r0
 8009310:	b918      	cbnz	r0, 800931a <__gethex+0x3ba>
 8009312:	4b1a      	ldr	r3, [pc, #104]	@ (800937c <__gethex+0x41c>)
 8009314:	4602      	mov	r2, r0
 8009316:	2184      	movs	r1, #132	@ 0x84
 8009318:	e6c5      	b.n	80090a6 <__gethex+0x146>
 800931a:	6922      	ldr	r2, [r4, #16]
 800931c:	3202      	adds	r2, #2
 800931e:	f104 010c 	add.w	r1, r4, #12
 8009322:	0092      	lsls	r2, r2, #2
 8009324:	300c      	adds	r0, #12
 8009326:	f7ff fd6d 	bl	8008e04 <memcpy>
 800932a:	4621      	mov	r1, r4
 800932c:	9801      	ldr	r0, [sp, #4]
 800932e:	f7fe f84b 	bl	80073c8 <_Bfree>
 8009332:	464c      	mov	r4, r9
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800933c:	6122      	str	r2, [r4, #16]
 800933e:	2201      	movs	r2, #1
 8009340:	615a      	str	r2, [r3, #20]
 8009342:	e7be      	b.n	80092c2 <__gethex+0x362>
 8009344:	6922      	ldr	r2, [r4, #16]
 8009346:	455a      	cmp	r2, fp
 8009348:	dd0b      	ble.n	8009362 <__gethex+0x402>
 800934a:	2101      	movs	r1, #1
 800934c:	4620      	mov	r0, r4
 800934e:	f7ff fd9f 	bl	8008e90 <rshift>
 8009352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009356:	3701      	adds	r7, #1
 8009358:	42bb      	cmp	r3, r7
 800935a:	f6ff aee0 	blt.w	800911e <__gethex+0x1be>
 800935e:	2501      	movs	r5, #1
 8009360:	e7c2      	b.n	80092e8 <__gethex+0x388>
 8009362:	f016 061f 	ands.w	r6, r6, #31
 8009366:	d0fa      	beq.n	800935e <__gethex+0x3fe>
 8009368:	4453      	add	r3, sl
 800936a:	f1c6 0620 	rsb	r6, r6, #32
 800936e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009372:	f7fe f8db 	bl	800752c <__hi0bits>
 8009376:	42b0      	cmp	r0, r6
 8009378:	dbe7      	blt.n	800934a <__gethex+0x3ea>
 800937a:	e7f0      	b.n	800935e <__gethex+0x3fe>
 800937c:	08009c34 	.word	0x08009c34

08009380 <L_shift>:
 8009380:	f1c2 0208 	rsb	r2, r2, #8
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	b570      	push	{r4, r5, r6, lr}
 8009388:	f1c2 0620 	rsb	r6, r2, #32
 800938c:	6843      	ldr	r3, [r0, #4]
 800938e:	6804      	ldr	r4, [r0, #0]
 8009390:	fa03 f506 	lsl.w	r5, r3, r6
 8009394:	432c      	orrs	r4, r5
 8009396:	40d3      	lsrs	r3, r2
 8009398:	6004      	str	r4, [r0, #0]
 800939a:	f840 3f04 	str.w	r3, [r0, #4]!
 800939e:	4288      	cmp	r0, r1
 80093a0:	d3f4      	bcc.n	800938c <L_shift+0xc>
 80093a2:	bd70      	pop	{r4, r5, r6, pc}

080093a4 <__match>:
 80093a4:	b530      	push	{r4, r5, lr}
 80093a6:	6803      	ldr	r3, [r0, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ae:	b914      	cbnz	r4, 80093b6 <__match+0x12>
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	2001      	movs	r0, #1
 80093b4:	bd30      	pop	{r4, r5, pc}
 80093b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80093be:	2d19      	cmp	r5, #25
 80093c0:	bf98      	it	ls
 80093c2:	3220      	addls	r2, #32
 80093c4:	42a2      	cmp	r2, r4
 80093c6:	d0f0      	beq.n	80093aa <__match+0x6>
 80093c8:	2000      	movs	r0, #0
 80093ca:	e7f3      	b.n	80093b4 <__match+0x10>

080093cc <__hexnan>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	680b      	ldr	r3, [r1, #0]
 80093d2:	6801      	ldr	r1, [r0, #0]
 80093d4:	115e      	asrs	r6, r3, #5
 80093d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093da:	f013 031f 	ands.w	r3, r3, #31
 80093de:	b087      	sub	sp, #28
 80093e0:	bf18      	it	ne
 80093e2:	3604      	addne	r6, #4
 80093e4:	2500      	movs	r5, #0
 80093e6:	1f37      	subs	r7, r6, #4
 80093e8:	4682      	mov	sl, r0
 80093ea:	4690      	mov	r8, r2
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80093f2:	46b9      	mov	r9, r7
 80093f4:	463c      	mov	r4, r7
 80093f6:	9502      	str	r5, [sp, #8]
 80093f8:	46ab      	mov	fp, r5
 80093fa:	784a      	ldrb	r2, [r1, #1]
 80093fc:	1c4b      	adds	r3, r1, #1
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	b342      	cbz	r2, 8009454 <__hexnan+0x88>
 8009402:	4610      	mov	r0, r2
 8009404:	9105      	str	r1, [sp, #20]
 8009406:	9204      	str	r2, [sp, #16]
 8009408:	f7ff fd94 	bl	8008f34 <__hexdig_fun>
 800940c:	2800      	cmp	r0, #0
 800940e:	d151      	bne.n	80094b4 <__hexnan+0xe8>
 8009410:	9a04      	ldr	r2, [sp, #16]
 8009412:	9905      	ldr	r1, [sp, #20]
 8009414:	2a20      	cmp	r2, #32
 8009416:	d818      	bhi.n	800944a <__hexnan+0x7e>
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	459b      	cmp	fp, r3
 800941c:	dd13      	ble.n	8009446 <__hexnan+0x7a>
 800941e:	454c      	cmp	r4, r9
 8009420:	d206      	bcs.n	8009430 <__hexnan+0x64>
 8009422:	2d07      	cmp	r5, #7
 8009424:	dc04      	bgt.n	8009430 <__hexnan+0x64>
 8009426:	462a      	mov	r2, r5
 8009428:	4649      	mov	r1, r9
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff ffa8 	bl	8009380 <L_shift>
 8009430:	4544      	cmp	r4, r8
 8009432:	d952      	bls.n	80094da <__hexnan+0x10e>
 8009434:	2300      	movs	r3, #0
 8009436:	f1a4 0904 	sub.w	r9, r4, #4
 800943a:	f844 3c04 	str.w	r3, [r4, #-4]
 800943e:	f8cd b008 	str.w	fp, [sp, #8]
 8009442:	464c      	mov	r4, r9
 8009444:	461d      	mov	r5, r3
 8009446:	9903      	ldr	r1, [sp, #12]
 8009448:	e7d7      	b.n	80093fa <__hexnan+0x2e>
 800944a:	2a29      	cmp	r2, #41	@ 0x29
 800944c:	d157      	bne.n	80094fe <__hexnan+0x132>
 800944e:	3102      	adds	r1, #2
 8009450:	f8ca 1000 	str.w	r1, [sl]
 8009454:	f1bb 0f00 	cmp.w	fp, #0
 8009458:	d051      	beq.n	80094fe <__hexnan+0x132>
 800945a:	454c      	cmp	r4, r9
 800945c:	d206      	bcs.n	800946c <__hexnan+0xa0>
 800945e:	2d07      	cmp	r5, #7
 8009460:	dc04      	bgt.n	800946c <__hexnan+0xa0>
 8009462:	462a      	mov	r2, r5
 8009464:	4649      	mov	r1, r9
 8009466:	4620      	mov	r0, r4
 8009468:	f7ff ff8a 	bl	8009380 <L_shift>
 800946c:	4544      	cmp	r4, r8
 800946e:	d936      	bls.n	80094de <__hexnan+0x112>
 8009470:	f1a8 0204 	sub.w	r2, r8, #4
 8009474:	4623      	mov	r3, r4
 8009476:	f853 1b04 	ldr.w	r1, [r3], #4
 800947a:	f842 1f04 	str.w	r1, [r2, #4]!
 800947e:	429f      	cmp	r7, r3
 8009480:	d2f9      	bcs.n	8009476 <__hexnan+0xaa>
 8009482:	1b3b      	subs	r3, r7, r4
 8009484:	f023 0303 	bic.w	r3, r3, #3
 8009488:	3304      	adds	r3, #4
 800948a:	3401      	adds	r4, #1
 800948c:	3e03      	subs	r6, #3
 800948e:	42b4      	cmp	r4, r6
 8009490:	bf88      	it	hi
 8009492:	2304      	movhi	r3, #4
 8009494:	4443      	add	r3, r8
 8009496:	2200      	movs	r2, #0
 8009498:	f843 2b04 	str.w	r2, [r3], #4
 800949c:	429f      	cmp	r7, r3
 800949e:	d2fb      	bcs.n	8009498 <__hexnan+0xcc>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	b91b      	cbnz	r3, 80094ac <__hexnan+0xe0>
 80094a4:	4547      	cmp	r7, r8
 80094a6:	d128      	bne.n	80094fa <__hexnan+0x12e>
 80094a8:	2301      	movs	r3, #1
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	2005      	movs	r0, #5
 80094ae:	b007      	add	sp, #28
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	3501      	adds	r5, #1
 80094b6:	2d08      	cmp	r5, #8
 80094b8:	f10b 0b01 	add.w	fp, fp, #1
 80094bc:	dd06      	ble.n	80094cc <__hexnan+0x100>
 80094be:	4544      	cmp	r4, r8
 80094c0:	d9c1      	bls.n	8009446 <__hexnan+0x7a>
 80094c2:	2300      	movs	r3, #0
 80094c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80094c8:	2501      	movs	r5, #1
 80094ca:	3c04      	subs	r4, #4
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	f000 000f 	and.w	r0, r0, #15
 80094d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094d6:	6020      	str	r0, [r4, #0]
 80094d8:	e7b5      	b.n	8009446 <__hexnan+0x7a>
 80094da:	2508      	movs	r5, #8
 80094dc:	e7b3      	b.n	8009446 <__hexnan+0x7a>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0dd      	beq.n	80094a0 <__hexnan+0xd4>
 80094e4:	f1c3 0320 	rsb	r3, r3, #32
 80094e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094ec:	40da      	lsrs	r2, r3
 80094ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094f2:	4013      	ands	r3, r2
 80094f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80094f8:	e7d2      	b.n	80094a0 <__hexnan+0xd4>
 80094fa:	3f04      	subs	r7, #4
 80094fc:	e7d0      	b.n	80094a0 <__hexnan+0xd4>
 80094fe:	2004      	movs	r0, #4
 8009500:	e7d5      	b.n	80094ae <__hexnan+0xe2>

08009502 <__ascii_mbtowc>:
 8009502:	b082      	sub	sp, #8
 8009504:	b901      	cbnz	r1, 8009508 <__ascii_mbtowc+0x6>
 8009506:	a901      	add	r1, sp, #4
 8009508:	b142      	cbz	r2, 800951c <__ascii_mbtowc+0x1a>
 800950a:	b14b      	cbz	r3, 8009520 <__ascii_mbtowc+0x1e>
 800950c:	7813      	ldrb	r3, [r2, #0]
 800950e:	600b      	str	r3, [r1, #0]
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	1e10      	subs	r0, r2, #0
 8009514:	bf18      	it	ne
 8009516:	2001      	movne	r0, #1
 8009518:	b002      	add	sp, #8
 800951a:	4770      	bx	lr
 800951c:	4610      	mov	r0, r2
 800951e:	e7fb      	b.n	8009518 <__ascii_mbtowc+0x16>
 8009520:	f06f 0001 	mvn.w	r0, #1
 8009524:	e7f8      	b.n	8009518 <__ascii_mbtowc+0x16>

08009526 <_realloc_r>:
 8009526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952a:	4680      	mov	r8, r0
 800952c:	4615      	mov	r5, r2
 800952e:	460c      	mov	r4, r1
 8009530:	b921      	cbnz	r1, 800953c <_realloc_r+0x16>
 8009532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	4611      	mov	r1, r2
 8009538:	f7fd be7a 	b.w	8007230 <_malloc_r>
 800953c:	b92a      	cbnz	r2, 800954a <_realloc_r+0x24>
 800953e:	f7fd fe03 	bl	8007148 <_free_r>
 8009542:	2400      	movs	r4, #0
 8009544:	4620      	mov	r0, r4
 8009546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954a:	f000 f840 	bl	80095ce <_malloc_usable_size_r>
 800954e:	4285      	cmp	r5, r0
 8009550:	4606      	mov	r6, r0
 8009552:	d802      	bhi.n	800955a <_realloc_r+0x34>
 8009554:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009558:	d8f4      	bhi.n	8009544 <_realloc_r+0x1e>
 800955a:	4629      	mov	r1, r5
 800955c:	4640      	mov	r0, r8
 800955e:	f7fd fe67 	bl	8007230 <_malloc_r>
 8009562:	4607      	mov	r7, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d0ec      	beq.n	8009542 <_realloc_r+0x1c>
 8009568:	42b5      	cmp	r5, r6
 800956a:	462a      	mov	r2, r5
 800956c:	4621      	mov	r1, r4
 800956e:	bf28      	it	cs
 8009570:	4632      	movcs	r2, r6
 8009572:	f7ff fc47 	bl	8008e04 <memcpy>
 8009576:	4621      	mov	r1, r4
 8009578:	4640      	mov	r0, r8
 800957a:	f7fd fde5 	bl	8007148 <_free_r>
 800957e:	463c      	mov	r4, r7
 8009580:	e7e0      	b.n	8009544 <_realloc_r+0x1e>

08009582 <__ascii_wctomb>:
 8009582:	4603      	mov	r3, r0
 8009584:	4608      	mov	r0, r1
 8009586:	b141      	cbz	r1, 800959a <__ascii_wctomb+0x18>
 8009588:	2aff      	cmp	r2, #255	@ 0xff
 800958a:	d904      	bls.n	8009596 <__ascii_wctomb+0x14>
 800958c:	228a      	movs	r2, #138	@ 0x8a
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009594:	4770      	bx	lr
 8009596:	700a      	strb	r2, [r1, #0]
 8009598:	2001      	movs	r0, #1
 800959a:	4770      	bx	lr

0800959c <fiprintf>:
 800959c:	b40e      	push	{r1, r2, r3}
 800959e:	b503      	push	{r0, r1, lr}
 80095a0:	4601      	mov	r1, r0
 80095a2:	ab03      	add	r3, sp, #12
 80095a4:	4805      	ldr	r0, [pc, #20]	@ (80095bc <fiprintf+0x20>)
 80095a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	f000 f83d 	bl	800962c <_vfiprintf_r>
 80095b2:	b002      	add	sp, #8
 80095b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095b8:	b003      	add	sp, #12
 80095ba:	4770      	bx	lr
 80095bc:	2000000c 	.word	0x2000000c

080095c0 <abort>:
 80095c0:	b508      	push	{r3, lr}
 80095c2:	2006      	movs	r0, #6
 80095c4:	f000 fa06 	bl	80099d4 <raise>
 80095c8:	2001      	movs	r0, #1
 80095ca:	f7f8 fc98 	bl	8001efe <_exit>

080095ce <_malloc_usable_size_r>:
 80095ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d2:	1f18      	subs	r0, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	bfbc      	itt	lt
 80095d8:	580b      	ldrlt	r3, [r1, r0]
 80095da:	18c0      	addlt	r0, r0, r3
 80095dc:	4770      	bx	lr

080095de <__sfputc_r>:
 80095de:	6893      	ldr	r3, [r2, #8]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	b410      	push	{r4}
 80095e6:	6093      	str	r3, [r2, #8]
 80095e8:	da07      	bge.n	80095fa <__sfputc_r+0x1c>
 80095ea:	6994      	ldr	r4, [r2, #24]
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	db01      	blt.n	80095f4 <__sfputc_r+0x16>
 80095f0:	290a      	cmp	r1, #10
 80095f2:	d102      	bne.n	80095fa <__sfputc_r+0x1c>
 80095f4:	bc10      	pop	{r4}
 80095f6:	f000 b931 	b.w	800985c <__swbuf_r>
 80095fa:	6813      	ldr	r3, [r2, #0]
 80095fc:	1c58      	adds	r0, r3, #1
 80095fe:	6010      	str	r0, [r2, #0]
 8009600:	7019      	strb	r1, [r3, #0]
 8009602:	4608      	mov	r0, r1
 8009604:	bc10      	pop	{r4}
 8009606:	4770      	bx	lr

08009608 <__sfputs_r>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	4614      	mov	r4, r2
 8009610:	18d5      	adds	r5, r2, r3
 8009612:	42ac      	cmp	r4, r5
 8009614:	d101      	bne.n	800961a <__sfputs_r+0x12>
 8009616:	2000      	movs	r0, #0
 8009618:	e007      	b.n	800962a <__sfputs_r+0x22>
 800961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961e:	463a      	mov	r2, r7
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ffdc 	bl	80095de <__sfputc_r>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d1f3      	bne.n	8009612 <__sfputs_r+0xa>
 800962a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800962c <_vfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	460d      	mov	r5, r1
 8009632:	b09d      	sub	sp, #116	@ 0x74
 8009634:	4614      	mov	r4, r2
 8009636:	4698      	mov	r8, r3
 8009638:	4606      	mov	r6, r0
 800963a:	b118      	cbz	r0, 8009644 <_vfiprintf_r+0x18>
 800963c:	6a03      	ldr	r3, [r0, #32]
 800963e:	b90b      	cbnz	r3, 8009644 <_vfiprintf_r+0x18>
 8009640:	f7fc fe14 	bl	800626c <__sinit>
 8009644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009646:	07d9      	lsls	r1, r3, #31
 8009648:	d405      	bmi.n	8009656 <_vfiprintf_r+0x2a>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	059a      	lsls	r2, r3, #22
 800964e:	d402      	bmi.n	8009656 <_vfiprintf_r+0x2a>
 8009650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009652:	f7fc ff22 	bl	800649a <__retarget_lock_acquire_recursive>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	071b      	lsls	r3, r3, #28
 800965a:	d501      	bpl.n	8009660 <_vfiprintf_r+0x34>
 800965c:	692b      	ldr	r3, [r5, #16]
 800965e:	b99b      	cbnz	r3, 8009688 <_vfiprintf_r+0x5c>
 8009660:	4629      	mov	r1, r5
 8009662:	4630      	mov	r0, r6
 8009664:	f000 f938 	bl	80098d8 <__swsetup_r>
 8009668:	b170      	cbz	r0, 8009688 <_vfiprintf_r+0x5c>
 800966a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800966c:	07dc      	lsls	r4, r3, #31
 800966e:	d504      	bpl.n	800967a <_vfiprintf_r+0x4e>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009674:	b01d      	add	sp, #116	@ 0x74
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	0598      	lsls	r0, r3, #22
 800967e:	d4f7      	bmi.n	8009670 <_vfiprintf_r+0x44>
 8009680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009682:	f7fc ff0b 	bl	800649c <__retarget_lock_release_recursive>
 8009686:	e7f3      	b.n	8009670 <_vfiprintf_r+0x44>
 8009688:	2300      	movs	r3, #0
 800968a:	9309      	str	r3, [sp, #36]	@ 0x24
 800968c:	2320      	movs	r3, #32
 800968e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009692:	f8cd 800c 	str.w	r8, [sp, #12]
 8009696:	2330      	movs	r3, #48	@ 0x30
 8009698:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009848 <_vfiprintf_r+0x21c>
 800969c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096a0:	f04f 0901 	mov.w	r9, #1
 80096a4:	4623      	mov	r3, r4
 80096a6:	469a      	mov	sl, r3
 80096a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ac:	b10a      	cbz	r2, 80096b2 <_vfiprintf_r+0x86>
 80096ae:	2a25      	cmp	r2, #37	@ 0x25
 80096b0:	d1f9      	bne.n	80096a6 <_vfiprintf_r+0x7a>
 80096b2:	ebba 0b04 	subs.w	fp, sl, r4
 80096b6:	d00b      	beq.n	80096d0 <_vfiprintf_r+0xa4>
 80096b8:	465b      	mov	r3, fp
 80096ba:	4622      	mov	r2, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ffa2 	bl	8009608 <__sfputs_r>
 80096c4:	3001      	adds	r0, #1
 80096c6:	f000 80a7 	beq.w	8009818 <_vfiprintf_r+0x1ec>
 80096ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096cc:	445a      	add	r2, fp
 80096ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80096d0:	f89a 3000 	ldrb.w	r3, [sl]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 809f 	beq.w	8009818 <_vfiprintf_r+0x1ec>
 80096da:	2300      	movs	r3, #0
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e4:	f10a 0a01 	add.w	sl, sl, #1
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	9307      	str	r3, [sp, #28]
 80096ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096f2:	4654      	mov	r4, sl
 80096f4:	2205      	movs	r2, #5
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4853      	ldr	r0, [pc, #332]	@ (8009848 <_vfiprintf_r+0x21c>)
 80096fc:	f7f6 fd70 	bl	80001e0 <memchr>
 8009700:	9a04      	ldr	r2, [sp, #16]
 8009702:	b9d8      	cbnz	r0, 800973c <_vfiprintf_r+0x110>
 8009704:	06d1      	lsls	r1, r2, #27
 8009706:	bf44      	itt	mi
 8009708:	2320      	movmi	r3, #32
 800970a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970e:	0713      	lsls	r3, r2, #28
 8009710:	bf44      	itt	mi
 8009712:	232b      	movmi	r3, #43	@ 0x2b
 8009714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009718:	f89a 3000 	ldrb.w	r3, [sl]
 800971c:	2b2a      	cmp	r3, #42	@ 0x2a
 800971e:	d015      	beq.n	800974c <_vfiprintf_r+0x120>
 8009720:	9a07      	ldr	r2, [sp, #28]
 8009722:	4654      	mov	r4, sl
 8009724:	2000      	movs	r0, #0
 8009726:	f04f 0c0a 	mov.w	ip, #10
 800972a:	4621      	mov	r1, r4
 800972c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009730:	3b30      	subs	r3, #48	@ 0x30
 8009732:	2b09      	cmp	r3, #9
 8009734:	d94b      	bls.n	80097ce <_vfiprintf_r+0x1a2>
 8009736:	b1b0      	cbz	r0, 8009766 <_vfiprintf_r+0x13a>
 8009738:	9207      	str	r2, [sp, #28]
 800973a:	e014      	b.n	8009766 <_vfiprintf_r+0x13a>
 800973c:	eba0 0308 	sub.w	r3, r0, r8
 8009740:	fa09 f303 	lsl.w	r3, r9, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	46a2      	mov	sl, r4
 800974a:	e7d2      	b.n	80096f2 <_vfiprintf_r+0xc6>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	1d19      	adds	r1, r3, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	9103      	str	r1, [sp, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	bfbb      	ittet	lt
 8009758:	425b      	neglt	r3, r3
 800975a:	f042 0202 	orrlt.w	r2, r2, #2
 800975e:	9307      	strge	r3, [sp, #28]
 8009760:	9307      	strlt	r3, [sp, #28]
 8009762:	bfb8      	it	lt
 8009764:	9204      	strlt	r2, [sp, #16]
 8009766:	7823      	ldrb	r3, [r4, #0]
 8009768:	2b2e      	cmp	r3, #46	@ 0x2e
 800976a:	d10a      	bne.n	8009782 <_vfiprintf_r+0x156>
 800976c:	7863      	ldrb	r3, [r4, #1]
 800976e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009770:	d132      	bne.n	80097d8 <_vfiprintf_r+0x1ac>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	1d1a      	adds	r2, r3, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	9203      	str	r2, [sp, #12]
 800977a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800977e:	3402      	adds	r4, #2
 8009780:	9305      	str	r3, [sp, #20]
 8009782:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800984c <_vfiprintf_r+0x220>
 8009786:	7821      	ldrb	r1, [r4, #0]
 8009788:	2203      	movs	r2, #3
 800978a:	4650      	mov	r0, sl
 800978c:	f7f6 fd28 	bl	80001e0 <memchr>
 8009790:	b138      	cbz	r0, 80097a2 <_vfiprintf_r+0x176>
 8009792:	9b04      	ldr	r3, [sp, #16]
 8009794:	eba0 000a 	sub.w	r0, r0, sl
 8009798:	2240      	movs	r2, #64	@ 0x40
 800979a:	4082      	lsls	r2, r0
 800979c:	4313      	orrs	r3, r2
 800979e:	3401      	adds	r4, #1
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	482a      	ldr	r0, [pc, #168]	@ (8009850 <_vfiprintf_r+0x224>)
 80097a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097ac:	2206      	movs	r2, #6
 80097ae:	f7f6 fd17 	bl	80001e0 <memchr>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d03f      	beq.n	8009836 <_vfiprintf_r+0x20a>
 80097b6:	4b27      	ldr	r3, [pc, #156]	@ (8009854 <_vfiprintf_r+0x228>)
 80097b8:	bb1b      	cbnz	r3, 8009802 <_vfiprintf_r+0x1d6>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	3307      	adds	r3, #7
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	3308      	adds	r3, #8
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c8:	443b      	add	r3, r7
 80097ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80097cc:	e76a      	b.n	80096a4 <_vfiprintf_r+0x78>
 80097ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d2:	460c      	mov	r4, r1
 80097d4:	2001      	movs	r0, #1
 80097d6:	e7a8      	b.n	800972a <_vfiprintf_r+0xfe>
 80097d8:	2300      	movs	r3, #0
 80097da:	3401      	adds	r4, #1
 80097dc:	9305      	str	r3, [sp, #20]
 80097de:	4619      	mov	r1, r3
 80097e0:	f04f 0c0a 	mov.w	ip, #10
 80097e4:	4620      	mov	r0, r4
 80097e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ea:	3a30      	subs	r2, #48	@ 0x30
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d903      	bls.n	80097f8 <_vfiprintf_r+0x1cc>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0c6      	beq.n	8009782 <_vfiprintf_r+0x156>
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	e7c4      	b.n	8009782 <_vfiprintf_r+0x156>
 80097f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097fc:	4604      	mov	r4, r0
 80097fe:	2301      	movs	r3, #1
 8009800:	e7f0      	b.n	80097e4 <_vfiprintf_r+0x1b8>
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4b13      	ldr	r3, [pc, #76]	@ (8009858 <_vfiprintf_r+0x22c>)
 800980a:	a904      	add	r1, sp, #16
 800980c:	4630      	mov	r0, r6
 800980e:	f7fb fed9 	bl	80055c4 <_printf_float>
 8009812:	4607      	mov	r7, r0
 8009814:	1c78      	adds	r0, r7, #1
 8009816:	d1d6      	bne.n	80097c6 <_vfiprintf_r+0x19a>
 8009818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	d405      	bmi.n	800982a <_vfiprintf_r+0x1fe>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	059a      	lsls	r2, r3, #22
 8009822:	d402      	bmi.n	800982a <_vfiprintf_r+0x1fe>
 8009824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009826:	f7fc fe39 	bl	800649c <__retarget_lock_release_recursive>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	065b      	lsls	r3, r3, #25
 800982e:	f53f af1f 	bmi.w	8009670 <_vfiprintf_r+0x44>
 8009832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009834:	e71e      	b.n	8009674 <_vfiprintf_r+0x48>
 8009836:	ab03      	add	r3, sp, #12
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	462a      	mov	r2, r5
 800983c:	4b06      	ldr	r3, [pc, #24]	@ (8009858 <_vfiprintf_r+0x22c>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	4630      	mov	r0, r6
 8009842:	f7fc f959 	bl	8005af8 <_printf_i>
 8009846:	e7e4      	b.n	8009812 <_vfiprintf_r+0x1e6>
 8009848:	08009ef9 	.word	0x08009ef9
 800984c:	08009eff 	.word	0x08009eff
 8009850:	08009f03 	.word	0x08009f03
 8009854:	080055c5 	.word	0x080055c5
 8009858:	08009609 	.word	0x08009609

0800985c <__swbuf_r>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	460e      	mov	r6, r1
 8009860:	4614      	mov	r4, r2
 8009862:	4605      	mov	r5, r0
 8009864:	b118      	cbz	r0, 800986e <__swbuf_r+0x12>
 8009866:	6a03      	ldr	r3, [r0, #32]
 8009868:	b90b      	cbnz	r3, 800986e <__swbuf_r+0x12>
 800986a:	f7fc fcff 	bl	800626c <__sinit>
 800986e:	69a3      	ldr	r3, [r4, #24]
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	071a      	lsls	r2, r3, #28
 8009876:	d501      	bpl.n	800987c <__swbuf_r+0x20>
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	b943      	cbnz	r3, 800988e <__swbuf_r+0x32>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f82a 	bl	80098d8 <__swsetup_r>
 8009884:	b118      	cbz	r0, 800988e <__swbuf_r+0x32>
 8009886:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800988a:	4638      	mov	r0, r7
 800988c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	1a98      	subs	r0, r3, r2
 8009894:	6963      	ldr	r3, [r4, #20]
 8009896:	b2f6      	uxtb	r6, r6
 8009898:	4283      	cmp	r3, r0
 800989a:	4637      	mov	r7, r6
 800989c:	dc05      	bgt.n	80098aa <__swbuf_r+0x4e>
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7ff fa4b 	bl	8008d3c <_fflush_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1ed      	bne.n	8009886 <__swbuf_r+0x2a>
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	701e      	strb	r6, [r3, #0]
 80098b8:	6962      	ldr	r2, [r4, #20]
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	429a      	cmp	r2, r3
 80098be:	d004      	beq.n	80098ca <__swbuf_r+0x6e>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	07db      	lsls	r3, r3, #31
 80098c4:	d5e1      	bpl.n	800988a <__swbuf_r+0x2e>
 80098c6:	2e0a      	cmp	r6, #10
 80098c8:	d1df      	bne.n	800988a <__swbuf_r+0x2e>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7ff fa35 	bl	8008d3c <_fflush_r>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d0d9      	beq.n	800988a <__swbuf_r+0x2e>
 80098d6:	e7d6      	b.n	8009886 <__swbuf_r+0x2a>

080098d8 <__swsetup_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4b29      	ldr	r3, [pc, #164]	@ (8009980 <__swsetup_r+0xa8>)
 80098dc:	4605      	mov	r5, r0
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	460c      	mov	r4, r1
 80098e2:	b118      	cbz	r0, 80098ec <__swsetup_r+0x14>
 80098e4:	6a03      	ldr	r3, [r0, #32]
 80098e6:	b90b      	cbnz	r3, 80098ec <__swsetup_r+0x14>
 80098e8:	f7fc fcc0 	bl	800626c <__sinit>
 80098ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f0:	0719      	lsls	r1, r3, #28
 80098f2:	d422      	bmi.n	800993a <__swsetup_r+0x62>
 80098f4:	06da      	lsls	r2, r3, #27
 80098f6:	d407      	bmi.n	8009908 <__swsetup_r+0x30>
 80098f8:	2209      	movs	r2, #9
 80098fa:	602a      	str	r2, [r5, #0]
 80098fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009906:	e033      	b.n	8009970 <__swsetup_r+0x98>
 8009908:	0758      	lsls	r0, r3, #29
 800990a:	d512      	bpl.n	8009932 <__swsetup_r+0x5a>
 800990c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990e:	b141      	cbz	r1, 8009922 <__swsetup_r+0x4a>
 8009910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009914:	4299      	cmp	r1, r3
 8009916:	d002      	beq.n	800991e <__swsetup_r+0x46>
 8009918:	4628      	mov	r0, r5
 800991a:	f7fd fc15 	bl	8007148 <_free_r>
 800991e:	2300      	movs	r3, #0
 8009920:	6363      	str	r3, [r4, #52]	@ 0x34
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	2300      	movs	r3, #0
 800992c:	6063      	str	r3, [r4, #4]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f043 0308 	orr.w	r3, r3, #8
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	b94b      	cbnz	r3, 8009952 <__swsetup_r+0x7a>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009948:	d003      	beq.n	8009952 <__swsetup_r+0x7a>
 800994a:	4621      	mov	r1, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f883 	bl	8009a58 <__smakebuf_r>
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	f013 0201 	ands.w	r2, r3, #1
 800995a:	d00a      	beq.n	8009972 <__swsetup_r+0x9a>
 800995c:	2200      	movs	r2, #0
 800995e:	60a2      	str	r2, [r4, #8]
 8009960:	6962      	ldr	r2, [r4, #20]
 8009962:	4252      	negs	r2, r2
 8009964:	61a2      	str	r2, [r4, #24]
 8009966:	6922      	ldr	r2, [r4, #16]
 8009968:	b942      	cbnz	r2, 800997c <__swsetup_r+0xa4>
 800996a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800996e:	d1c5      	bne.n	80098fc <__swsetup_r+0x24>
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	0799      	lsls	r1, r3, #30
 8009974:	bf58      	it	pl
 8009976:	6962      	ldrpl	r2, [r4, #20]
 8009978:	60a2      	str	r2, [r4, #8]
 800997a:	e7f4      	b.n	8009966 <__swsetup_r+0x8e>
 800997c:	2000      	movs	r0, #0
 800997e:	e7f7      	b.n	8009970 <__swsetup_r+0x98>
 8009980:	2000000c 	.word	0x2000000c

08009984 <_raise_r>:
 8009984:	291f      	cmp	r1, #31
 8009986:	b538      	push	{r3, r4, r5, lr}
 8009988:	4605      	mov	r5, r0
 800998a:	460c      	mov	r4, r1
 800998c:	d904      	bls.n	8009998 <_raise_r+0x14>
 800998e:	2316      	movs	r3, #22
 8009990:	6003      	str	r3, [r0, #0]
 8009992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800999a:	b112      	cbz	r2, 80099a2 <_raise_r+0x1e>
 800999c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099a0:	b94b      	cbnz	r3, 80099b6 <_raise_r+0x32>
 80099a2:	4628      	mov	r0, r5
 80099a4:	f000 f830 	bl	8009a08 <_getpid_r>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4601      	mov	r1, r0
 80099ac:	4628      	mov	r0, r5
 80099ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b2:	f000 b817 	b.w	80099e4 <_kill_r>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d00a      	beq.n	80099d0 <_raise_r+0x4c>
 80099ba:	1c59      	adds	r1, r3, #1
 80099bc:	d103      	bne.n	80099c6 <_raise_r+0x42>
 80099be:	2316      	movs	r3, #22
 80099c0:	6003      	str	r3, [r0, #0]
 80099c2:	2001      	movs	r0, #1
 80099c4:	e7e7      	b.n	8009996 <_raise_r+0x12>
 80099c6:	2100      	movs	r1, #0
 80099c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099cc:	4620      	mov	r0, r4
 80099ce:	4798      	blx	r3
 80099d0:	2000      	movs	r0, #0
 80099d2:	e7e0      	b.n	8009996 <_raise_r+0x12>

080099d4 <raise>:
 80099d4:	4b02      	ldr	r3, [pc, #8]	@ (80099e0 <raise+0xc>)
 80099d6:	4601      	mov	r1, r0
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f7ff bfd3 	b.w	8009984 <_raise_r>
 80099de:	bf00      	nop
 80099e0:	2000000c 	.word	0x2000000c

080099e4 <_kill_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	@ (8009a04 <_kill_r+0x20>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	f7f8 fa74 	bl	8001ede <_kill>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d102      	bne.n	8009a00 <_kill_r+0x1c>
 80099fa:	682b      	ldr	r3, [r5, #0]
 80099fc:	b103      	cbz	r3, 8009a00 <_kill_r+0x1c>
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	bd38      	pop	{r3, r4, r5, pc}
 8009a02:	bf00      	nop
 8009a04:	200005b4 	.word	0x200005b4

08009a08 <_getpid_r>:
 8009a08:	f7f8 ba62 	b.w	8001ed0 <_getpid>

08009a0c <__swhatbuf_r>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	460c      	mov	r4, r1
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	2900      	cmp	r1, #0
 8009a16:	b096      	sub	sp, #88	@ 0x58
 8009a18:	4615      	mov	r5, r2
 8009a1a:	461e      	mov	r6, r3
 8009a1c:	da0d      	bge.n	8009a3a <__swhatbuf_r+0x2e>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a24:	f04f 0100 	mov.w	r1, #0
 8009a28:	bf14      	ite	ne
 8009a2a:	2340      	movne	r3, #64	@ 0x40
 8009a2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a30:	2000      	movs	r0, #0
 8009a32:	6031      	str	r1, [r6, #0]
 8009a34:	602b      	str	r3, [r5, #0]
 8009a36:	b016      	add	sp, #88	@ 0x58
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	466a      	mov	r2, sp
 8009a3c:	f000 f848 	bl	8009ad0 <_fstat_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	dbec      	blt.n	8009a1e <__swhatbuf_r+0x12>
 8009a44:	9901      	ldr	r1, [sp, #4]
 8009a46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a4e:	4259      	negs	r1, r3
 8009a50:	4159      	adcs	r1, r3
 8009a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a56:	e7eb      	b.n	8009a30 <__swhatbuf_r+0x24>

08009a58 <__smakebuf_r>:
 8009a58:	898b      	ldrh	r3, [r1, #12]
 8009a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5c:	079d      	lsls	r5, r3, #30
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	d507      	bpl.n	8009a74 <__smakebuf_r+0x1c>
 8009a64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	6163      	str	r3, [r4, #20]
 8009a70:	b003      	add	sp, #12
 8009a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a74:	ab01      	add	r3, sp, #4
 8009a76:	466a      	mov	r2, sp
 8009a78:	f7ff ffc8 	bl	8009a0c <__swhatbuf_r>
 8009a7c:	9f00      	ldr	r7, [sp, #0]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	4639      	mov	r1, r7
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7fd fbd4 	bl	8007230 <_malloc_r>
 8009a88:	b948      	cbnz	r0, 8009a9e <__smakebuf_r+0x46>
 8009a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8e:	059a      	lsls	r2, r3, #22
 8009a90:	d4ee      	bmi.n	8009a70 <__smakebuf_r+0x18>
 8009a92:	f023 0303 	bic.w	r3, r3, #3
 8009a96:	f043 0302 	orr.w	r3, r3, #2
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	e7e2      	b.n	8009a64 <__smakebuf_r+0xc>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	6020      	str	r0, [r4, #0]
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009aae:	b15b      	cbz	r3, 8009ac8 <__smakebuf_r+0x70>
 8009ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f000 f81d 	bl	8009af4 <_isatty_r>
 8009aba:	b128      	cbz	r0, 8009ac8 <__smakebuf_r+0x70>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	431d      	orrs	r5, r3
 8009acc:	81a5      	strh	r5, [r4, #12]
 8009ace:	e7cf      	b.n	8009a70 <__smakebuf_r+0x18>

08009ad0 <_fstat_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d07      	ldr	r5, [pc, #28]	@ (8009af0 <_fstat_r+0x20>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	4611      	mov	r1, r2
 8009adc:	602b      	str	r3, [r5, #0]
 8009ade:	f7f8 fa5d 	bl	8001f9c <_fstat>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d102      	bne.n	8009aec <_fstat_r+0x1c>
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	b103      	cbz	r3, 8009aec <_fstat_r+0x1c>
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	bd38      	pop	{r3, r4, r5, pc}
 8009aee:	bf00      	nop
 8009af0:	200005b4 	.word	0x200005b4

08009af4 <_isatty_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d06      	ldr	r5, [pc, #24]	@ (8009b10 <_isatty_r+0x1c>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	f7f8 fa5b 	bl	8001fba <_isatty>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_isatty_r+0x1a>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_isatty_r+0x1a>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	200005b4 	.word	0x200005b4

08009b14 <_init>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	bf00      	nop
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr

08009b20 <_fini>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr
